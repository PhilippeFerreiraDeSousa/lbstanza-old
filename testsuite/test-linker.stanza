defpackage stz-test-suite/test-linker :
  import core
  import collections
  import stz/compiler-build-settings
  import stz/compiler-result
  import stz/proj-ir
  import stz/aux-file
  import stz/package-stamps
  import stz/compiler-linking

;============================================================
;==================== Testing Utilities =====================
;============================================================

;Create dummy build settings.
defn dummy-build-settings (arguments:Tuple<KeyValue<String,?>>) -> BuildSettings :
  ;Save arguments in table for easy lookup.
  val table = to-hashtable<String,?>(arguments)  

  val packages = BuildPackages(
    table["packages"]
    get?(table, "target"))

  val platform = get?(table, "platform", `os-x)

  val asmfile = AsmFile(
    get?(table, "asmfile", "myprog.s")
    get?(table, "asmfile-temporary?", false))

  val output = get?(table, "output")

  val external-deps = get?(table, "external-deps")

  val ccfiles = get?(table, "ccfiles", [])

  val ccflags = get?(table, "ccflags", [])

  ;Create dummy BuildSettings object from what we have.
  BuildSettings(
    packages,
    []
    platform,
    asmfile,
    output,
    external-deps,
    false,
    false,
    ccfiles,
    ccflags,
    [],
    [])

defn dummy-compilation-result (arguments:Tuple<KeyValue<String,?>>) -> CompilationResult :
  ;Save arguments in table for easy lookup.
  val table = to-hashtable<String,?>(arguments)

  val packages:Tuple<Symbol> = table["packages"]

  val package-stamps = for name in packages map :
    val pkg-src = to-string("%_.stanza" % [name])
    val loc = PkgLocation(name, pkg-src, false, false)
    val source-stamp = ByteArray(256)
    for i in 0 to 256 do : source-stamp[i] = to-byte(rand(256))
    PackageStamp(loc,
                 source-stamp,
                 false)

  CompilationResult(
    packages,
    []
    package-stamps,
    [])

defn dummy-proj-file (arguments:Tuple) -> ProjFile :
  val stmts = Vector<ProjStmt>()
  for arg in arguments do :
    match(arg) :
      (arg:RequiresStmt) : add(stmts, arg)
      (arg) : false
  ProjFile(to-tuple(stmts))

defn dummy-aux-file () -> AuxFile :
  AuxFile()

;============================================================
;================== Create Build Settings ===================
;============================================================
  
let :
  val build-settings = dummy-build-settings $ [
    "packages" => [`core `collections, `userprogram1, `userprogram2, `userprogram3]]
  val compilation-result = dummy-compilation-result $ [
    "packages" => [`core `collections `userprogram1, `userprogram2, `userprogram3]]
  val proj-file = dummy-proj-file $ [
    RequiresStmt(`userprogram1, ["mylib1.c" "mylib2.c"], ["-libc" "-libd"])
    RequiresStmt(`userprogram2, ["separate.c"], ["-separate"])
    RequiresStmt(`userprogram3, ["mylib1.c" "mylib3.c" "mylib2.c"], ["-libc" "-libd"])]
  val aux-file = dummy-aux-file()

  println(build-settings)
  println(compilation-result)
  val input = LinkerInput(
    build-settings,
    compilation-result,
    proj-file,
    aux-file)
  println(input)

  link(input, new LinkerEnv)


;;<commetn>
;
;  val input = LinkerInput(
;    BuildSettings(
;      BuildPackages(names = [`testcompile/prog], original-target = false),
;      [],
;      `os-x,
;      AsmFile("myfile.s", false),
;      "prog",
;      false,
;      false,
;      false,
;      [],
;      [],
;      [],
;      [])
;    CompilationResult(
;      [core collections core/parsed-path clib core/stack-trace testcompile/lib1 testcompile/lib2 testcompile/lib3 testcompile/prog],
;      [],
;      [PackageStamp(location = PkgLocation(package = core/stack-trace, source-file = false, pkg-file = "/Applications/stanza/pkgs/core$stack-trace.pkg", read-pkg? = true), source-hashstamp = false, pkg-hashstamp = [109Y 46Y])
;       PackageStamp(location = PkgLocation(package = core/parsed-path, source-file = false, pkg-file = "/Applications/stanza/pkgs/core$parsed-path.pkg", read-pkg? = true), source-hashstamp = false, pkg-hashstamp = [137Y 74Y])
;       PackageStamp(location = PkgLocation(package = clib, source-file = false, pkg-file = "/Applications/stanza/pkgs/clib.pkg", read-pkg? = true), source-hashstamp = false, pkg-hashstamp = [82Y 207Y ])
;       PackageStamp(location = PkgLocation(package = collections, source-file = false, pkg-file = "/Applications/stanza/pkgs/collections.pkg", read-pkg? = true), source-hashstamp = false, pkg-hashstamp = [62Y 194Y ])
;       PackageStamp(location = PkgLocation(package = testcompile/prog, source-file = "prog.stanza", pkg-file = false, read-pkg? = false), source-hashstamp = [232Y 12Y ], pkg-hashstamp = false)
;       PackageStamp(location = PkgLocation(package = testcompile/lib1, source-file = "lib1.stanza", pkg-file = false, read-pkg? = false), source-hashstamp = [107Y 65Y ], pkg-hashstamp = false)
;       PackageStamp(location = PkgLocation(package = testcompile/lib2, source-file = "lib2.stanza", pkg-file = false, read-pkg? = false), source-hashstamp = [138Y 107Y ], pkg-hashstamp = false)
;       PackageStamp(location = PkgLocation(package = testcompile/lib3, source-file = "lib3.stanza", pkg-file = false, read-pkg? = false), source-hashstamp = [115Y 158Y ], pkg-hashstamp = false)
;       PackageStamp(location = PkgLocation(package = core, source-file = false, pkg-file = "/Applications/stanza/pkgs/core.pkg", read-pkg? = true), source-hashstamp = false, pkg-hashstamp = [82Y 216Y ])],
;       output-pkgs = [])
;    ProjFile()
;    AuxFile()
;  )
;  link(input, env)
;
;;<commetn>