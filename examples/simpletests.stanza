#use-added-syntax(tests)
defpackage simple-tests :
  import core
  import collections

;Correct implementation of sum
defn compute-sum (a:Int, b:Int, c:Int) :
  a + b + c

;Incorrect implementation of sum
defn bad-compute-sum (a:Int, b:Int, c:Int):
  a + b * c
  
;Correct implementation of product
defn compute-product (a:Int, b:Int) :
  a * b

;Test sum function with one set of inputs.
deftest sum1 :
  #ASSERT(compute-sum(1,2,3) == 6)

;Test sum function with another set of inputs.
deftest sum2 :
  println("Compute bad sum")
  #ASSERT(bad-compute-sum(1,2,3) == 6)

;Test product function with three sets of inputs.
;Use a generated name to name the test.
for a in [2 3 4] do :
  deftest(product-tests) (to-string("product: a = %_" % [a])) :
    #ASSERT(compute-product(a, 10) == a * 10)

;Tag a given test as 'flaky'.
deftest(flaky) bad-test :
  #ASSERT(rand(10) < 8)

;Using expect instead of assert
deftest test-expect :
  val counter = to-seq(0 to false)
  #EXPECT(next(counter) == 0)
  #EXPECT(next(counter) == 1)
  #EXPECT(next(counter) == 2)
  #EXPECT(next(counter) == 2)
  #EXPECT(next(counter) == 2)

;Using and/or expressions in assertions
deftest test-and-or :
  val x = 3
  val y = 4
  val z = 5
  val w = 6
  #EXPECT(x == 2 or x == 5)
  #EXPECT(x == 3 and y == 6)
  #EXPECT(x == 3 and y == 4 and z == 6 and w == 7)