defpackage argparsing :
  import core
  import collections
  import stz/arg-parser2
  import stz/line-wrap

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version X.Y.Z

Copyright (c) 2016-2019, Patrick Shaobai Li, The Regents of the University of California. All Rights Reserved.
<MSG>

defn print-version-command () :
  val flags = [
    Flag("terse", ZeroFlag, OptionalFlag,
      "Print the version information in X.Y.Z form without \
      surrounding title information.")]

  val version-msg = "Prints the version information of the \
  Stanza compiler."
  defn print-version (cmd-args:CommandArgs) :
    println("Execute 'version' command!")
  
  Command("version",
          ZeroArg, false,
          flags,
          version-msg, print-version)

defn common-stanza-flags (desired-flags:Tuple<String>) :
  val flags = [
    Flag("o", OneFlag, OptionalFlag,
      "The name of the output assembly file.")
    Flag("s", OneFlag, OptionalFlag,
      "The name of the output assembly file.")
    Flag("pkg", ZeroOrOneFlag, OptionalFlag,
      "Requests the compiler to output the .pkg files. The name of the folder to store the output .pkg files can be optionally provided.")
    Flag("optimize", ZeroFlag, OptionalFlag,
      "Requests the compiler to compile in optimized mode.")
    Flag("ccfiles", ZeroOrMoreFlag, OptionalFlag,
      "The set of C language files to link the final generated assembly against to produce the final executable.")
    Flag("ccflags", GreedyFlag, OptionalFlag,
      "The set of flags to pass to the linker to link the final generated assembly to produce the final executable.")
    Flag("flags", ZeroOrMoreFlag, OptionalFlag,
      "The set of compile-time flags to be set before compilation of the source code.")
    Flag("verbose", ZeroFlag, OptionalFlag,
      "Controls whether the compiler should output verbose messages indicating status of compilation.")      
    Flag("supported-vm-packages", ZeroOrMoreFlag, OptionalFlag,
      "The list of Stanza packages with extern definitions that the Stanza REPL should support.")
    Flag("platform", OneFlag, OptionalFlag,
      "Provide the target platform to compile to.")
    Flag("external-dependencies", OneFlag, OptionalFlag,
      "The name of the output external dependencies file.")]
  to-tuple(filter(contains?{desired-flags, name(_)}, flags))

val COMPILE-LONG-DESCRIPTION = trim $ \<S>
The installation command compiles the given Stanza input files to either executable, assembly, or pkg form.

Example usages:

Compiling a source file to an executable

  stanza compile myfile.stanza -o myexe

Compiling a source file to .pkg files

  stanza compile myfile.stanza -pkg
<S>

defn compile-command () :
  ;Main action for command
  val compile-msg = "Compile the given Stanza input files to either executable, \
  assembly, or pkg form."
  defn compile-action (cmd-args:CommandArgs) :
    println("Execute 'compile' command!")

  ;Command 
  Command("compile",
          AtLeastOneArg, "the .stanza/.proj input files or Stanza package names.",
          common-stanza-flags(["o" "s" "pkg" "optimize" "ccfiles" "ccflags" "flags"
                               "verbose" "supported-vm-packages" "platform" "external-dependencies"]),
          compile-msg, COMPILE-LONG-DESCRIPTION, compile-action)

defn build-command () :
  ;Main action for command
  val build-msg = "Build one of the targets defined in the .proj file."
  defn build (cmd-args:CommandArgs) :
    println("Execute 'build' command!")

  ;Command definition
  Command("build",
          ZeroOrOneArg, "the name of the build target. If not supplied, the default build target is 'main'.",
          common-stanza-flags(["s" "o" "external-dependencies" "pkg" "flags" "optimize" "verbose"]),
          build-msg, build)

defn clean-command () :
  val clean-msg = "Deletes the stanza.aux file which maintains the \
  cache between previously compiled source files and their resulting \
  .pkg files."
  defn clean (cmd-args:CommandArgs) :
    println("Execute 'clean' command!")

  Command("clean",
          ZeroArg, false,
          [],
          clean-msg, clean)

defn extend-command () :
  ;Main action for command
  val extend-msg = "Extends the Stanza compiler with additional syntax packages and external bindings."
  defn extend (cmd-args:CommandArgs) :
    println("Execute 'extend' command!")
  
  ;Command definition
  Command("extend",
          ZeroOrMoreArg, "the .stanza/.proj input files or Stanza packages to use to extend the current compiler with.",
          common-stanza-flags(["s" "o" "external-dependencies" "ccfiles" "ccflags" "flags" "supported-vm-packages" "optimize" "verbose"])
          extend-msg, extend)

defn compile-test-command () :
  ;Main action for command
  val compile-test-msg = ""
  defn compile-test (cmd-args:CommandArgs) :
    println("Execute 'compile-test' command!")

  ;Command definition
  Command("compile-test",
          AtLeastOneArg, "the .stanza/.proj input files or Stanza packages names containing tests.",
          common-stanza-flags(["platform" "s" "o" "external-dependencies" "pkg" "ccfiles" "ccfflags" "flags" "optimize" "verbose"])
          compile-test-msg, compile-test)

defn install-command () :
  ;Flags
  val flags = [
    Flag("platform", OneFlag, RequiredFlag,
      "Provide the target platform to install to.")
    Flag("path", OneFlag, OptionalFlag,
      "Provide the directory to generate the .stanza file in. By default, \
       the .stanza file is generated in the user's home directory.")]
       
  ;Main action for command
  val install-msg = "Installs the Stanza compiler to the current system."
  defn install (cmd-args:CommandArgs) :
    println("Execute 'install' command!")

  ;Command definition
  Command("install",
          ZeroArg, false,
          flags,
          install-msg, install)

defn show-path-command () :
  ;Main action for command
  val show-path-msg = "Retrieve the installation path of the current \
  Stanza installation."
  defn show-path (cmd-args:CommandArgs) :
    println("Execute 'show-path' command!")

  ;Command definition
  Command("path",
          ZeroArg, false,
          [],
          show-path-msg, show-path)

defn repl-command () :
  ;Flags
  val flags = [
    Flag("pkg", ZeroOrMoreFlag, OptionalFlag,
      "The set of additional directories to look in for .pkg files during \
       this REPL session.")
    Flag("flags", ZeroOrMoreFlag, OptionalFlag,
      "The set of compile-time flags to be set before beginning this REPL session.")]
  
  ;Main action for command
  val repl-msg = "Launch the interactive Stanza REPL."
  defn launch-repl (cmd-args:CommandArgs) :
    println("Execute 'repl' command!") 

  ;Command definition
  Command("repl",
          ZeroOrMoreArg, "the .stanza/.proj input files or Stanza package names to load upon initialization of the REPL."
          flags,
          repl-msg, launch-repl)

defn run-command () :
  ;Flags
  val flags = [
    Flag("pkg", ZeroOrMoreFlag, OptionalFlag,
      "The set of additional directories to look in for .pkg files.")
    Flag("flags", ZeroOrMoreFlag, OptionalFlag,
      "The set of compile-time flags to be set before beginning execution.")]

  ;Main action for command
  val launch-msg = "Execute Stanza files directly using the Stanza virtual machine."
  defn launch-run (cmd-args:CommandArgs) :
    println("Execute 'run' command!")

  ;Command definition
  Command("run",
          AtLeastOneArg, "the .stanza/.proj input files or Stanza package names to execute in the virtual machine.",
          flags,
          launch-msg, launch-run)

defn run-test-command () :
  ;Flags
  val flags = [
    Flag("pkg", ZeroOrMoreFlag, OptionalFlag,
      "The set of additional directories to look in for .pkg files.")
    Flag("flags", ZeroOrMoreFlag, OptionalFlag,
      "The set of compile-time flags to be set before beginning execution.")
    Flag("named", AtLeastOneFlag, OptionalFlag,
      "If given, only the tests with the given names will be executed.")
    Flag("tagged", AtLeastOneFlag, OptionalFlag,
      "If given, only the tests with the given tags will be executed.")
    Flag("not-tagged", AtLeastOneFlag, OptionalFlag,
      "If given, the tests with the given tags will not be executed.")
    Flag("log", OneFlag, OptionalFlag,
      "The directory to output the test results to.")]

  ;Main action
  val run-tests-msg = "Execute Stanza test files directly using the Stanza virtual machine."
  defn run-tests (cmd-args:CommandArgs) :
    println("Execute 'run-test' command!")

  ;Command definition
  Command("run-test",
          AtLeastOneArg, "the .stanza/.proj input files or Stanza package names to execute in the testing framework in the virtual machine.",
          flags,
          run-tests-msg, run-tests)

defn analyze-dependencies-command () :
  ;All flags
  val new-flags = [
    Flag("graphviz", OneFlag, OptionalFlag,
      "If given, outputs the dependencies using the GraphViz format to the given file.")
    Flag("build-target", ZeroFlag, OptionalFlag,
      "If given, then the argument is interpreted to be the name of a build target instead of a Stanza package.")
    Flag("ignore-cache", ZeroFlag, OptionalFlag,
      "If given, then packages will always be loaded from their source files instead of their .pkg files if \
       their source files are available.")]

  ;Main action for command
  val analyze-msg = "Analyzes the package dependencies between the inputs given. \
  Computes which packages are imported by which other packages, the source files that \
  each package is defined in, and whether there exists any cyclic dependencies \
  between packages."
  defn analyze-dependencies-action (cmd-args:CommandArgs) :
    println("Execute 'verify-args' command!")
    
  ;Command definition
  Command("analyze-dependencies",
          AtLeastOneArg, "the .stanza/.proj inputs or Stanza package names to analyze.",
          to-tuple $ cat(new-flags, common-stanza-flags(["o" "platform" "pkg" "flags" "supported-vm-packages" "optimize"]))
          analyze-msg, analyze-dependencies-action)

defn auto-doc-command () :
  ;Flags
  val new-flags = [
    Flag("o", OneFlag, RequiredFlag, false)
    Flag("pkg-filter", OneFlag, OptionalFlag, false)
    Flag("fig-filter", OneFlag, OptionalFlag, false)
    Flag("toc-renamer", OneFlag, OptionalFlag, false)
    Flag("trace", ZeroFlag, OptionalFlag, false)
    Flag("platform", OneFlag, OptionalFlag, false)
    Flag("build-target", ZeroFlag, OptionalFlag,
      "If given, then the argument is interpreted to be the name of a build target instead of a Stanza package.")]
    
  ;Main action for command
  val auto-doc-msg = "Autogenerates documentation from Stanza source files."
  defn auto-doc-action (cmd-args:CommandArgs) :
    println("Execute 'doc' command!")

  ;Command definition
  Command("doc",
          AtLeastOneArg, "the .stanza/.proj input files or Stanza package names to generate documentation for."
          to-tuple $ cat(new-flags, common-stanza-flags(["pkg", "flags", "optimize"])),
          auto-doc-msg, auto-doc-action)
 
defn defs-db-command () :
  ;Flags
  val new-flags = [
    Flag("o", OneFlag, RequiredFlag,
      "The name of the output definitions file.")]

  ;Main action for command
  val defs-db-msg = "Generates the Stanza definitions database that is used \
  in conjunction with the Stanza language server."
  defn defs-db-action (cmd-args:CommandArgs) :
    println("Execute 'definitions-database' command!")

  ;Command definition
  Command("definitions-database",
          AtLeastOneArg, "the .proj files to use to generate definitions for.",
          to-tuple $ cat(new-flags, common-stanza-flags(["platform", "flags", "optimize"])),
          defs-db-msg, defs-db-action)

defn check-docs-command () :
  ;Flags
  val flags = [
    Flag("accept", AtLeastOneFlag, OptionalFlag,
      "The names of the sections to force accept as up-to-date.")]

  ;Main action
  val check-comments-msg = "Checks the documentation structure given the input \
  .doc file, and ensure that it is consistent with the source code."
  defn check-comments (cmd-args:CommandArgs) :
    println("Execute 'check-docs' command!")

  ;Command definition
  Command("check-docs",
          OneArg, "the .doc file that describes the documentation structure.",
          flags,
          check-comments-msg, check-comments)

;============================================================
;===================== Main Launcher ========================
;============================================================

defn main () :
  val commands = [
    print-version-command()
    install-command()
    compile-command()
    repl-command()
    run-command()
    run-test-command()
    build-command()
    show-path-command()
    extend-command()
    analyze-dependencies-command()
    clean-command()
    check-docs-command()
    auto-doc-command()
    defs-db-command()]
  simple-command-line-cli(ABOUT-MSG, commands, "compile", true)  

main()