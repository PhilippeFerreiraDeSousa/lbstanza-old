defpackage stz/proj-normalization :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors

public defn normalize (f:ProjFileS0, current-platform:Symbol) -> ProjFileS0 :
  ;Track errors
  val errors = Vector<ProjFileError>()

  ;----------------------------------------------------------
  ;----------------- Checking Validity ----------------------
  ;----------------------------------------------------------
  defn ensure-stanza-input (v:ProjValue) -> False :
    val stanza-input? =
      match(v) :
        (v:AtomValue) :
          match(value(v)) :
            (value:String) : any?(suffix?{value, _}, [".stanza" ".pkg" ".fpkg"])
            (value:Symbol) : true
        (v:SplicedString) :
          val n = length(values(v))
          val s = to-string(values(v)[n - 1])
          any?(suffix?{s, _}, [".stanza" ".pkg" ".fpkg"])
        (v) : false
    if not stanza-input? :
      add(errors, ProjFileError(info(v), "Expected a stanza input file here."))

  defn ensure-string (v:ProjValue) -> False :
    match(v:AtomValue) :
      if value(v) is Symbol :
        add(errors, ProjFileError(info(v), "Expected a string here."))

  defn ensure-symbol (v:ProjValue) -> False :
    val symbol? = match(v:AtomValue) : value(v) is Symbol
    if not symbol? :
      add(errors, ProjFileError(info(v), "Expected a symbol here."))

  defn ensure-packages-description (info:FileInfo|False, s:Symbol) -> False :
    val [package-name, suffix] = qualifier(s)
    if suffix != `* :
      val msg = "The specifier '%~' is an invalid name for the packages. Expected the packages name to be like this: mypackage/*." % [s]
      add(errors, ProjFileError(info, to-string(msg)))

  ;----------------------------------------------------------
  ;----------------- Retrieve Proper Value(s) ---------------
  ;----------------------------------------------------------
  defn single (name:String, v:ProjValue) -> ProjValue :
    val vs = flatten(norm(v))
    if length(vs) == 1 :
      switch(name) :
        "string" : ensure-string(vs[0])
        "symbol" : ensure-symbol(vs[0])
        "stanza input file" : ensure-stanza-input(vs[0])
      vs[0]
    else :
      add(errors, ProjFileError(info(v), to-string("Expected a single %_ here." % [name])))
      v

  defn multiple (name:String, v:ProjValue) -> ProjValues :
    val vs = flatten(norm(v))
    switch(name) :
      "string" : do(ensure-string, vs)
      "symbol" : do(ensure-symbol, vs)
      "stanza input file" : do(ensure-stanza-input, vs)
    ProjValues(info(v), vs)

  defn command (v:ProjValue) -> ProjValue :
    match(v:CommandString) :
      val strings = multiple("string", value(v))
      CommandString(info(v), strings)
    else :
      add(errors, ProjFileError(info(v), "Expected a compilation command string here."))
      v

  defn commands (v:ProjValue) -> ProjValues :
    val vs = flatten(norm(v))
    val cs = map(command, vs)
    ProjValues(info(v), cs)

  ;------------------------------------------------------------
  ;------------------- Normalize Statements -------------------
  ;------------------------------------------------------------
  defn norm (s:ProjStmt) :
    match(s) :
      (s:IncludedStmtsS0) :
        val stmts* = map(norm, stmts(s))
        IncludedStmtsS0(info(s), path(s), full-path(s), stmts*)
      (s:DefinedInStmtS0) :
        DefinedInStmtS0(info(s),
                        package(s),
                        single("string", filename(s)))
      (s:PackagesDefinedInStmtS0) :
        ensure-packages-description(info(s), packages(s))
        PackagesDefinedInStmtS0(info(s),
                                packages(s),
                                single("string", filename(s)))
      (s:SyntaxPackagesDefinedInStmtS0) :
        SyntaxPackagesDefinedInStmtS0(info(s),
                                      packages(s),
                                      single("string", filename(s)))
      (s:RequiresStmtS0) :
        RequiresStmtS0(info(s),
                       package(s),
                       maybe?(multiple{"string", _}, ccfiles(s)),
                       maybe?(multiple{"string", _}, ccflags(s)))
      (s:ImportWhenStmtS0) :
        ImportWhenStmtS0(info(s),
                         package(s),
                         multiple("symbol", dependencies(s)))
      (s:CompileStmtS0) :
        CompileStmtS0(info(s),
                      file?(s),
                      name(s),
                      single("string", name-value(s)),
                      maybe?(multiple{"string", _}, dependencies(s)),
                      commands(/commands(s)))
      (s:BuildStmtS0) :
        BuildStmtS0(info(s),
                    name(s),
                    type(s),
                    multiple("stanza input file", inputs(s)),
                    maybe?(multiple{"stanza input file", _}, supported-vm-packages(s)),
                    maybe?(single{"string", _}, pkg(s)),
                    maybe?(single{"string", _}, output(s)),
                    maybe?(single{"string", _}, assembly(s)),
                    maybe?(single{"string", _}, external-dependencies(s))
                    maybe?(multiple{"string", _}, ccfiles(s)),
                    maybe?(multiple{"string", _}, ccflags(s)),
                    maybe?(multiple{"symbol", _}, flags(s)),
                    optimize(s))
      (s:VarStmtS0) :
        s

  ;Normalize a value (evaluate all platform switches, and separate spliced strings)
  defn norm (v:ProjValue) -> ProjValue :
    match(v) :
      (v:AtomValue|ProjDir|WorkDir) :
        v
      (v:ProjValues) :
        ProjValues(info(v), map(norm,values(v)))
      (v:SplicedString) :
        separate(SplicedString(info(v), map(norm,values(v))))
      (v:CondPlatform) :
        val v* = for e in values(v) first :
          if key(e) == current-platform or key(e) == `else :
            One(norm(value(e)))
          else : None()
        value!(v*)
      (v:CommandString) :
        CommandString(info(v), norm(value(v)))

  ;----------------------------------------------------------
  ;-------------------- Launch ------------------------------
  ;----------------------------------------------------------
  ;Launch!
  val stmts* = map(norm, stmts(f))
  ;Check for errors
  throw(ProjFileErrors(errors)) when not empty?(errors)
  ;Return file
  ProjFileS0(path(f), full-path(f), stmts*)

;Remove ProjValues nested within ProjValues
defn flatten (v:ProjValue) -> Tuple<ProjValue> :
  match(v:ProjValues) :
    val accum = Vector<ProjValue>()
    let loop (v:ProjValue = v) :
      match(v:ProjValues) : do(loop, values(v))
      else : add(accum,v)
    to-tuple(accum)
  else :
    [v]

;============================================================
;=================== Value Normalization ====================
;============================================================

;Normalize the given value under the given platform.
;- Collapses all CondPlatform values into a single value.
;- Separates SplicedString values that contain ProjValues.
;- Guarantees that ProjValues do not recursively contain ProjValues.

defn normalize (v:ProjValue,
                platform:Symbol) -> ProjValue :
  v $> eval-condplatform{_, platform}
    $> separate-spliced-strings
    $> flatten-projvalues

;============================================================
;================ Evaluate CondPlatform =====================
;============================================================

;Evaluate all CondPlatform in the given ProjValue.
defn eval-condplatform (v:ProjValue, platform:Symbol) -> ProjValue :
  match(v:CondPlatform) :
    for e in values(v) first! :
      if key(e) == platform or key(e) == `else :
        One(eval-condplatform(value(e), platform))
      else :
        None()      
  else :
    val result = map(eval-condplatform{_ as ProjValue, platform}, v)
    result as ProjValue

;============================================================
;=============== Separating SplicedString ===================
;============================================================

;If a SplicedString contains a ProjValues, then treat the
;values as if they contain a separator, and hence splits up the
;overall string into multiple separate values.
;The input SplicedString assumes that values contain no CondPlatform.

defn separate-spliced-strings (v:ProjValue) -> ProjValue :
  val result = map(separate-spliced-strings{_ as ProjValue}, v)
  match(result) :
    (result:SplicedString) :
      separate-spliced-string(result)
    (result:ProjValue) :
      result  

defn separate-spliced-string (spliced-string:SplicedString) -> ProjValue :
  ;Create buffer of values and separators
  val buffer = Vector<ProjValue|Separator>()

  ;Iterate through the values and add them to the buffer with
  ;a separator between ProjValues.
  for value in values(spliced-string) do :
    let loop (value:ProjValue = value) :
      match(value:ProjValues) :
        for (v in values(value), i in 0 to false) do :
          add(buffer, Separator()) when i > 0
          loop(v)
      else :
        add(buffer, value)

  ;Identify all the continuous chains of values between the
  ;separators.
  defn continuous-chains () -> Seqable<Range> :
    generate<Range> :
      var start:Int = 0
      for (v in buffer, i in 0 to false) do :
        match(v:Separator) :
          yield(start to i)
          start = i + 1
      yield(start to length(buffer))

  ;For all the continuous chains of values that do not
  ;contain a Separator, join them into one SplicedString.
  val joined-values = to-tuple $
    for r in continuous-chains() seq :
      if length(r) == 1 :
        buffer[start(r)] as ProjValue
      else :
        val vs = for i in r seq : buffer[i] as ProjValue
        SplicedString(info(spliced-string), to-tuple(vs))

  ;Return either a single value or ProjValues.
  if length(joined-values) == 1 : joined-values[0]
  else : ProjValues(info(spliced-string), joined-values)

;Dummy object for separating chains of values.
defstruct Separator

;============================================================
;=================== Flatten ProjValues =====================
;============================================================

;Flatten every ProjValues. We guarantee after this that:
;- ProjValues never recursively contains another ProjValues.
;- ProjValues never have length 1.

defn flatten-projvalues (v:ProjValue) -> ProjValue :
  match(v:ProjValues) :
    val vs = to-tuple $
      for vi in values(v) seq-cat :
        match(flatten-projvalues(vi)) :
          (vi:ProjValues) : values(vi)
          (v) : [v]
    if length(vs) == 1 : vs[0]
    else : ProjValues(vs)
  else :
    map(flatten-projvalues{_ as ProjValue}, v) as ProjValue

;============================================================
;======================= Utilities ==========================
;============================================================

defn maybe?<?T,?S> (f:T -> ?S, x:Maybe<?T>) -> Maybe<S> :
  if empty?(x) : None()
  else : One(f(value!(x)))

defn tuple?<?T,?S> (f:T -> Tuple<?S>, x:Maybe<?T>) -> Tuple<S> :
  if empty?(x) : []
  else : f(value!(x))

defn map-values<?K,?V1,?V2> (f:V1 -> ?V2, xs:Tuple<KeyValue<?K,?V1>>) :
  for x in xs map : key(x) => f(value(x))