defpackage stz/line-wrap :
  import core
  import collections

;============================================================
;================== LineWrapStream ==========================
;============================================================

public deftype LineWrapStream <: OutputStream

;Flush the contents of the stream to the outputstream.
;This signifies the end of the word.
public defmulti flush (s:LineWrapStream) -> False

;Get a printable representation of the internal state
;of the stream for debugging.
defmulti state (s:LineWrapStream) -> Printable

;Created a wrapped stream around the given output stream,
;wrapping at the given width.
public defn LineWrapStream (out:OutputStream, width:Int) :
  ;===== Preconditions =====
  fatal("Width must be non-negative.") when width <= 0
  
  ;===== STATE =====
  ;Track which column the cursor is currently on.
  var line-counter:Int = 0
  
  ;Track whether we are currently on an explicit line.
  ;An explicit line should have its starting spaces
  ;respected. 
  var explicit-line?:True|False = true

  ;Indicates which column the current word starts at.
  var word-start:Int = 0

  ;The characters stored in the current word.
  val word-buffer = StringBuffer()

  ;===== UPDATE OPERATORS =====
  ;Output the given character to the screen.
  ;Maintain an accurate track of line-counter.
  ;It is assumed that any newlines are implicit newlines.
  defn emit-and-update-line-counter (c:Char) :
    print(out, c)
    if c == '\n' :
      line-counter = 0
      explicit-line? = false
    else :
      line-counter = line-counter + 1

  ;End the current word.
  ;If the word buffer is not empty, then display
  ;it to the screen.
  defn end-word () :
    if not empty?(word-buffer) :
      ;Place word on next line if necessary
      if word-start + length(word-buffer) > width :
        emit-and-update-line-counter('\n')
      ;Output word
      do(emit-and-update-line-counter, word-buffer)
      ;Clear the word buffer for the next word.
      clear(word-buffer)

  ;The current buffer is exactly the width of the output, and
  ;we want to add another character to it, so the buffer
  ;will not fit onto a single line.
  ;In this case, just output characters from the beginning
  ;of the buffer.
  defn* dump-partial-buffer () :
    val chars-remaining-in-line = width - line-counter
    if chars-remaining-in-line > 0 :
      ;Emit the first 'chars-remaining-in-line' characters from
      ;the buffer, followed by a newline.
      for i in 0 to chars-remaining-in-line do :
        emit-and-update-line-counter(word-buffer[i])        
      emit-and-update-line-counter('\n')
      ;Remove those characters from the buffer.
      remove-starting-chars(word-buffer, chars-remaining-in-line)
      ;The current word now starts at a new column.
      word-start = line-counter
    else :
      ;There is no space on the current line, so
      ;go to the next line and try again.
      emit-and-update-line-counter('\n')
      dump-partial-buffer()

  ;Add a character to the word buffer.
  defn add-word-char (c:Char) :
    ;If buffer is full (the current word is too long), then
    ;dump the beginning of the buffer.
    dump-partial-buffer() when length(word-buffer) == width
    ;Set word start if beginning of word
    if empty?(word-buffer) : word-start = line-counter
    ;Add to word buffer    
    add(word-buffer, c)

  ;Add a space character.
  defn add-space () :
    ;The current word is now over.
    end-word()
    ;Begin new line if necessary.
    if line-counter == width :
      emit-and-update-line-counter('\n')
    ;Should the space be dropped?
    val drop? = line-counter == 0 and not explicit-line?
    ;Emit space if it shouldn't be dropped.
    emit-and-update-line-counter(' ') when not drop?

  ;Add an explicit new line.
  defn add-explicit-newline () :
    ;The current word is now over.
    end-word()
    ;Begin new line
    emit-and-update-line-counter('\n')
    ;Indicate that this new line was explicitly requested.
    explicit-line? = true

  ;Create the wrapping stream.
  new LineWrapStream :
    defmethod print (this, c:Char) :
      switch(c) :
        ' ' : add-space()
        '\t' : add-space()
        '\n' : add-explicit-newline()
        '\b' : false ;ignore
        '\r' : false ;ignore
        else : add-word-char(c)
    defmethod flush (this) :
      end-word()
    defmethod state (this) :
      new Printable :
        defmethod print (o:OutputStream, this) :
          print(o, "line-counter = %_" % [line-counter])
          lnprint(o, "explicit-line? = %_" % [explicit-line?])
          lnprint(o, "word-start = %_" % [word-start])
          lnprint(o, "word-buffer = %~" % [word-buffer])

;============================================================
;==================== Utilities =============================
;============================================================

;Remove the first n characters from the beginning of the buffer.
defn remove-starting-chars (buf:StringBuffer, n:Int) :
  val str = to-string(buf)
  clear(buf)
  for i in n to length(str) do :
    add(buf, str[i])