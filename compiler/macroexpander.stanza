defpackage stz/macroexpander :
  import core
  import collections
  import parser/syntax-package-registry
  import stz/macro-master
  import stz/core-macros

;============================================================
;====================== API =================================
;============================================================

;Utility type that can expand macros.
public deftype Macroexpander

;Expand the given form using the given overlays.
public defmulti macroexpand (e:Macroexpander, form, overlays:List<Symbol>) -> ?

;Returns true if the macroexpander supports the given syntax package.
public defmulti syntax-package-exists? (e:Macroexpander, name:Symbol) -> True|False

;Register a macro plugin.
;If a plugin is loaded, macroexpansion will be done by going through
;the plugin.
public defmulti load-macro-plugin (e:Macroexpander, filename:String) -> False

;============================================================
;====================== Convenience =========================
;============================================================

;Create a Macroexpander with an optional plugin name.
public defn Macroexpander (plugin-name:String|False) -> Macroexpander :
  val expander = Macroexpander()
  match(plugin-name:String) :
    load-macro-plugin(expander, plugin-name)
  expander

;Default overlays is empty.
public defn macroexpand (e:Macroexpander, form) -> ? :
  macroexpand(e, form, List())

;============================================================
;======================= Implementation =====================
;============================================================

public defn Macroexpander () -> Macroexpander :

  ;Holds the macro plugin if there is one.
  var plugin: MacroPlugin|False = false

  new Macroexpander :
  
    defmethod load-macro-plugin (this, filename:String) :
      plugin = load-macro-plugin(filename)

    defmethod macroexpand (this, form, overlays:List<Symbol>) :
      ;Case: There is a macro-plugin loaded, so use
      ;the plugins expansion feature.
      match(plugin:MacroPlugin) :
        macroexpand(plugin, form, overlays)

      ;Case: There is no macro-plugin loaded, so just
      ;expand the forms using the built-in Stanza
      ;core macros.
      else :
        syntax-parse(`core, overlays, List(form), `exp, false)

    defmethod syntax-package-exists? (this, name:Symbol) :
      match(plugin:MacroPlugin) :
        syntax-package-exists?(plugin, name)
      else :
        syntax-package-exists?(name)