;<doc>=======================================================
;====================== Checks ==============================
;============================================================

TopExp:
  - name must be unique.

  DefUnion:
    - branches must be of minimum length 2.

IOSpec:
  NamedSpec:
    - name must be defined.
    - Cannot reference combinator.
  CombinatorSpec:
    - name must be defined.
    - Must reference combinator.
    - specs must be correct arity for combinator.
    - args must be unique.

SpecialExp:
  - All nested IOSpec must be wellformed.  

;============================================================
;=======================================================<doc>

defpackage stz/fastio-serializer-lang-checks :
  import core
  import collections
  import stz/fastio-serializer-lang
  import stz/fastio-errors

;============================================================
;====================== Overall Algorithm ===================
;============================================================

;Check the DefSerializer for errors.
;Throws a InvalidSerializerDefinition if there are errors
;in any of the definitions.
public defn check-errors (s:DefSerializer) :
  val buffer = ErrorBuffer(s)
  val definfos = DefInfoTable(s)
  check-for-duplicates(buffer, definfos)
  throw-if-errors?(buffer)
  check-all-iospecs(buffer, s, definfos)
  check-constructors(buffer, s)
  throw-if-errors?(buffer)

;============================================================
;====== Stage 1: Collect Information about Definitions ======
;============================================================

;Represents information we need about the definitions.
;- name: The name of the definition.
;- info: Where it was defined.
;- combinator-arity: The arity of a combinator if it is one.
;- combinator-infos: The infos about the arguments to a combinator.
defstruct DefInfo :
  name:Symbol
  info:FileInfo|False
  combinator-arity:Int|False
  arg-infos:HashTable<Symbol,List<DefInfo>>

;Represents the definition information about the defined serializers.
deftype DefInfoTable <: Collection<KeyValue<Symbol,List<DefInfo>>>

;Retrieve the DefInfo associated for the given definition (if there
;is one, or false otherwise.)
defmulti get? (t:DefInfoTable, name:Symbol) -> DefInfo|False

;Scan through the serializer and collect all the information.
defn DefInfoTable (s:DefSerializer) -> DefInfoTable :
  ;Collect all the definition infos grouped by name.
  val infos = HashTable<Symbol,List<DefInfo>>(List())

  ;Add a new info to the infos table.
  defn add-info (info:DefInfo) :
    update(infos, cons{info, _}, name(info))

  ;Helper: reverse all lists in the table.
  defn reverse-values! (table:HashTable<Symbol,List<DefInfo>>) :
    map!(reverse{value(_)}, table)

  ;Dummy empty table.
  val empty-table = HashTable<Symbol,List<DefInfo>>(List())

  ;Collect all the information.
  for e in exps(s) do :
    match(e) :
      (e:DefAtom) :
        add-info $ DefInfo(name(e), info(e), false, empty-table)
      (e:DefType) :
        add-info $ DefInfo(name(e), info(e), false, empty-table)
      (e:DefUnion) :
        add-info $ DefInfo(name(e), info(e), false, empty-table)
      (e:DefCombinator) :
        val arg-infos = HashTable<Symbol,List<DefInfo>>(List())
        for arg in args(e) do :
          val info = DefInfo(name(arg), info(arg), false, empty-table)
          update(arg-infos, cons{info, _}, name(info))
        reverse-values!(arg-infos)
        add-info $ DefInfo(name(e), info(e), length(args(e)), arg-infos)
      (e) :
        false
  reverse-values!(infos)

  ;Return the new table.  
  new DefInfoTable :
    ;Retrieve info for a given definition.
    defmethod get? (this, name:Symbol) :
      match(get?(infos, name)) :
        (infos:List<DefInfo>) : head(infos)
        (f:False) : false
        
    ;Retrieve all infos.
    defmethod to-seq (this) :
      to-seq(infos)

;============================================================
;============= Utility: Collect Errors ======================
;============================================================

;Collect FastIOErrors here.
deftype ErrorBuffer

;Register a new error.
defmulti add (b:ErrorBuffer, e:FastIOError) -> False

;Throw errors if there are errors collected.
defmulti throw-if-errors? (b:ErrorBuffer) -> False

;Construct a new ErrorBuffer for collecting all of the detected
;errors.
defn ErrorBuffer (s:DefSerializer) :
  val errors = Vector<FastIOError>()
  new ErrorBuffer :
    defmethod add (this, e:FastIOError) :
      add(errors, e)
    defmethod throw-if-errors? (this) :
      if not empty?(errors) :
        throw $ InvalidSerializerDefinition(info(s),
                                            to-tuple(errors))

;============================================================
;=========== Ensure No Duplicate Definitions ================
;============================================================

;Check for duplicate definitions and arguments.
defn check-for-duplicates (errors:ErrorBuffer,
                           infos:DefInfoTable) -> False :
  ;Scan through infos by name.
  for entry in infos do :
  
    ;Check for top-level duplicate definitions.
    val info0 = head(value(entry))
    for infoi in tail(value(entry)) do :
      add(errors, DuplicateFastIODefinition(info(infoi),
                                            name(infoi),
                                            info(info0)))
                                            
    ;Check for duplicate arguments.
    if not empty?(arg-infos(info0)) :
      for entry in arg-infos(info0) do :
        val info0 = head(value(entry))
        for infoi in tail(value(entry)) do :
          add(errors, DuplicateArgDefinition(info(infoi)
                                             name(infoi)
                                             info(info0)))
      
;============================================================
;============ Ensure IOSpec is Wellformed ===================
;============================================================

;Helper: Check the given IOSpec for any errors.
defn check-iospec (errors:ErrorBuffer,
                   spec:IOSpec,
                   info:FileInfo|False,
                   infos:DefInfoTable,
                   context:Symbol|False) -> False :
                   
  ;Retrieve the DefInfo in the given context.                 
  defn get-info (name:Symbol) -> DefInfo|False :
    match(context:Symbol) :
      val context-info = get?(infos, context) as DefInfo
      match(get?(arg-infos(context-info), name)) :
        (infos:List<DefInfo>) : head(infos)
        (f:False) : get?(infos, name)
    else :
      get?(infos, name)
    
  defn scan (spec:IOSpec) :
    match(spec) :
      (spec:NamedSpec) :
        match(get-info(name(spec))) :
          (definfo:DefInfo) :
            if combinator-arity(definfo) is-not False :
              val num-args = combinator-arity(definfo) as Int
              add(errors, WrongCombinatorArguments(info, name(spec), num-args, 0))
          (f:False) :
            add(errors, CannotResolveSerializerDefinition(info, name(spec)))
      (spec:CastedSpec) :
        scan(/spec(spec))
      (spec:CombinatorSpec) :
        do(scan, specs(spec))
        match(get-info(name(spec))) :
          (definfo:DefInfo) :
            match(combinator-arity(definfo)) :
              (num-args:Int) :
                if num-args != length(specs(spec)) :
                  val num-given = length(specs(spec))
                  add(errors, WrongCombinatorArguments(info, name(spec), num-args, num-given))
              (f:False) :
                add(errors, WrongArgumentsForNonCombinator(info, name(spec)))
          (f:False) :
            add(errors, CannotResolveSerializerDefinition(info, name(spec)))
  scan(spec)

;Helper: Check all IOSpecs in the serializer.
defn check-all-iospecs (errors:ErrorBuffer,
                        s:DefSerializer,
                        infos:DefInfoTable) -> False :
  ;Scan the given top-level expression.
  defn scan (e:TopExp) :
    match(e) :
      (e:DefAtom) :
        scan-form(false, writer(e))
        scan-form(false, reader(e))
        scan-form(false, skipper(e))
      (e:DefType) :
        scan(info(e), constructor(e))
      (e:DefUnion) :
        for b in branches(e) do :
          scan(info(b), constructor(b))
      (e:DefCombinator) :
        scan-form(name(e), writer(e))
        scan-form(name(e), reader(e))
        scan-form(name(e), skipper(e))        
      (e) :
        false

  ;Scan the given specification.
  defn scan (info:FileInfo|False, ctxt:Symbol|False, spec:IOSpec) :
    check-iospec(errors, spec, info, infos, ctxt)

  ;Scan the given form within the given context.
  defn scan-form (ctxt:Symbol|False, form) :
    match(form) :
      (form:Token) :
        scan-form(ctxt, item(form))
      (form:List) :
        do(scan-form{ctxt, _}, form)
      (form:WriteSpec|ReadSpec|SizeSpec|SkipSpec) :
        scan(info(form), ctxt, spec(form))
      (form) :
        false
      
  ;Scan the given constructor.
  ;Passes false as the context since constructors never
  ;appear in DefCombinator definitions.
  defn scan (info:FileInfo|False, c:Constructor) :
    match(c) :
      (c:EnumConstructor) :
        false
      (c:StructConstructor) :
        for f in args(c) do :
          scan(info, false, spec(f))
      (c:IOSpec) :
        scan(info, false, c)

  ;Scan all top-level expressions.
  for p in entry-points(s) do :
    scan(info(s), false, NamedSpec(p))
  do(scan, exps(s))

;============================================================
;================== Check Constructors ======================
;============================================================

defn check-constructors (errors:ErrorBuffer,
                         s:DefSerializer) -> False :  
  ;Scan the usage of the given constructor and ensure
  ;it is proper.
  defn scan (info:FileInfo|False, type, c:Constructor) -> False :
    match(c) :
      (c:EnumConstructor) :
        if not single-symbol-type?(type) :
          add(errors, InvalidEnumConstructor(info, type))
      (c:StructConstructor) :
        if not single-symbol-type?(type) :
          add(errors, InvalidStructConstructor(info, type))        
      (c) : false

  ;Returns true if the given type form is a single Symbol.
  defn single-symbol-type? (type) -> True|False :
    unwrap-token(type) is Symbol

  ;Scan the given top level expression, and ensure
  ;it is proper.
  defn scan (e:TopExp) -> False :
    match(e) :
      (e:DefType) :
        scan(info(e), type(e), constructor(e))
      (e:DefUnion) :
        for b in branches(e) do :
          scan(info(b), type(b), constructor(b))
        val num-branches = length(branches(e))
        if num-branches < 2 :
          add(errors, InvalidUnionBranches(info(e), num-branches))
      (e) :
        false

  ;Scan all the top-level expressions.
  do(scan, exps(s))