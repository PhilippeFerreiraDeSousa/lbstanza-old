defpackage stz/timing-log-api :
  import core
  import collections
  import stz/timing-log-env
  import stz/timing-log

;============================================================
;==================== Global Environment ====================
;============================================================

;Holds the global timing log environment.
var ENV:TimingLogEnv = SimpleTimingLogEnv()

;Configure the system by setting a different environment
;implementation.
public defn set-timing-log-env (env:TimingLogEnv) -> False :
  ENV = env

;Retrieve the current timing log environment.
public defn current-timing-log-env () -> TimingLogEnv :
  ENV

;============================================================
;============== Datastructure Representation ================
;============================================================

public defstruct TimerLabel :
  name:String
  parent:TimerLabel|False
  id:Int|False with:
    init => false
    setter => set-id
with:
  constructor => #TimerLabel

;Create a timer label whose name is computed by appending the
;given suffix to its parent timer.
public defn TimerLabel (parent:TimerLabel, suffix:Suffix) -> TimerLabel :
  val name = string-join([name(parent) ": " string(suffix)])
  TimerLabel(name, parent)

;============================================================
;=================== Label Registry =========================
;============================================================

;Store all created timer labels here.
val TIMER-LABELS = Vector<TimerLabel>()

;Create a new TimerLabel.
;The label is stored in the registry so that we can initialize
;them with ids later.
public defn TimerLabel (name:String, parent:TimerLabel|False) -> TimerLabel :
  val lbl = #TimerLabel(name, parent)
  if active-log?(ENV) :
    val parent-id = match(parent:TimerLabel) : id(parent) as Int
    set-id(lbl, id(ENV, name, parent-id))
  add(TIMER-LABELS, lbl)
  lbl

;Create a new TimerLabel with no parent.
public defn TimerLabel (name:String) -> TimerLabel :
  TimerLabel(name, false)

;============================================================
;===================== Timer IDs ============================
;============================================================

;Create an ID using the currently active timing log and assign
;it to all the timing labels.
defn initialize-all-labels () -> False :
  for lbl in TIMER-LABELS do :
    val parent-id = match(parent(lbl)) :
      (p:TimerLabel) : id(p) as Int
      (f:False) : false
    set-id(lbl, id(ENV, name(lbl), parent-id))

;Uninitialize all the labels.
defn uninitialize-all-labels () -> False :
  for lbl in TIMER-LABELS do :
    set-id(lbl, false)

;============================================================
;======================= Global Log =========================
;============================================================

;Create a new timing log with the given filename and execute
;the body.
public defn create-timing-log<?T> (body:() -> ?T, filename:String) -> T :
  create-timing-log(filename)
  try : body()
  finally : close-timing-log()

;Create a new timing log.
;It is the user's responsibility to close the timing log
;when finished.
public defn create-timing-log (filename:String) -> False :
  if active-log?(ENV) :
    fatal("A timing log is already created.")
  create-log(ENV, filename)
  initialize-all-labels()

;Close the active timing log.
;It is the user's responsibility to ensure a timing
;log is active.
public defn close-timing-log () -> False :
  if not active-log?(ENV) :
    fatal("No timing log exists.")
  close-log(ENV)
  uninitialize-all-labels()

;Return true if there is an active timing log.
public defn active-timing-log? () -> True|False :
  active-log?(ENV)

;Log the given label if there is an active timing log.
public defn log (timer:TimerLabel, type:EventType) -> False :
  if active-log?(ENV) :
    log(ENV, id(timer) as Int, type)

;Shorthands for logging specific types of events.
public defn start (timer:TimerLabel) : log(timer, StartEvent)
public defn stop (timer:TimerLabel) : log(timer, StopEvent)
public defn log-event (timer:TimerLabel) : log(timer, LogEvent)

;Log time taken to execute the current body.
public defn log-time<?T> (body:() -> ?T, timer:TimerLabel) -> T :
  if active-log?(ENV) :
    dynamic-wind(
      fn () : log(ENV, id(timer) as Int, StartEvent)
      body
      fn () : log(ENV, id(timer) as Int, StopEvent))
  else :
    body()

;Log time taken to execute a new task with the given name.
public defn log-time<?T> (body:() -> ?T, name:String) -> T :
  log-time(body, false, name)

;Log time taken to execute some child task. The child task is part
;of the given parent.
public defn log-time<?T> (body:() -> ?T, parent:TimerLabel, suffix:Suffix) -> T :
  log-time(body, parent, string-join([name(parent) " -- " string(suffix)]))

;Marker object for making API look nice.
public defstruct Suffix :
  string
with:
  constructor => suffix

;Log time taken to execute some child task. The child task is part
;of the given parent.
public defn log-time<?T> (body:() -> ?T, parent:TimerLabel|False, child:String) -> T :
  if active-log?(ENV) :
    val parent-id = match(parent:TimerLabel) :
                      id(parent) as Int
    val child-id = id(ENV, child, parent-id)
    dynamic-wind(
      fn () : log(ENV, child-id, StartEvent)
      body
      fn () : log(ENV, child-id, StopEvent))
  else :
    body()

;Exclude the body from the time it takes to execute the given task.
public defn exclude-log-time<?T> (body:() -> ?T, timer:TimerLabel) -> T :
  if active-log?(ENV) :
    dynamic-wind(
      fn () : log(ENV, id(timer) as Int, StopEvent)
      body
      fn () : log(ENV, id(timer) as Int, StartEvent))
  else :
    body()