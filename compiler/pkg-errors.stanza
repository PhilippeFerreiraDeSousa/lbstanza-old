defpackage stz/pkg-errors :
  import core
  import collections
  
;All errors relating to .pkg files.
public deftype PkgException <: Exception

;An error when attempting to read a package with a given filename.
public defstruct PackageReadException <: PkgException :
  filename: String
defmethod print (o:OutputStream, e:PackageReadException) :
  print(o, "An error occurred when reading package from %_." % [filename(e)])

;An error when attempting to write a package with a given filename.
public defstruct PackageWriteException <: PkgException :
  filename: String
defmethod print (o:OutputStream, e:PackageWriteException) :
  print(o, "An error occurred when writing package to %_." % [filename(e)])

;An error when no package with the given name is found.
public defstruct NoPackageException <: PkgException :
  name: Symbol
defmethod print (o:OutputStream, e:NoPackageException) :
  print(o, "Could not locate package %_." % [name(e)])

;An error when the loaded package does not have the name that we
;expect, based upon the filename.
public defstruct WrongPackageNameException <: PkgException :
  filename:String
  expected-name:Symbol
  actual-name:Symbol
defmethod print (o:OutputStream, e:WrongPackageNameException) :
  print(o, "The package loaded from %~ was expected to have name %~ but actually has name %~." % [
    filename(e), expected-name(e), actual-name(e)])

;An error when the loaded package does not have the optimization level
;that we expect.
public defstruct WrongPackageOptimization <: PkgException :
  package-name: Symbol
  filename: String
  pkg-optimized?: True|False
  expected-optimized?: True|False
defmethod print (o:OutputStream, e:WrongPackageOptimization) :
  defn opt-str (o:True|False) : "optimized" when o else "unoptimized"
  print(o, "The %~ package, loaded from %~, is an %_ pkg file but it was expected to be %_." % [
    package-name(e), filename(e), opt-str(pkg-optimized?(e)), opt-str(expected-optimized?(e))])

;An error when the .pkg file was created by a different version of Stanza.
;- filename: Only false during initial creation. Filled in with actual name when
;  exception is caught.
public defstruct WrongPkgVersion <: Exception :
  filename: String|False with: (updater => sub-filename)
  version: Tuple<Int>
  current-version: Tuple<Int>

defmethod print (o:OutputStream, e:WrongPkgVersion) :
  val version-str = string-join(version(e), ".")
  val current-version-str = string-join(current-version(e), ".")
  print(o, "Pkg file %~ is out-of-date. It was generated by Stanza %_ \
            but the currently-running Stanza is on version %_." % [
            filename(e), version-str, current-version-str])