defpackage stz/fastio-runtime :
  import core
  import collections
  import stz/fastio-buffer

;============================================================
;==================== Serializer API ========================
;============================================================

;Parent type of all FastIO serializers.
public deftype FastIOSerializer

;Turn on printing messages for debugging.
public defmulti enable-debug-trace (s:FastIOSerializer) -> False

;============================================================
;===================== FastObjectIO =========================
;============================================================

;Represents a type that knows how to read/write a given type.
public deftype FastObjectIO<T>

;Write an object of the given type to the given buffer.
public defmulti write<?T> (io:FastObjectIO<?T>, buffer:FastIOBuffer, object:T) -> False

;Read an object of the given type from the buffer.
public defmulti read<?T> (io:FastObjectIO<?T>, buffer:FastIOBuffer) -> T

;Create a new FastObjectIO type.
public defn FastObjectIO<?S,?T> (serializer:?S&FastIOSerializer,
                                 writer:(S, T, FastIOBuffer) -> False,
                                 reader:(S, FastIOBuffer) -> ?T) :
  new FastObjectIO<T> :
    defmethod write (this, buffer:FastIOBuffer, object:T) :
      writer(serializer, object, buffer)
    defmethod read (this, buffer:FastIOBuffer) :
      reader(serializer, buffer)  

;============================================================
;============= Reading and Writing to Files =================
;============================================================

;Use the given serializer to write an object to a file.
public defn write-to-file<?T,?S> (filename:String,
                                  serializer:?S&FastIOSerializer,
                                  writer:(S, T, FastIOBuffer) -> False,
                                  obj:?T) -> False :
  val stream = FileOutputStream(filename)
  try :
    val buffer = FastIOBuffer(16 * 1024, stream)
    try :
      writer(serializer, obj, buffer)
      flush(buffer)
    finally :
      free(buffer)
  finally :
    close(stream)

;Use the given serializer to read an object from a file.
public defn read-from-file<?T,?S> (filename:String,
                                   serializer:?S&FastIOSerializer,
                                   reader:(S, FastIOBuffer) -> ?T) -> T :
  val file = RandomAccessFile(filename, false)
  try :
    val buffer = read-into-buffer(file)
    try :
      reader(serializer, buffer)
    finally :
      free(buffer)
  finally :
    close(file)

;Read the entire contents of a file into a FastIOBuffer.
lostanza defn read-into-buffer (file:ref<RandomAccessFile>) -> ref<FastIOBuffer> :
  val len = length(file).value
  val buffer = FastIOBuffer(new Int{(len + 8) as int}, fn(forbid-flush))
  val num-read = call-c clib/fread(buffer.data, 1, len, file.file)
  if num-read < len :
    val err = call-c clib/ferror(file.file)
    if err : throw(FileReadException(core/platform-error-msg()))
  buffer.end = buffer.data + len
  return buffer

defn forbid-flush (b:FastIOBuffer) :
  fatal("Read-only buffer.")

;============================================================
;============== Reading and Writing to Memory ===============
;============================================================

;Write the given object to the buffer pointed to by memory.
;Layout: [OBJECT-LENGTH (4 bytes), OBJECT-DATA ...]
;
;Assumes that object is written to head of memory.
;Does not guarantee any position for memory head.

public defn write-to-memory<?T,?S> (memory:FastIOBuffer,
                                    serializer:?S&FastIOSerializer,
                                    writer:(S, T, FastIOBuffer) -> False,
                                    obj:?T) -> False :
  ;Reset the head of the buffer.
  reset(memory)
  ;Write out a placeholder for the length.
  write-int(memory, 0xCAFEBABE)
  ;Write out the object itself.
  writer(serializer, obj, memory)
  ;Retrieve the current head position
  val pos = position(memory)
  ;Compute the length of the object itself (the position
  ;minus the length field).
  val object-length = pos - 4
  ;Back-patch the object-length to the beginning of the buffer.
  reset(memory)
  write-int(memory, object-length)

;Convenience: Using FastObjectIO.
public defn write-to-memory<?T> (memory:FastIOBuffer,
                                 io:FastObjectIO<?T>,
                                 obj:T) -> False :
  ;Reset the head of the buffer.
  reset(memory)
  ;Write out a placeholder for the length.
  write-int(memory, 0xCAFEBABE)
  ;Write out the object itself.
  write(io, memory, obj)
  ;Retrieve the current head position
  val pos = position(memory)
  ;Compute the length of the object itself (the position
  ;minus the length field).
  val object-length = pos - 4
  ;Back-patch the object-length to the beginning of the buffer.
  reset(memory)
  write-int(memory, object-length)

;Read an object from the buffer pointed to by memory.
;Assumes that head of memory is ready.
public defn read-from-memory<?T,?S> (memory:FastIOBuffer,
                                     serializer:?S&FastIOSerializer,
                                     reader:(S, FastIOBuffer) -> ?T) -> T :
  ;Read the number of bytes occupied by the object.
  val object-length = read-int(memory)
  ;Forbid reader from going past object end.
  set-read-limit(memory, 4 + object-length)
  ;Deserialize the object.
  reader(serializer, memory)

;Read an object from the buffer pointed to by memory.
;Assumes that head of memory is ready.
public defn read-from-memory<?T> (memory:FastIOBuffer,
                                  io:FastObjectIO<?T>) -> T :
  ;Read the number of bytes occupied by the object.
  val object-length = read-int(memory)
  ;Forbid reader from going past object end.
  set-read-limit(memory, 4 + object-length)
  ;Deserialize the object.
  read(io, memory)

;Convenience: Call with pointer.
public lostanza defn read-from-memory<?T> (memory:ptr<?>,
                                           io:ref<FastObjectIO<?T>>) -> ref<T> :
  val buffer = new FastIOBuffer{4,
                                memory,
                                memory + 4,
                                memory,
                                fn(forbid-flush)}
  return read-from-memory(buffer, io)

;============================================================
;========== Uninitialized Strings and ByteArrays ============
;============================================================

;Return a String of the given length but with uninitialized characters.
;The characters will be filled in later.
public lostanza defn uninitialized-string (len:ref<Int>) -> ref<String> :
  val l = len.value
  val s = String(l)
  s.chars[l] = 0Y
  return s

;Return a ByteArray of the given length with uninitialized bytes.
;The bytes will be filled in later.
public lostanza defn uninitialized-byte-array (len:ref<Int>) -> ref<ByteArray> :
  return new ByteArray{len.value}