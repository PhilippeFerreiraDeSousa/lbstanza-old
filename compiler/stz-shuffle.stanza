defpackage stz/shuffle :
  import core
  import collections
  import stz/utils
  import stz/cycles

;<doc>=======================================================
;================ Register Shuffling ========================
;============================================================

# Interesting Properties about the Problem #

- All Regs have maximum one incoming arrow.
  Otherwise, it means that it needs to take on multiple
  values.

- A Reg *can* have more than one outgoing arrow.
  This means that the register should send its value
  to multiple places.

- A Reg can have a single arrow pointing to itself.
  This means that its value should stay put, and
  it is not okay to overwrite it.

- A Reg can have no incoming arrows.
  This means that there is no restriction on what
  it contains after the shuffling is completed.

- A Reg with no outgoing arrows means that
  it doesn't need to send its value anywhere.
  Therefore, it can be used as a scratch register
  in the beginning.

# Strategy #

1) First perform all Reg to Mem moves.

   These don't consume any registers, and may free up
   some registers so that they can be used as swap.

2) Now either find or create a swap register.

   If there are any Regs without outgoing arrows, then
   they are free to be a swap register.

   Otherwise, save an arbitrary register. Then use that
   register as the swap.

3) Now use the swap register to perform all
   Mem to Mem moves, just to get them out of the way.

4) Next, perform all the Reg to Reg moves.

   First handle all the cycles. These cycles are guaranteed
   not to contain the swap register.

   Next handle all the chains.

   Finally handle the swap register.

;============================================================
;=======================================================<doc>

;============================================================
;====================== API =================================
;============================================================

;Represents the location where a value is stored.
public deftype Loc

;Represents a register.
public defstruct Reg <: Loc :
  index:Int

;Represents some arbitrary memory (or non-register) location.
public defstruct Mem <: Loc

;Represents an action handled by the shuffling engine.
public deftype Ins

;Represents a move from a src to a dst location.
;The id identifies which move this is.
;If id is false, it means that it is an additional move
;generated by the shuffling engine and does not correspond
;to one of the original moves.
public defstruct Move <: Ins :
  id
  src: Loc
  dst: Loc

;Represents storing a register in a safe place because
;we don't have any appropriate swap registers and one is
;needed.
public defstruct SaveSwap <: Ins :
  reg: Reg

;Represents restoring a previously-saved register value
;into the given register. Note that the given register
;may not be the same as the register that was saved.
public defstruct RestoreSwap <: Ins :
  reg: Reg

;Represents performing one of the original Mem to Mem
;moves using the given temporary register.
public defstruct MoveUsingTmp <: Ins :
  id
  reg: Reg

;Represents the complete shuffling problem.
public defstruct ShuffleProblem :
  all-regs: Tuple<Reg>
  moves: Tuple<Move>

;============================================================
;======================== Printer ===========================
;============================================================

defmethod print (o:OutputStream, m:Move) :
  val id-str = "" when id(m) is False
          else " (%_)" % [id(m)]
  print(o, "mov %_ to %_%_" % [src(m), dst(m), id-str])

defmethod print (o:OutputStream, s:SaveSwap) :
  print(o, "save %_ to swap" % [reg(s)])

defmethod print (o:OutputStream, r:RestoreSwap) :
  print(o, "restore swap to %_" % [reg(r)])

defmethod print (o:OutputStream, m:MoveUsingTmp) :
  print(o, "mov using swap %_ (%_)" % [reg(m), id(m)])

defmethod print (o:OutputStream, r:Reg) :
  print(o, "R%_" % [index(r)])

defmethod print (o:OutputStream, m:Mem) :
  print(o, "M")

defmethod print (o:OutputStream, p:ShuffleProblem) :
  val o2 = IndentedStream(o)
  print(o, "ShuffleProblem :")
  lnprint(o2, "regs: %," % [all-regs(p)])
  do(lnprint{o2, _}, moves(p))

;============================================================
;====================== Algorithm ===========================
;============================================================

public defn shuffle (prob:ShuffleProblem) -> Vector<Ins> :
  ;Track all the movements to make.
  val accum = Vector<Ins>()

  ;Track all the outgoing reg-to-reg moves.
  ;Each entry, index => moves, means that moves is the list
  ;of all outgoing reg-to-reg moves for register 'index'.
  val outgoing-arrows-table = IntListTable<Move>()

  ;Return all the outgoing moves for the given register.
  defn outgoing-arrows (r:Reg) -> List<Move> :
    outgoing-arrows-table[index(r)]

  ;Perform all the reg-to-mem moves in the problem.
  defn perform-reg-to-mem-moves () -> False :
    for m in moves(prob) do :
      match(src(m):Reg, dst(m):Mem) :
        add(accum, m)

  ;Compute the entries of 'outgoing-arrows'.
  defn compute-arrows () -> False :
    for m in moves(prob) do :
      match(src(m):Reg, dst(m):Reg) :
        val src-index = index(src(m) as Reg)
        add(outgoing-arrows-table, src-index, m)

  ;Find an appropriate swap register.
  defn find-swap-register () -> Reg :
    ;Try to find a register with no outgoing arrows.
    val swap = find(empty?{outgoing-arrows(_)}, all-regs(prob))
    ;If there is one, then we're done
    match(swap:Reg) :
      swap
    ;If there isn't one, then we need to
    ;save an arbitrary register and use it as the
    ;swap.
    else :
      val swap = all-regs(prob)[0]
      add(accum, SaveSwap(swap))
      swap

  ;Perform all the mem-to-mem moves with the given
  ;swap register.
  defn perform-mem-to-mem-moves (swap:Reg) -> False :
    for m in moves(prob) do :
      match(src(m):Mem, dst(m):Mem) :
        add(accum, MoveUsingTmp(id(m), swap))

  ;Find all the reg cycles that need to be implemented
  ;using the swap register.
  ;Note that the swap register is needed because
  ;it needs to be saved/restored specially and doesn't
  ;contribute to any cycles.
  defn find-cycles (swap:Reg) -> Seqable<Tuple<Move>> :
    ;Use detect-cycles algorithm to find the reg-reg cycles.
    val cycles = detect-cycles(vertices, get-edges) where :
      val vertices = map(index, all-regs(prob))
      defn get-edges (v:Int) -> Seqable<Edge> :
        if v == index(swap) :
          []
        else :
          for mov in outgoing-arrows-table[v] seq :
            val src-index = index(src(mov) as Reg)
            val dst-index = index(dst(mov) as Reg)
            Edge(mov, src-index, dst-index)
    ;Return the cycles.
    to-tuple $ for cycle in cycles seq :
      map({id(_) as Move}, cycle)

  ;Perform all the reg-to-reg moves.
  ;The swap register is needed because it is handled specially.
  ;We use Restore to handle moves involving the swap register.
  defn perform-reg-to-reg-moves (swap:Reg) -> False :
    ;Track which registers have been handled.
    val handled = IntSet()
    defn mark-as-handled (r:Reg) :
      add(handled, index(r))
    defn handled? (r:Reg) -> True|False :
      handled[index(r)]

    ;Emit moves to implement cycle.
    ;Example for cycle: AB, BC, CD, DA
    ;  save A in X
    ;  mov D to A
    ;  mov C to D
    ;  mov B to C
    ;  mov X to B
    defn handle-cycle (cycle:Tuple<Move>) :
      val mov0 = cycle[0]
      add(accum, Move(false, src(mov0), swap))
      for i in reverse(1 to length(cycle)) do :
        add(accum, cycle[i])
      add(accum, Move(id(mov0), swap, dst(mov0)))
      do(mark-as-handled{src(_) as Reg}, cycle)

    ;Emit moves to implement moving the
    ;given reg to all the destinations it
    ;should go to.
    defn handle-moves-from-reg (r:Reg) :
      if index(r) != index(swap) :
        if not handled?(r) :
          for mov in outgoing-arrows(r) do :
            handle-moves-from-reg(dst(mov) as Reg)
          add-all(accum, outgoing-arrows(r))
          mark-as-handled(r)

    ;Emit moves from the swap register specifically.
    defn handle-moves-from-swap () :
      for mov in outgoing-arrows(swap) do :
        add(accum, RestoreSwap(dst(mov) as Reg))
        add(accum, Move(id(mov), dst(mov), dst(mov)))
      mark-as-handled(swap)

    ;Launch!
    do(handle-cycle, find-cycles(swap))
    do(handle-moves-from-reg, all-regs(prob))
    handle-moves-from-swap()
    false

  ;Perform all the mem-to-reg moves.
  defn perform-mem-to-reg-moves () -> False :
    for m in moves(prob) do :
      match(src(m):Mem, dst(m):Reg) :
        add(accum, m)

  ;Driver of overall algorithm.
  defn driver () :
    compute-arrows()
    perform-reg-to-mem-moves()
    val swap = find-swap-register()
    perform-mem-to-mem-moves(swap)
    perform-reg-to-reg-moves(swap)
    perform-mem-to-reg-moves()
    accum
    
  ;Launch!
  driver()

;============================================================
;===================== Scratch ==============================
;============================================================

var MOV-ID-COUNTER = to-seq(0 to false)
defn parse-shuffle (form) :
  let-var MOV-ID-COUNTER = to-seq(0 to false) :
    parse-syntax[test-shuffle / #shuffle-problem](form)

defsyntax test-shuffle :
  public defproduction shuffle-problem:ShuffleProblem
  defrule shuffle-problem = (shuffle :
                               regs: (?rs:#reg ...)
                               ?moves:#mov ...) :
    ShuffleProblem(to-tuple(rs), to-tuple(moves))
  
  defproduction mov:Move
  defrule mov = (mov ?a:#loc ?b:#loc) : Move(next(MOV-ID-COUNTER), a, b)
  
  defproduction loc:Loc
  defrule loc = (?r:#reg) : r
  defrule loc = (M) : Mem()

  defproduction reg:Reg
  defrule reg = (?x:#int) : Reg(x)

  defproduction int:Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

defn solve (form) :
  val prob = parse-shuffle(form)
  println(prob)
  val soln = shuffle(prob)
  println("Solution:")
  within indented() :
    do(println, soln)

defn test1 () :
  solve $ `(
    shuffle :
      regs: (0 1 2)
      mov 0 1
      mov 1 2
  )

defn test2 () :
  solve $ `(
    shuffle :
      regs: (0 1 2)
      mov 0 1
      mov 1 2
      mov 2 0
  )

defn test3 () :
  solve $ `(
    shuffle :
      regs: (0 1 2 3 4 5)
      mov 0 1
      mov 1 2
      mov 2 0
      mov 3 4
      mov 4 5
      mov 5 3)

defn test4 () :
  solve $ `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov 0 3
      mov 3 2
      mov 2 5
      mov 4 6
      mov 6 1
      mov 1 4)

defn test5 () :
  solve $ `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov M 0
      mov 0 3
      mov 3 2
      mov 2 5
      mov 2 M
      mov 5 M
      mov 4 6
      mov 6 1
      mov M M
      mov M M
      mov 6 M
      mov 1 4)

defn test6 () :
  solve $ `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov M 0
      mov 0 5
      mov 0 3
      mov 3 2
      mov 2 5
      mov 2 M
      mov 5 M
      mov 4 6
      mov 6 1
      mov M M
      mov M M
      mov 6 M
      mov 1 4)

defn test7 () :
  solve $ `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov 0 3
      mov 3 2
      mov 2 5
      mov 5 0
      mov 4 6
      mov 6 1
      mov 1 4)

;test7()
