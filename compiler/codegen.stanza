;See License.txt for details about licensing.

;<doc>=======================================================
;==================== Documentation =========================
;============================================================

Extend Heap Stub:
  Input:
    R0 is return address.
    R2 is size to extend by.
    RSP still points to caller's stack frame.
  Responsibilities:
    Save the current stack, with return address.
    Switch to using the system stack.
    Set the arguments.
    Call collect-garbage.
    Null the system stack pointer.
    Restore the program stack.
    Restore the stack state.
    Continue from stack.pc.

;============================================================
;=======================================================<doc>


defpackage stz/codegen :
  import core
  import collections
  import stz/asm-ir
  import stz/asm-ir-utils
  import stz/backend
  import stz/utils
  import stz/code-emitter

;============================================================
;======================= Stubs ==============================
;============================================================

public defstruct AsmStubs :
  backend: Backend
  vmstate:Int
  current-registers:Int
  system-registers:Int
  init-function:Int
  const-table:Int
  const-mem:Int
  globals:Int
  stack-pointer:Int
  stack-limit:Int
  registers:Int
  system-registers-space:Int
  heap-start:Int
  heap-top:Int
  heap-limit:Int
  heap-bitset: Int
  heap-bitset-base: Int
  heap-size:Int
  heap-size-limit:Int
  heap-max-size:Int
  heap-old-objects-end:Int
  marking-stack-start: Int
  marking-stack-bottom: Int
  marking-stack-top: Int
  stacks-list:Int
  free-stacks-list:Int
  trackers-list:Int
  current-stack:Int
  system-stack:Int
  saved-c-rsp:Int
  swap-lbl:Int
  extend-stack:Int
  collect-garbage:Int
  saved-regs:Tuple<Int>
  saved-fregs:Tuple<Int>
  class-table:Int
  global-root-table:Int
  stackmap-table:Int
  stack-trace-table:Int
  extern-table:Int
  extern-defn-table:Int
  init-extern-table:Int
  id-counter:Seq<Int>

public defn AsmStubs (backend:Backend) :
  val id-counter = to-seq(0 to false)
  val saved-regs = to-tuple $
    for i in call-regs(backend) seq :
      next(id-counter)
  val saved-fregs = to-tuple $
    for i in call-fregs(backend) seq :
      next(id-counter)
  AsmStubs(
    backend
    next(id-counter)  ;vmstate:Int
    next(id-counter)  ;current-registers:Int
    next(id-counter)  ;system-registers:Int
    next(id-counter)  ;init-function:Int
    next(id-counter)  ;const-table:Int
    next(id-counter)  ;const-mem:Int
    next(id-counter)  ;globals:Int
    next(id-counter)  ;stack-pointer:Int
    next(id-counter)  ;stack-limit:Int
    next(id-counter)  ;registers:Int
    next(id-counter)  ;system-registers-space:Int
    next(id-counter)  ;heap-start:Int
    next(id-counter)  ;heap-top:Int
    next(id-counter)  ;heap-limit:Int
    next(id-counter)  ;heap-bitset:Int
    next(id-counter)  ;heap-bitset-base: Int
    next(id-counter)  ;heap-size:Int
    next(id-counter)  ;heap-size-limit:Int
    next(id-counter)  ;heap-max-size:Int
    next(id-counter)  ;heap-old-objects-end:Int
    next(id-counter)  ;marking-stack-start: Int
    next(id-counter)  ;marking-stack-bottom: Int
    next(id-counter)  ;marking-stack-top: Int
    next(id-counter)  ;stacks-list:Int
    next(id-counter)  ;free-stacks-list:Int
    next(id-counter)  ;trackers-list:Int
    next(id-counter)  ;current-stack:Int
    next(id-counter)  ;system-stack:Int
    next(id-counter)  ;saved-c-rsp:Int
    next(id-counter)  ;swap-lbl:Int
    next(id-counter)  ;extend-stack:Int
    next(id-counter)  ;collect-garbage:Int
    saved-regs        ;saved-regs:Tuple<Int>
    saved-fregs       ;saved-fregs:Tuple<Int>
    next(id-counter)  ;class-table:Int
    next(id-counter)  ;global-root-table:Int
    next(id-counter)  ;stackmap-table:Int
    next(id-counter)  ;stack-trace-table:Int
    next(id-counter)  ;extern-table:Int
    next(id-counter)  ;extern-defn-table:Int
    next(id-counter)  ;init-extern-table:Int
    id-counter)

public defn unique-id (s:AsmStubs) :
  next(id-counter(s))

;============================================================
;=================== Assembly Stubs =========================
;============================================================

;------------------------------------------------------------
;---------- Definition of Initialization Packet -------------
;------------------------------------------------------------

;Represents the layout of the initialization packet from the C driver.
defstruct VMInitPacket :
  fields:Tuple<VMInitField>

;Represents one field in the initialization packet from the C driver.
;- name: The name of the field.
;- labelid: Used to retrieve the id of the global label to store this information.
defstruct VMInitField :
  name:Symbol
  labelid:AsmStubs -> Int

;Initialize the global initialization packet.
val VMINIT-PACKET = VMInitPacket $ [
  VMInitField(`current-stack, current-stack)
  VMInitField(`system-stack, system-stack)
  VMInitField(`heap-top, heap-top)
  VMInitField(`heap-limit, heap-limit)
  VMInitField(`heap-start, heap-start)
  VMInitField(`heap-old-objects-end, heap-old-objects-end)
  VMInitField(`heap-bitset, heap-bitset)
  VMInitField(`heap-bitset-base, heap-bitset-base)
  VMInitField(`heap-size, heap-size)
  VMInitField(`heap-size-limit, heap-size-limit)
  VMInitField(`heap-max-size, heap-max-size)
  VMInitField(`stacks-list, stacks-list)
  VMInitField(`trackers-list, trackers-list)
  VMInitField(`marking-stack-start, marking-stack-start)
  VMInitField(`marking-stack-bottom, marking-stack-bottom)
  VMInitField(`marking-stack-top, marking-stack-top)]

;Return the index of the given field.
defn index (p:VMInitPacket, field-name:Symbol) -> Int :
  index-when!({name(_) == field-name}, fields(p))

;Return the byte offset within the initialization packet where
;the field is stored.
defn offset (p:VMInitPacket, field-name:Symbol) -> Int :
  index(p, field-name) * 8

;------------------------------------------------------------
;------------------------------------------------------------
;------------------------------------------------------------

public defn compile-runtime-stubs (emitter:CodeEmitter, stubs:AsmStubs) :
  defn comment (x) : emit(emitter, Comment(to-string(x)))
  comment("Stubs:")
  comment("vmstate = %_" % [vmstate(stubs)])
  comment("const-table = %_" % [const-table(stubs)])
  comment("globals = %_" % [globals(stubs)])
  comment("stack-pointer = %_" % [stack-pointer(stubs)])
  comment("stack-limit = %_" % [stack-limit(stubs)])
  comment("registers = %_" % [registers(stubs)])
  comment("system-registers-space = %_" % [system-registers-space(stubs)])
  comment("heap-start = %_" % [heap-start(stubs)])
  comment("heap-top = %_" % [heap-top(stubs)])
  comment("heap-limit = %_" % [heap-limit(stubs)])
  comment("heap-bitset = %_" % [heap-bitset(stubs)])
  comment("heap-bitset-base = %_" % [heap-bitset-base(stubs)])
  comment("heap-size = %_" % [heap-size(stubs)])
  comment("heap-size-limit = %_" % [heap-size-limit(stubs)])
  comment("heap-max-size = %_" % [heap-max-size(stubs)])
  comment("heap-old-objects-end = %_" % [heap-old-objects-end(stubs)])
  comment("marking-stack-start = %_" % [marking-stack-start(stubs)])
  comment("marking-stack-bottom = %_" % [marking-stack-bottom(stubs)])
  comment("marking-stack-top = %_" % [marking-stack-top(stubs)])
  comment("stacks-list = %_" % [stacks-list(stubs)])
  comment("trackers-list = %_" % [trackers-list(stubs)])
  comment("current-stack = %_" % [current-stack(stubs)])
  comment("saved-c-rsp = %_" % [saved-c-rsp(stubs)])
  comment("swap-lbl = %_" % [swap-lbl(stubs)])
  comment("extend-stack = %_" % [extend-stack(stubs)])
  comment("collect-garbage = %_" % [collect-garbage(stubs)])
  comment("global-root-table = %_" % [global-root-table(stubs)])
  comment("stackmap-table = %_" % [stackmap-table(stubs)])
  comment("extern-table = %_" % [extern-table(stubs)])
  comment("init-extern-table = %_" % [init-extern-table(stubs)])
  compile-entry-function(emitter, stubs)

public defn compile-entry-function (emitter:CodeEmitter, stubs:AsmStubs) :
  val backend = backend(stubs)
  val aregs = callc-regs(backend)
  val A0 = R(aregs[0])
  val TMP = R(aregs[1])
  defn E (i:Ins) : emit(emitter, i)

  ;Save the C context
  ;Save the VMInit packet to the machine state
  ;Set the new stack
  ;Run the initialization function
  ;Restore the C context

  ;Emit labels for holding the register state
  defn make-long-storage (n:Int) :
    E $ Label(n)
    E $ DefLong(0L)
  E $ DefData()
  make-long-storage(saved-c-rsp(stubs))
  do(make-long-storage, saved-regs(stubs))
  do(make-long-storage, saved-fregs(stubs))
  E $ DefText()

  ;Temporary storage locations
  E $ DefData()
  make-long-storage(swap-lbl(stubs))
  make-long-storage(stack-limit(stubs))
  make-long-storage(stack-pointer(stubs))
  E $ DefText()

  ;Emit labels for holding the VM state
  let :
    defn #long () : E $ DefLong(0L)
    defn #int () : E $ DefInt(0)
    defn #L (f:AsmStubs -> Int) : E $ Label(f(stubs))
    defn #label (f:AsmStubs -> Int) : E $ DefLabel(f(stubs))
    defn #space (sz:Int) : E $ DefSpace(sz)

    E $ DefData()
    #L(vmstate)                #long()                        ;global-offsets: ptr<long>
                               #label(globals)                ;global-mem: ptr<byte>
                               #label(const-table)            ;const-table: ptr<long>
                               #label(const-mem)              ;const-mem: ptr<byte>
                               #long()                        ;data-offsets: ptr<int>
                               #long()                        ;data-mem: ptr<byte>
                               #long()                        ;code-offsets: ptr<int>
    #L(current-registers)      #label(registers)              ;registers: ptr<long>
    #L(system-registers)       #label(system-registers-space) ;system-registers: ptr<long>
    #L(current-stack)          #long()                        ;heap.current-stack: long
    #L(system-stack)           #long()                        ;heap.system-stack: long
    #L(heap-top)               #long()                        ;heap.top: ptr<long>
    #L(heap-limit)             #long()                        ;heap.limit: ptr<long>
    #L(heap-start)             #long()                        ;heap.start: ptr<long>
    #L(heap-old-objects-end)   #long()                        ;heap.old-objects-end: ptr<long>
    #L(heap-bitset)            #long()                        ;heap.bitset: ptr<long>
    #L(heap-bitset-base)       #long()                        ;heap.bitset-base: ptr<long>
    #L(heap-size)              #long()                        ;heap.size: long
    #L(heap-size-limit)        #long()                        ;heap.size-limit: long
    #L(heap-max-size)          #long()                        ;heap.max-size: long
    #L(stacks-list)            #long()                        ;heap.stacks: ptr<Stack>
    #L(free-stacks-list)       #long()                        ;heap.free-stacks: ptr<long>
    #L(trackers-list)          #long()                        ;heap.liveness-trackers: ptr<LivenessTracker>
    #L(marking-stack-start)    #long()                        ;heap.stack-start: ptr<long>
    #L(marking-stack-bottom)   #long()                        ;heap.stack-bottom: ptr<long>
    #L(marking-stack-top)      #long()                        ;heap.stack-top: ptr<long>
                               #long()                        ;heap.compaction-start: ptr<long>
                               #long()                        ;heap.min-incomplete: ptr<?>
                               #long()                        ;heap.max-incomplete: ptr<?>
                               #long()                        ;heap.iterate-roots:ptr<((ptr<((ptr<long>, ptr<Heap>) -> ref<False>)>, ptr<Heap>) -> ref<False>)>
                               #long()                        ;heap.iterate-references-in-stack-frames:ptr<((ptr<Stack>, ptr<((ptr<long>, ptr<Heap>) -> ref<False>)>, ptr<Heap>) -> ref<False>)>
                               #label(class-table)            ;class-table:ptr<?>
                               #label(global-root-table)      ;global-root-table:ptr<GlobalRoots>
                               #label(stackmap-table)         ;stackmap-table:ptr<?>
                               #label(stack-trace-table)      ;stack-trace-table: ptr<?>
                               #label(extern-table)           ;extern-table: ptr<?>
                               #label(extern-defn-table)      ;extern-defn-table: ptr<?>
    #L(registers)              #space(8 * 256)                ;space for registers
    #L(system-registers-space) #space(8 * 256)                ;space for system registers
    E $ DefText()

  ;Start of entry function
  E $ ExLabel(`stanza_entry)

  ;Save the C Context
  let :
    ;Compute all caller-preserved registers.
    val all-preserved-regs = cat(seq(R,c-preserved-regs(backend))
                                 seq(F,c-preserved-fregs(backend)))
    ;Save the current C stack pointer to a special global label.
    E $ StoreL(M(saved-c-rsp(stubs)), RSP)
    ;Save the caller-preserved registers to the current C stack frame.
    for (reg in all-preserved-regs, i in 0 to false) do :
      ;Compute relative offset from RSP to store the registers.
      val offset = -8 - (8 * i)
      ;Store it relative to RSP.
      E $ StoreL(RSP, reg, offset)

  ;Save the entry packet to the machine state
  for field in fields(VMINIT-PACKET) do :
    E $ LoadL(TMP, A0, offset(VMINIT-PACKET, name(field)))
    E $ StoreL(M(labelid(field)(stubs)), TMP)

  ;Load the stack pointer
  val frames-offset = 8 + 8 - 1
  E $ LoadL(TMP, A0, offset(VMINIT-PACKET,`current-stack))
  E $ LoadL(RSP, TMP, frames-offset)

  ;Set stack limit
  val size-offset = 0 + 8 - 1
  E $ LoadL(TMP, TMP, size-offset)
  E $ AddL(TMP, TMP, RSP)
  E $ StoreL(M(stack-limit(stubs)), TMP)

  ;Initialize the extern table
  val return-from-init = unique-id(stubs)
  E $ SetL(R0, M(return-from-init))
  E $ Goto(M(init-extern-table(stubs)))
  E $ Label(return-from-init)

  ;Call the initialization function
  E $ AddL(RSP, RSP, INT(8))
  E $ Call(M(init-function(stubs)))
  E $ SubL(RSP, RSP, INT(8))

  ;Update the saved stack pointer
  E $ StoreL(M(stack-pointer(stubs)), RSP)

  ;Restore the C Context
  let :
    ;Compute all caller-preserved registers.
    val all-preserved-regs = cat(seq(R,c-preserved-regs(backend))
                                 seq(F,c-preserved-fregs(backend)))
    ;Load the C stack pointer from the special global label.
    E $ LoadL(RSP, M(saved-c-rsp(stubs)))
    ;Load each of the caller-preserved registers.
    for (reg in all-preserved-regs, i in 0 to false) do :
      ;Compute relative offset from RSP to store the registers.
      val offset = -8 - (8 * i)
      ;Load it relative from RSP.
      E $ LoadL(reg, RSP, offset)

  ;Return
  E $ Return()
