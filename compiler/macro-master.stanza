defpackage stz/macro-master :
  import core
  import collections
  import core/dynamic-library
  import stz/fastio-runtime
  import stz/plugin-interface
  import stz/sexp-serializer
  import stz/sexp-checker

;Represents a loaded macro plugin.
public deftype MacroPlugin

;Expand the given s-expressions.
public defmulti macroexpand (p:MacroPlugin, form) -> ?

;Load a macro plugin from a file.
public defn load-macro-plugin (filename:String) -> MacroPlugin :
  ;Load the macro dynamic library.
  val lib = dynamic-library-open(filename)
  
  ;Call its main function for initialization.
  call-main(lib)

  ;Create the interface for communicating with it.
  val interface = PluginInterface(SExpIO())

  ;Create the plugin
  new MacroPlugin :
    defmethod macroexpand (this, form) -> ? :
      check-valid-sexp(form)
      call-entry(interface, lib, "macroexpand", form)
  



