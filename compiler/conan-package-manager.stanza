defpackage stz/conan-package-manager :
  import collections
  import core
  import stz/external-dependencies
  import stz/foreign-package-manager
  import stz/proj-env
  import stz/proj-ir
  import stz/proj-value-types

public defn ConanPackageManager () -> ForeignPackageManager :
  new ForeignPackageManager :
    defmethod name (this) :
      `conan-manager

    ;Return the parameters that a user should specify in their .proj file.
    defmethod configuration-params (this) :
      ;Example: Suppose that user's are allowed to have the following
      ;in their .proj file:
      ;  foreign-package-params(conan) :
      ;    conan-command: "conan"  ; default
      ;    conan-install-extra-args: "--build never"  ; default
      ;    conan-dir: ".conan"  ; default
      ;    conan-config: {
      ;      "revisions-enabled": "1"
      ;    }  ; default
      ;    conan-remotes: {
      ;      "jitx-conan-remote": "http://ec2-44-226-24-141.us-west-2.compute.amazonaws.com:9300",
      ;      "conancenter": "https://center.conan.io"
      ;    }  ; default
      ;
      ;PathField fields are automatically resolved to absolute paths.
      [TableEntry(`conan-command
                  SINGLE-STRING
                  true
                  One $ "conan")
       TableEntry(`conan-install-extra-args
                  SINGLE-STRING
                  true
                  One $ "--build never")
       TableEntry(`conan-dir
                  SINGLE-PATH
                  true
                  One $ ".conan")
       TableEntry(`conan-environment
                  MultipleType $ TableType $ [
                    TableEntry(`name SINGLE-STRING false)
                    TableEntry(`value SINGLE-STRING false)]
                  true
                  One $ to-list $ [
                    ProjTable $ [
                      `name => "CONAN_LOGGING_LEVEL"
                      `value => "info"]
                    ProjTable $ [
                      `name => "CONAN_PRINT_RUN_COMMANDS"
                      `value => "1"]
                    ProjTable $ [
                      `name => "CONAN_SYSREQUIRES_MODE"
                      `value => "verify"]])
       TableEntry(`conan-config
                  MultipleType $ TableType $ [
                    TableEntry(`name SINGLE-STRING false)
                    TableEntry(`value SINGLE-STRING false)]
                  true
                  One $ to-list $ [
                    ProjTable $ [
                      `name => "general.non_interactive"
                      `value => "1"]
                    ProjTable $ [
                      `name => "general.read_only_cache"
                      `value => "1"]
                    ProjTable $ [
                      `name => "general.revisions_enabled"
                      `value => "1"]])
       TableEntry(`conan-remotes
                  MultipleType $ TableType $ [
                    TableEntry(`name SINGLE-STRING false)
                    TableEntry(`value SINGLE-STRING false)]
                  true
                  One $ to-list $ [
                    ProjTable $ [
                      `name => "jitx-conan-remote"
                      `value => "http://ec2-44-226-24-141.us-west-2.compute.amazonaws.com:9300"]
                    ProjTable $ [
                      `name => "conancenter"
                      `value => "https://center.conan.io"]])]

    defmethod system-dependencies (this, params:PackageManagerParams) :
      ;Example: Suppose that the use of Conan means that the
      ;linker should include the additional flags "@buildargs".
      ;; Note: gcc recognizes the @file symbol to mean "Read command-line options from file"
      ;; https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html
      ProjDependencies([],
                       ["@build/conanbuildinfo.args"],
                       [])

    defmethod proj-variables (this, params:PackageManagerParams, platform:Symbol) -> Tuple<KeyValue<Symbol,?>> :
      ;Example: Suppose that the Conan package manager introduces
      ;the following two environment variables that users are allowed
      ;to now use in their .proj files: CONAN-BUILD-DIR, and CONAN-INCLUDES.
      ;Note that CONAN-BUILD-DIR is dependent upon how the user
      ;chose to configure Conan.
      ;val conan-command = lookup(entries(params), `conan-command)
      ;;; TODO this needs to read some of the output of conan after satisfy-dependencies()
      [
        ;;;`CONAN-BUILD-DIR => to-string("%_/.conan/build" % [root])
        `CONAN-INCLUDES => List("@build/conanbuildinfo.args")
      ]

    defmethod satisfy-dependencies (this,
                                    packages:Tuple<String>,
                                    params:PackageManagerParams,
                                    system:System) -> True|False :
      ; Satisfy dependencies by calling 'conan install' in the project directory

      ; Set the conan home environment variable to the project directory to isolate it
      ; from any user or system-level conan settings
      val env-vars = HashTable<String,String>()
      env-vars["CONAN_USER_HOME"] = projdir(params)
      ; add the other environment vars from params
      for kv in to-kv-tuple(lookup(entries(params), `conan-environment)) do :
        env-vars[key(kv)] = value(kv)

      ; extract tuple of environment strings suitable for passing to call-system
      ;   ["FOO=bar", "ABC=123"]
      val evs = to-tuple( seq( to-string{"%_=%_" % _}, for x in env-vars seq : [key(x), value(x)] ) )

      ; set up common command args once
      var conan-pre-args = to-tuple( cat-all([["argv0"] evs [append("--chdir=" projdir(params)) lookup(entries(params), `conan-command)] ]) )

      ; call conan config set for each setting
      for kv in to-kv-tuple(lookup(entries(params), `conan-config)) do :
        call-system(system, "env", to-tuple( cat(conan-pre-args ["config" "set" to-string("%_=%_" % [key(kv) value(kv)])]) ), false, false)

      ; set up conan remotes - order dependent
      call-system(system, "env", to-tuple( cat(conan-pre-args ["remote" "clean"]) ), false, false)
      for kv in to-kv-tuple(lookup(entries(params), `conan-remotes)) do :
        call-system(system, "env", to-tuple( cat(conan-pre-args ["remote" "add" key(kv) value(kv)]) ), false, false)

      ; Add our desired conan packages to a basic conanfile.txt
      val f = FileOutputStream("conanfile.txt", false)
      println(f, "[requires]")
      for p in packages do :
        println(f, p)
      println(f, "")
      println(f, "[generators]")
      println(f, "compiler_args")
      close(f)

      ; Now call 'conan install' in the project directory
      ; TODO FIXME use call-system-with-environment instead of using env command
      call-system(system, "env", to-tuple(cat(conan-pre-args ["install" "." "--install-folder" "build" "--build" "never"])), false, false) == 0  ; return True|False

defn to-kv-tuple ( lpt:List<ProjTable> ) -> Tuple<KeyValue<String,String>> :
  val v = Vector<KeyValue<String,String>>()
  for pt in lpt do :
    add(v KeyValue( value(find!({key(_)==`name} entries(pt))) value(find!({key(_)==`value} entries(pt))) ))
  to-tuple(v)
