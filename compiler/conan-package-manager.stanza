defpackage stz/conan-package-manager :
  import core
  import collections
  import stz/proj-env
  import stz/external-dependencies
  import stz/foreign-package-manager
  import stz/proj-value-types

public defn ConanPackageManager () -> ForeignPackageManager :
  new ForeignPackageManager :
    defmethod name (this) :
      `conan-manager

    ;Return the parameters that a user should specify in their .proj file.
    defmethod configuration-params (this) :
      ;Example: Suppose that user's are allowed to have the following
      ;in their .proj file:
      ;  foreign-package-params(conan) :
      ;    conan-command: "conan"  ; default
      ;    conan-install-extra-args: "--build never"  ; default
      ;    conan-dir: ".conan"  ; default
      ;    conan-config: {
      ;      "revisions-enabled": "1"
      ;    }  ; default
      ;    conan-remotes: {
      ;      "jitx-conan-remote": "http://ec2-44-226-24-141.us-west-2.compute.amazonaws.com:9300",
      ;      "conancenter": "https://center.conan.io"
      ;    }  ; default
      ;
      ;PathField fields are automatically resolved to absolute paths.
      [TableEntry(`conan-command,
                  SINGLE-STRING,
                  "conan")
       TableEntry(`conan-install-extra-args,
                  SINGLE-STRING,
                  "--build never")
       TableEntry(`conan-dir,
                  SINGLE-PATH,
                  ".conan")
       TableEntry(`conan-environment,
                  SINGLE-STRING,
                  false)
       TableEntry(`conan-config,
                  SINGLE-STRING,
                  false)
       TableEntry(`conan-remotes,
                  SINGLE-STRING,
                  false)]

    defmethod system-dependencies (this, params:PackageManagerParams) :
      ;Example: Suppose that the use of Conan means that the
      ;linker should include the additional flags "@buildargs".
      ;; Note: gcc recognizes the @file symbol to mean "Read command-line options from file"
      ;; https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html
      ProjDependencies([],
                       ["@build/conanbuildinfo.args"],
                       [])

    defmethod proj-variables (this, params:PackageManagerParams, platform:Symbol) -> Tuple<KeyValue<Symbol,?>> :
      ;Example: Suppose that the Conan package manager introduces
      ;the following two environment variables that users are allowed
      ;to now use in their .proj files: CONAN-BUILD-DIR, and CONAN-INCLUDES.
      ;Note that CONAN-BUILD-DIR is dependent upon how the user
      ;chose to configure Conan.
      ;val conan-command = lookup(entries(params), `conan-command)
      ;;; TODO this needs to read some of the output of conan after satisfy-dependencies()
      [
        ;;;`CONAN-BUILD-DIR => to-string("%_/.conan/build" % [root])
        `CONAN-INCLUDES => List("@build/conanbuildinfo.args")
      ]

    defmethod satisfy-dependencies (this,
                                    packages:Tuple<String>,
                                    params:PackageManagerParams,
                                    system:System) -> True|False :
      ; Satisfy dependencies by calling 'conan install' in the project directory
      val conan-command = lookup(entries(params), `conan-command)

      ; list of conan remotes - order dependent
      val conan-remotes = [
        KeyValue("jitx-conan-remote" "http://ec2-44-226-24-141.us-west-2.compute.amazonaws.com:9300")
        KeyValue("conancenter" "https://center.conan.io")]

      ; Set the conan home environment variable to the project directory to isolate it
      ; from any user or system-level conan settings
      val env-vars = HashTable<String,String>()
      env-vars["CONAN_USER_HOME"] = projdir(params)

      ; Append other environment vars specified in the params
      ;;; TODO for e in conan-environment(params) do :
      ;;;   env-vars[key(e)] = value(e)
      ;;; or some list comprehension append

      ; extract array of environment strings suitable for passing to call-system
      ;   ["FOO=bar", "ABC=123"]
      val evs = to-tuple( seq( to-string{"%_=%_" % _}, for x in env-vars seq : [key(x), value(x)] ) )

      ; Configure conan settings
      ; TODO this should come from conan-config(params)
      val c-cfg = HashTable<String,String>()
      c-cfg["general.revisions_enabled"] = "1"

      ; call conan config for each setting
      ; set up common args once
      var conan-pre-args = to-tuple( cat-all([["argv0"] evs [append("--chdir=" projdir(params)) conan-command] ]) )

      for e in c-cfg do :
        call-system(system, "env", to-tuple( cat(conan-pre-args ["config" "set" to-string("%_=%_" % [key(e) value(e)])]) ))

      ; set up conan remotes
      call-system(system, "env", to-tuple( cat(conan-pre-args ["remote" "clean"]) ))
      for e in conan-remotes do :
        call-system(system, "env", to-tuple( cat(conan-pre-args ["remote" "add" key(e) value(e)]) ))

      ; Add our desired conan packages to a basic conanfile.txt
      val f = FileOutputStream("conanfile.txt", false)
      println(f, "[requires]")
      for p in packages do :
        println(f, p)
      println(f, "")
      println(f, "[generators]")
      println(f, "compiler_args")
      close(f)

      ; Now call 'conan install' in the project directory
      ; TODO FIXME use call-system-with-environment instead of using env command
      call-system(system, "env", to-tuple(cat(conan-pre-args ["install" "." "--install-folder" "build" "--build" "never"])) ) == 0  ; return True|False
