defpackage stz/conan-package-manager :
  import core
  import collections
  import stz/proj-env
  import stz/external-dependencies
  import stz/foreign-package-manager
  import stz/proj-value-types

public defn ConanPackageManager () -> ForeignPackageManager :
  new ForeignPackageManager :

    ;Return the parameters that a user should specify in their .proj file.
    defmethod configuration-params (this) :
      ;Example: Suppose that user's are allowed to have the following
      ;in their .proj file:
      ;  foreign-package-params(conan) :
      ;    project-root: "mydir/myproject"
      ;    email: "patrick@jitx.com"
      ;Suppose that email is optional.
      ;PathField fields are automatically resolved to absolute paths.
      [FieldType(`project-root,
                 false,
                 SINGLE-STRING,
                 PathField)
       FieldType(`email,
                 true,
                 SINGLE-STRING,
                 StandardField)]

    defmethod system-dependencies (this, params:PackageManagerParams) :
      ;Example: Suppose that the use of Conan means that the
      ;linker should include the additional flags "-L@buildargs".
      ProjDependencies([],
                       ["-L@buildargs"],
                       [])

    defmethod proj-variables (this, params:PackageManagerParams) -> Tuple<KeyValue<Symbol,?>> :
      ;Example: Suppose that the Conan package manager introduces
      ;the following two environment variables that users are allowed
      ;to now use in their .proj files: CONAN-BUILD-DIR, and CONAN-INCLUDES.
      ;Note that CONAN-BUILD-DIR is dependent upon how the user
      ;chose to configure Conan.
      val root = lookup(entries(params), `project-root)
      [
        `CONAN-BUILD-DIR => to-string("%_/.conan/build" % [root])
        `CONAN-INCLUDES => List("-lCONAN", "-lCONANHOME")
      ]

    defmethod satisfy-dependencies (this,
                                    packages:Tuple<String>,
                                    params:PackageManagerParams,
                                    system:System) -> True|False :
      ;Example: Suppose we satisfy dependencies by calling 'conan --init' and 'conan --update'.
      val root = lookup(entries(params), `project-root)
      call-system(system, "conan", ["conan" "--init" "--root" root])
      for package in packages do :
        call-system(system, "conan", ["conan" "update" package])