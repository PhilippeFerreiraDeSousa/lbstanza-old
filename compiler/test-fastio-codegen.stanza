defpackage stz/test-fastio-codegen :
  import core
  import collections
  import stz/fastio-codegen

;============================================================
;=================== Test Programs ==========================
;============================================================

;Test program 1
defn prog1 () :
  CodeIR(
    false
    `mycode)

;============================================================
;===================== Utilities ============================
;============================================================

;Given the generated s-expression from an CodeIR,
;wrap it up with the standard 'defpackage' preamble
;so that the code can be ran.
defn wrap-sexp-in-defpackage (form) :
  qquote(
    defpackage test-program :
      import core
      import collections
      
    ~ form)

;Given a program generator, expand it
;into code that we can run.
defn expand-into-code (prog:() -> CodeIR) :
  prog() $> to-sexp
         $> wrap-sexp-in-defpackage

;============================================================
;=================== Main Driver ============================
;============================================================

defn main () :
  val code = expand-into-code(prog1)
  spit("build/test-program.stanza", code)
  call-system("stanza", ["stanza" "run" "build/test-program.stanza"])
  
main()