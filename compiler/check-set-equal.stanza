defpackage stz/check-set-equal :
  import core
  import collections
  import stz/utils

;List the three types of set differences.
public deftype SetDifference
public defstruct UnsupportedItem <: SetDifference : (name:Symbol)
public defstruct DuplicateItem <: SetDifference : (name:Symbol)
public defstruct MissingItem <: SetDifference : (name:Symbol)

;Used to represent the expected items in the set.
public defstruct Item :
  name:Symbol
  optional?:True|False

;Utility: Scan through xs and check whether it satisfies the expected
;items given in ys. Returns a tuple of all differences.
public defn check-set-equal (xs:Tuple<Symbol>, ys:Tuple<Item>) -> Tuple<SetDifference> :
  val diffs = Vector<SetDifference>()
  val ys-set = to-hashset<Symbol>(seq(name ys))
  val xs-set = HashTable<Symbol,Int>(0)

  ;Check for unsupported or duplicate items.
  for x in xs do :
    val num-x = update(xs-set, {_ + 1}, x)
    if num-x == 1 :
      if not ys-set[x] :
        add(diffs, UnsupportedItem(x))
    else if num-x == 2 :
      add(diffs, DuplicateItem(x))

  ;Check for missing required items.
  for y in ys do :
    if not optional?(y) :
      if not key?(xs-set,name(y)) :
        add(diffs, MissingItem(name(y)))

  to-tuple(diffs)