;See License.txt for details about licensing.

;<doc>=======================================================
;==================== Documentation =========================
;============================================================

Extend Heap Stub:
  Input:
    R0 is return address.
    R2 is size to extend by.
    RSP still points to caller's stack frame.
  Responsibilities:
    Save the current stack, with return address.
    Switch to using the system stack.
    Set the arguments.
    Call collect-garbage.
    Null the system stack pointer.
    Restore the program stack.
    Restore the stack state.
    Continue from stack.pc.

;============================================================
;=======================================================<doc>


defpackage stz/codegen :
  import core
  import collections
  import stz/asm-ir
  import stz/backend
  import stz/utils
  import stz/code-emitter

;============================================================
;======================= Stubs ==============================
;============================================================

public defstruct AsmStubs :
  backend: Backend
  vmstate:Int
  current-registers:Int
  system-registers:Int  
  init-function:Int
  const-table:Int
  const-mem:Int
  globals:Int
  stack-pointer:Int
  stack-limit:Int
  registers:Int
  system-registers-space:Int
  heap:Int
  heap-top:Int
  heap-limit:Int
  free:Int
  free-limit:Int
  current-stack:Int
  system-stack:Int
  saved-c-rsp:Int
  swap-lbl:Int
  extend-stack:Int
  collect-garbage:Int
  saved-regs:Tuple<Int>
  saved-fregs:Tuple<Int>
  class-table:Int
  global-root-table:Int
  stackmap-table:Int
  info-table:Int
  extern-table:Int
  extern-defn-table:Int
  init-extern-table:Int
  id-counter:Seq<Int>

public defn AsmStubs (backend:Backend) :
  val id-counter = to-seq(0 to false)
  val saved-regs = to-tuple $
    for i in call-regs(backend) seq :
      next(id-counter)
  val saved-fregs = to-tuple $
    for i in call-fregs(backend) seq :
      next(id-counter)
  AsmStubs(
    backend
    next(id-counter)  ;vmstate:Int
    next(id-counter)  ;current-registers:Int
    next(id-counter)  ;system-registers:Int  
    next(id-counter)  ;init-function:Int
    next(id-counter)  ;const-table:Int
    next(id-counter)  ;const-mem:Int
    next(id-counter)  ;globals:Int
    next(id-counter)  ;stack-pointer:Int
    next(id-counter)  ;stack-limit:Int
    next(id-counter)  ;registers:Int  
    next(id-counter)  ;system-registers-space:Int
    next(id-counter)  ;heap:Int
    next(id-counter)  ;heap-top:Int
    next(id-counter)  ;heap-limit:Int
    next(id-counter)  ;free:Int
    next(id-counter)  ;free-limit:Int
    next(id-counter)  ;current-stack:Int
    next(id-counter)  ;system-stack:Int
    next(id-counter)  ;saved-c-rsp:Int
    next(id-counter)  ;swap-lbl:Int
    next(id-counter)  ;extend-stack:Int
    next(id-counter)  ;collect-garbage:Int
    saved-regs        ;saved-regs:Tuple<Int>
    saved-fregs       ;saved-fregs:Tuple<Int>
    next(id-counter)  ;class-table:Int
    next(id-counter)  ;global-root-table:Int
    next(id-counter)  ;stackmap-table:Int
    next(id-counter)  ;info-table:Int
    next(id-counter)  ;extern-table:Int
    next(id-counter)  ;extern-defn-table:Int
    next(id-counter)  ;init-extern-table:Int
    id-counter)

public defn unique-id (s:AsmStubs) :
  next(id-counter(s))

;============================================================
;=================== Assembly Stubs =========================
;============================================================

public defn compile-runtime-stubs (emitter:CodeEmitter, stubs:AsmStubs) :
  println("//Stubs:")
  println("//vmstate = %_" % [vmstate(stubs)])
  println("//const-table = %_" % [const-table(stubs)])
  println("//globals = %_" % [globals(stubs)])
  println("//stack-pointer = %_" % [stack-pointer(stubs)])
  println("//stack-limit = %_" % [stack-limit(stubs)])
  println("//registers = %_" % [registers(stubs)])
  println("//system-registers-space = %_" % [system-registers-space(stubs)])
  println("//heap = %_" % [heap(stubs)])
  println("//heap-top = %_" % [heap-top(stubs)])
  println("//heap-limit = %_" % [heap-limit(stubs)])
  println("//free = %_" % [free(stubs)])
  println("//free-limit = %_" % [free-limit(stubs)])
  println("//current-stack = %_" % [current-stack(stubs)])
  println("//saved-c-rsp = %_" % [saved-c-rsp(stubs)])
  println("//swap-lbl = %_" % [swap-lbl(stubs)])
  println("//extend-stack = %_" % [extend-stack(stubs)])
  println("//collect-garbage = %_" % [collect-garbage(stubs)])
  println("//global-root-table = %_" % [global-root-table(stubs)])
  println("//stackmap-table = %_" % [stackmap-table(stubs)])
  println("//extern-table = %_" % [extern-table(stubs)])
  println("//init-extern-table = %_" % [init-extern-table(stubs)])

  compile-entry-function(emitter, stubs)

public defn compile-entry-function (emitter:CodeEmitter, stubs:AsmStubs) :
  val backend = backend(stubs)
  val aregs = callc-regs(backend)
  val A0 = R(aregs[0])
  val TMP = R(aregs[1])
  defn E (i:Ins) : emit(emitter, i)

  ;Save the C context
  ;Save the VMInit packet to the machine state
  ;Set the new stack
  ;Run the initialization function
  ;Restore the C context
  
  ;Emit labels for holding the register state
  defn make-long-storage (n:Int) :
    E $ Label(n)
    E $ DefLong(0L)
  E $ DefData()
  make-long-storage(saved-c-rsp(stubs))
  do(make-long-storage, saved-regs(stubs))
  do(make-long-storage, saved-fregs(stubs))
  E $ DefText()

  ;Temporary storage locations
  E $ DefData()
  make-long-storage(swap-lbl(stubs))
  make-long-storage(stack-limit(stubs))
  make-long-storage(stack-pointer(stubs))
  E $ DefText()

  ;Emit labels for holding the VM state
  let :
    defn #long () : E $ DefLong(0L)
    defn #int () : E $ DefInt(0)
    defn #L (f:AsmStubs -> Int) : E $ Label(f(stubs))
    defn #label (f:AsmStubs -> Int) : E $ DefLabel(f(stubs))
    defn #space (sz:Int) : E $ DefSpace(sz)

    E $ DefData()
    #L(vmstate)                #long()                        ;instructions: ptr<byte>
    #L(current-registers)      #label(registers)              ;registers: ptr<long>
                               #long()                        ;global-offsets: ptr<long>
                               #label(globals)                ;global-mem: ptr<byte>
                               #label(const-table)            ;const-table: ptr<long>
                               #label(const-mem)              ;const-mem: ptr<byte>
                               #long()                        ;data-offsets: ptr<int>
                               #long()                        ;data-mem: ptr<byte>
                               #long()                        ;code-offsets: ptr<int>
    #L(heap)                   #long()                        ;heap: ptr<long>      
    #L(heap-top)               #long()                        ;heap-top: ptr<long>  
    #L(heap-limit)             #long()                        ;heap-limit: ptr<long>
    #L(free)                   #long()                        ;free: ptr<long>      
    #L(free-limit)             #long()                        ;free-limit: ptr<long>
    #L(current-stack)          #long()                        ;current-stack: long
    #L(system-stack)           #long()                        ;system-stack: long
    #L(system-registers)       #label(system-registers-space) ;system-registers: ptr<long>
                               #label(class-table)            ;class-table:ptr<?>
                               #label(global-root-table)      ;global-root-table:ptr<GlobalRoots>
                               #label(stackmap-table)         ;stackmap-table:ptr<?>
                               #label(info-table)             ;info-table: ptr<?>
                               #label(extern-table)           ;extern-table: ptr<?>
                               #label(extern-defn-table)      ;extern-defn-table: ptr<?>
    #L(registers)              #space(8 * 256)                ;space for registers
    #L(system-registers-space) #space(8 * 256)                ;space for system registers
    E $ DefText()

  ;Start of entry function
  E $ ExLabel(`stanza_entry)

  ;Save the C Context
  E $ StoreL(M(saved-c-rsp(stubs)), RSP)
  for (reg in c-preserved-regs(backend), i in 0 to false) do :
    val o = -8 - (8 * i)
    E $ StoreL(RSP, R(reg), o)

  ;Save the entry packet to the machine state
  let :
    defn save (i:Int, n:AsmStubs -> Int) :
      E $ LoadL(TMP, A0, i * 8)
      E $ StoreL(M(n(stubs)), TMP)
    save(0, heap)
    save(1, heap-top)
    save(2, heap-limit)
    save(3, free)
    save(4, free-limit)
    save(5, current-stack)
    save(6, system-stack)

  ;Load the stack pointer
  val frames-offset = 8 + 8 - 1
  E $ LoadL(TMP, A0, 5 * 8)
  E $ LoadL(RSP, TMP, frames-offset)

  ;Set stack limit
  val size-offset = 0 + 8 - 1
  E $ LoadL(TMP, TMP, size-offset)
  E $ AddL(TMP, TMP, RSP)
  E $ StoreL(M(stack-limit(stubs)), TMP)

  ;Initialize the extern table
  val return-from-init = unique-id(stubs)
  E $ SetL(R0, M(return-from-init))
  E $ Goto(M(init-extern-table(stubs)))
  E $ Label(return-from-init)

  ;Call the initialization function
  E $ AddL(RSP, RSP, INT(8))
  E $ Call(M(init-function(stubs)))
  E $ SubL(RSP, RSP, INT(8))

  ;Update the saved stack pointer
  E $ StoreL(M(stack-pointer(stubs)), RSP)

  ;Restore the C Context
  E $ LoadL(RSP, M(saved-c-rsp(stubs)))
  for (reg in c-preserved-regs(backend), i in 0 to false) do :
    val o = -8 - (8 * i)
    E $ LoadL(R(reg), RSP, o)

  ;Return
  E $ Return()

;============================================================
;==================== Assembly Shorthands ===================
;============================================================

;==============================
;==== Assembly Equivalents ====
;==============================
public defn R (n:Int) : Reg(n)
public defn F (n:Int) : FReg(n)
public defn M (n:Int) : Mem(n,0)
public defn LM (n:Int) : LocalMem(n)
public defn INT (v:Byte|Int|Long) : IntImm(v)
public val BT = ByteT()
public val IT = IntT()
public val LT = LongT()
public val FT = FloatT()
public val DT = DoubleT()

public val R0 = R(0)
public val R1 = R(1)
public val R2 = R(2)
public val R3 = R(3)
public val R4 = R(4)
public val R5 = R(5)
public val R6 = R(6)
public val F0 = F(0)
public val F1 = F(1)
public val RSP = RegSP()

public defn SetL (x:Loc, y:Imm) : SetIns(LT, x, y)
public defn SetD (x:Loc, y:Imm) : SetIns(DT, x, y)
public defn StoreL (x:Imm, y:Imm) : Store(LT, x, y, 0)
public defn StoreD (x:Imm, y:Imm) : Store(DT, x, y, 0)
public defn LoadL (x:Loc, y:Imm) : Load(LT, x, y, 0)
public defn LoadD (x:Loc, y:Imm) : Load(DT, x, y, 0)
public defn StoreL (x:Imm, y:Imm, o:Int) : Store(LT, x, y, o)
public defn StoreD (x:Imm, y:Imm, o:Int) : Store(DT, x, y, o)
public defn LoadL (x:Loc, y:Imm, o:Int) : Load(LT, x, y, o)
public defn AddL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, AddOp(), y, z)
public defn SubL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, SubOp(), y, z)
public defn AndL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, AndOp(), y, z)
public defn ShlL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, ShlOp(), y, z)
public defn BreakL (x:Imm, op:Op, y:Imm, z:Imm) : Break(LT, x, op, y, z)