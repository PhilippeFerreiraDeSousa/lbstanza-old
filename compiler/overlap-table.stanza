defpackage stz/overlap-table :
  import core
  import collections

;A simple table to count the number of pairwise overlaps between items.
;Contains a simple optimization for items that are equivalent, and have the
;complete set of pairwise overlaps.
public deftype OverlapTable

;Add a group for the given coordinate axis.
public defmulti add-group (t:OverlapTable, coord:Int, group:List<Int>) -> False

;Add a pairwise relation for the given coordinate axis.
public defmulti add-pairwise (t:OverlapTable, coord:Int, x:Int, y:Int) -> False

;Compute all pairwise overlaps in the table.
public defmulti all-overlaps (return:(Int,Int) -> ?, t:OverlapTable) -> False

;Create the overlap table.
public defn OverlapTable (n:Int, num-coords:Int) -> OverlapTable :

  ;Create the layers for each coordinate.
  val layers = Array<CoordLayer>(num-coords)
  for i in 0 to num-coords do :
    layers[i] = CoordLayer(Vector<List<Int>>(),
                           Array<Int|False>(n,false),
                           HashSet<[Int,Int]>())

  ;Create the key for the pairwise table.
  defn pairwise-key (x:Int, y:Int) -> [Int, Int] :
    [x, y] when x < y else [y, x]

  ;Optimized function for computing lists of partitioned groups.
  ;Within a partition, the whole cross-product of overlaps exist.
  ;[TODO] Currently algorithm is not used.
  defn partitioned-groups () -> Seqable<List<Int>> :

    ;Partition a single group using the given layer of disjoint groups.
    defn partition (group:List<Int>, layer:CoordLayer) -> Seqable<List<Int>> :
      val partitions = Array<List<Int>>(length(groups(layer)), List())
      for v in group do :
        val i = markers(layer)[v]
        match(i:Int) :
          partitions[i] = cons(v, partitions[i])
      filter({not empty?(_)}, partitions)

    ;Partition a set of groups using the given layer of disjoint groups.
    defn partition (groups:Seqable<List<Int>>, layer:CoordLayer) -> Seqable<List<Int>> :
      for group in groups seq-cat :
        partition(group, layer)

    ;Return the list of all partitioned groups.
    var ret:Seqable<List<Int>> = groups(layers[0])
    for i in 1 to num-coords do :
      ret = partition(ret, layers[i])
    ret

  ;Retrieve the number of overlaps between x and y on
  ;the given axis.
  defn num-pairwise-overlaps (coord:Int, x:Int, y:Int) -> Int :
    val layer = layers[coord]

    ;Helper: Retrieve exemplar of value i.
    defn exemplar (i:Int) -> Int :
      match(markers(layer)[i]) :
        (g:Int) : head(groups(layer)[g])
        (f:False) : i

    ;Retrieve the exemplars of x and y.
    val ex = exemplar(x)
    val ey = exemplar(y)

    ;Return the count
    if ex == ey : 1
    else if pairwise(layer)[pairwise-key(ex,ey)] : 1
    else : 0

  ;Retrieve the number of overlaps between x and y
  ;along all axes.
  defn num-pairwise-overlaps (x:Int, y:Int) -> Int :
    sum $ for coord in 0 to num-coords seq :
      num-pairwise-overlaps(coord, x, y)

  ;Return all pairs of the given integers.
  defn all-pairs (return:(Int,Int) -> ?
                  xs:List<Int>) -> False :
    let loop (xs:List<Int> = xs) :
      if not empty?(xs) :
        val x = head(xs)
        for y in tail(xs) do :
          return(x, y)
        loop(tail(xs))

  ;Return all pairs of the given integers.
  defn all-pairs (return:(Int,Int) -> ?,
                  xs:List<Int>,
                  ys:List<Int>) -> False :
    for x in xs do :
      for y in ys do :
        return(x,y)

  ;Expand x into the group it represents.
  defn expand (x:Int, layer:CoordLayer) -> List<Int> :
    match(markers(layer)[x]) :
      (m:Int) : groups(layer)[m]
      (f:False) : List(x)

  ;Return all the pairwise overlaps. 
  defn all-overlaps (return:(Int,Int) -> ?) -> False :
    ;Find the layer with the smallest groups.
    defn max-group-size (layer:CoordLayer) -> Int :
      maximum(0, seq(length, groups(layer)))

    ;Smallest layer.
    val layer = minimum(max-group-size, layers)

    ;Test all explicit pairwise relations.
    for [x,y] in pairwise(layer) do :
      if num-pairwise-overlaps(x,y) == num-coords :
        if single?(layer,x) and single?(layer,y) :
          return(x,y)
        else :
          all-pairs(return, expand(x,layer), expand(y,layer))

    ;Test all pairwise relations within groups.
    for group in groups(layer) do :
      within (x,y) = all-pairs(group) :
        if num-pairwise-overlaps(x,y) == num-coords :
          return(x,y)

  ;Create the overlap table.
  new OverlapTable :

    ;Add a group for a specific layer.
    defmethod add-group (this, coord:Int, group:List<Int>) :
      val layer = layers[coord]
      val marker = length(groups(layer))
      for v in group do :
        #if-not-defined(OPTIMIZE) :
          if markers(layer)[v] is Int :
            fatal("Groups on layer are not disjoint.")
        markers(layer)[v] = marker
      add(groups(layer), group)

    ;Add a pairwise relation for a specific layer.
    defmethod add-pairwise (this, coord:Int, x:Int, y:Int) :
      val layer = layers[coord]
      
      #if-not-defined(OPTIMIZE) :
        fatal("Not disjoint.") when x == y
        for i in [x,y] do :
          match(markers(layer)[i]) :
            (m:Int) :
              val exemplar = head(groups(layer)[m])
              fatal("Not the exemplar value.") when exemplar != i
            (f:False) :
              false

      val added? = add(pairwise(layer), pairwise-key(x,y))
      
      #if-not-defined(OPTIMIZE) :
        fatal("Pairwise relation already added.") when not added?

      ;Return false
      false

    ;Return all the pairwise overlaps.
    defmethod all-overlaps (return:(Int,Int) -> ?, this) :
      all-overlaps(return)

;Holds a representation of the overlap information at a specific layer.
;- num-groups: indicates how many groups there are in total.
;- markers: markers[i] indicates what group i is in.
;- pairwise: the pairwise relations in the layer.
defstruct CoordLayer :
  groups:Vector<List<Int>>  
  markers:Array<Int|False>
  pairwise:HashSet<[Int,Int]>

;Return true if the given value in the layer is not part
;of a group.
defn single? (layer:CoordLayer, v:Int) -> True|False :
  markers(layer)[v] is False