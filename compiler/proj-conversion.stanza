defpackage stz/proj-conversion :
  import core
  import collections
  import stz/proj-env
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import stz/proj-field-types
  import stz/proj-value-types

;Create the new ProjFile.
public defn convert-proj (proj:ProjFileS0, env:ProjEnv) -> ProjFile :
  val extractor = make-extractor(env)
  val new-stmts = for s in stmts(proj) seq :
    convert(s, extractor)
  ProjFile $ to-tuple $
    filter-by<ProjStmt>(new-stmts)

;Make an extractor that can pull out the wrapped value.
defn make-extractor (env:ProjEnv) -> Extractor :
  ;Create the param type table.
  ;Each entry, [manager, field] => type, indicates that the param
  ;called 'field' for the package manager 'manager' is expected
  ;to have type 'type'.
  val param-type-table = HashTable<[Symbol,Symbol],ValueType>()
  for info in foreign-package-managers(env) do :
    for param in params(info) do :
      param-type-table[[name(info), field-name(param)]] = field-type(param)

  ;Extract a single value.
  defn single (v:ProjValue) -> ? :
    match(v) :
      (v:AtomValue) : value(v)
      (v:CommandString) : single(value(v))
      (v:FilePath) : single(value(v))

  ;Extract multiple values.
  defn multiple (v:ProjValue) -> Tuple :
    match(v) :
      (v:FilePath) :
        multiple(value(v))
      (v:CommandString) :
        multiple(value(v))
      (v:ProjValues) :
        map(single, values(v))
      (v:ProjValue) :
        [single(v)]
      
  new Extractor :
    defmethod field-type (this, manager:Symbol, field:Symbol) -> ValueType :
      param-type-table[[manager, field]]
    defmethod extract (this, v:ProjValue, t:ValueType) :
      if single?(t) : single(v)
      else : multiple(v)


