defpackage stz/proj-conversion :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import stz/proj-field-types

;Create the new ProjFile.
public defn convert-proj (proj:ProjFileS0) -> ProjFile :
  val extractor = make-extractor()
  val new-stmts = for s in stmts(proj) seq :
    convert(s, extractor)
  ProjFile $ to-tuple $
    filter-by<ProjStmt>(new-stmts)

;Make an extractor that can pull out the wrapped value.
defn make-extractor () -> Extractor :
  ;Extract a single value.
  defn single (v:ProjValue) -> ? :
    match(v) :
      (v:AtomValue) : value(v)
      (v:CommandString) : single(value(v))
      (v:FilePath) : single(value(v))

  ;Extract multiple values.
  defn multiple (v:ProjValue) -> Tuple :
    match(v) :
      (v:FilePath) :
        multiple(value(v))
      (v:CommandString) :
        multiple(value(v))
      (v:ProjValues) :
        map(single, values(v))
      (v:ProjValue) :
        [single(v)]
      
  new Extractor :
    defmethod extract (this, v:ProjValue, t:ValueType) :
      if single?(t) : single(v)
      else : multiple(v)


