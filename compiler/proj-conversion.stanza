defpackage stz/proj-conversion :
  import core
  import collections
  import core/parsed-path
  import stz/proj-env
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import stz/proj-field-types
  import stz/proj-value-types
  import stz/utils

;Create the new ProjFile.
public defn convert-proj (proj:ProjFileS0,
                          env:ProjEnv) -> ProjFile :
  val extractor = make-extractor(env)
  val new-stmts = for s in stmts(proj) seq :
    convert(s, extractor)
  ProjFile $ to-tuple $
    filter-by<ProjStmt>(new-stmts)

;Make an extractor that can pull out the wrapped value.
defn make-extractor (env:ProjEnv) -> Extractor :
  ;Create the table of foreign package managers.
  val manager-table = to-hashtable(name, foreign-package-managers(env))

  ;Convert a value to Stanza s-expression assuming
  ;that it fits the given type.
  defn convert (v:ProjValue, t:ValueType) -> ? :
    match(v, t) :
      ;Cases: Atom types
      (v:AtomValue, t:AtomType) :
        value(v)
      (v:ProjTuple, t:FlagType) :
        to-tuple(convert(value(v), MultipleType(StringType)))
      ;Case: Tuple type
      (v:ProjTuple, t:TupleType) :
        to-tuple(convert(value(v), MultipleType(type(t))))
      ;Case: Table type
      (v:ProjTableS0, t:TableType) :
        val value-set = to-hashtable<Symbol,ProjValue>(values(v))
        val new-entries = to-tuple $ for entry in entries(t) seq? :
          if key?(value-set, name(entry)) :
            val v = value-set[name(entry)]
            One(name(entry) => convert(v, type(entry)))
          else :
            ;Sanity check: Ensure optional field.
            if not optional?(entry) :
              fatal("Unexpected missing required field.")
            if empty?(default-value(entry)) :
              None()
            else :
              One(name(entry) => value!(default-value(entry)))
        ProjTable(new-entries)
      ;Case: Multiple type
      (v:ProjValues, t:MultipleType) :
        ;Sanity check
        if any?({_ is ProjValues}, values(v)) :
          fatal("Unexpected nested ProjValues.")
        to-list(seq(convert{_, type(t)}, values(v)))
      (v, t:MultipleType) :
        List(convert(v, type(t)))

  ;Parse the working directory into a path.
  val parsed-workdir = parse-path(workdir(env))

  new Extractor :
    ;Return the field type specified by the package manager.
    defmethod field-types (this, manager:Symbol) -> Tuple<TableEntry> :
      params(manager-table[manager])

    ;Convert a value according to the given type.
    defmethod extract (this, v:ProjValue, t:ValueType) :
      convert(v,t)

    ;Return the working directory for use in absolutely resolving
    ;file paths.
    defmethod workdir (this) :
      parsed-workdir
