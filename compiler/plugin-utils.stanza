defpackage stz/plugin-utils :
  import core
  import collections
  import core/stack-trace
  import stz/fastio-buffer
  import stz/fastio-runtime
  import stz/plugin-result

;A type to aid in the implementation of receiving and replying
;from a plugin.
;- output: The FastIOBuffer for sending messages back to caller.
;- serializer: The PluginResultSerializer to use to write out messages to caller.
public defstruct PluginReceiver :
  output:FastIOBuffer
  object-io:FastObjectIO
  plugin-io:FastObjectIO<PluginResult>

;Create a new plugin receiver that reads/writes objects
;using the given object-io.
public defn PluginReceiver (object-io:FastObjectIO) -> PluginReceiver :
  PluginReceiver(
    FastIOBuffer(1024),
    object-io,
    PluginResultIO(object-io))

;Receive a message from the main program by executing the
;given function. Returns the pointer to the reply.
public lostanza defn receive (receiver:ref<PluginReceiver>,
                              input:ptr<byte>,
                              func:ref<(? -> ?)>) -> ptr<?> :
  ;Read the argument object from memory.
  val object = read-from-memory(input, object-io(receiver))
                                
  ;Execute the receive function given the argument and
  ;get a PluginResult back.
  val result = execute(func, object)

  ;Serialize the PluginResult to the output buffer.
  write-to-memory(output(receiver),
                  plugin-io(receiver),
                  result)

  ;Return the pointer to the output buffer.
  return output(receiver).data

;Execute the given function with the given object,
;and return a PluginResult.
public defn execute (func:? -> ?, object) -> PluginResult :
  var trace:StackTrace|False = false
  try :
    with-exception-interceptor(
      fn () :
        PluginSuccess(func(object))
      fn (e) :
        trace = collect-stack-trace()
        throw(e))
  catch (e) :
    if trace is False :
      fatal("Error: An exception was thrown by the plugin but \
             no stack trace was collected.")
    PluginError(to-string(e), trace as StackTrace)