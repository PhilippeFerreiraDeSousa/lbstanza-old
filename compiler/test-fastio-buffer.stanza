defpackage stz/test-fastio-buffer :
  import core
  import collections
  import stz/fastio-buffer

defn flush (b:FastIOBuffer) :
  false

lostanza defn write (b:ref<FastIOBuffer>, x:ref<Int>) -> ref<False> :
  return write-int(b, x.value)

lostanza defn read-Int (b:ref<FastIOBuffer>) -> ref<Int> :
  return new Int{read-int(b)}

defn main () :
  val buffer = FastIOBuffer(4 * 1024)  
  val num-iters = 100
  val num-i = 1000000
  val t0 = current-time-us()
  for iter in 0 to num-iters do :
    for i in 0 to num-i do :
      write(buffer, i)
  val t1 = current-time-us()
  println("Time: %_ us" % [t1 - t0])
  println("Elements per Microsecond: %_" % [to-long(num-iters * num-i) / (t1 - t0)])

  val readbuf = read-from(buffer)
  for iter in 0 to num-iters do :
    for i in 0 to num-i do :
      println(read-Int(readbuf))

main()