defpackage stz/external-dependencies :
  import core
  import collections
  import stz/printing-utils

;Represents the foreign dependencies that a Stanza program relies upon.
;- ccfiles: The set of C files that Stanza relies upon.
;- ccflags: The set of flags that Stanza relies upon.
public defstruct ProjDependencies :
  ccfiles: Tuple<String>
  ccflags: Tuple<String>

defmethod print (o:OutputStream, d:ProjDependencies) :
  val items = [
    named-list-fields("ccfiles", seq(written,ccfiles(d)))
    named-list-fields("ccflags", seq(written,ccflags(d)))]
  print(o, "ProjDependencies(%_)" % [indented-field-list(items)])

;Format as a human-readable report to save as
;external-dependencies.txt. 
public defn format-report (d:ProjDependencies) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      val files = seq(written, ccfiles(d))
      val flags = seq(written, ccflags(d))
      print(o, "ccfiles%_" % [colon-field-list(files)])
      lnprint(o, "ccflags%_" % [colon-field-list(flags)])

;Helper: Merge multiple ProjDependencies into one, and
;de-duplicate redundant dependencies.

;Special note about the flag dependencies:
;  The ordering of flags is important in GCC. Suppose we give the flags -lLIBA -lLIBB -lLIBC.
;  When processing -lLIBC, GCC will keep only the definitions in LIBC that have been used
;  thus far by the flags that have come before. Therefore, if LIBB uses definitions from LIBC,
;  then we must ensure that -lLIBB comes before -lLIBC.
;  For this reason, during merge, we keep the last appearance of a flag
;  instead of the first appearance.
public defn merge (ds:Seqable<ProjDependencies>) -> ProjDependencies :
  ;Helper: Remove duplicates from vector.
  defn remove-duplicates (vs:Vector) :
    val visited = HashSet<?>()
    for v in vs remove-when :
      not add(visited,v)
      
  ;Helper: Remove duplicates from vector. Keep last appearance instead
  ;of first.
  defn remove-duplicates-keep-last (vs:Vector) :
    reverse!(vs)
    remove-duplicates(vs)
    reverse!(vs)

  ;Collect all of the files and flags.
  val all-files = Vector<String>()
  val all-flags = Vector<String>()
  for d in ds do :
    add-all(all-files, ccfiles(d))
    add-all(all-flags, ccflags(d))

  ;Remove duplicates.
  remove-duplicates(all-files)
  remove-duplicates-keep-last(all-flags)

  ;Return as new ProjDependencies.
  ProjDependencies(to-tuple(all-files),
                   to-tuple(all-flags))