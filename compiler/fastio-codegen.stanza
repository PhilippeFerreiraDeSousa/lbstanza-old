defpackage stz/fastio-codegen :
  import core
  import collections
  import macro-utils
  import stz/fastio-serializer-lang with:
    prefix(Constructor) => lang-

;============================================================
;======================= Code IR ============================
;============================================================

public defstruct CodeIR :
  info:FileInfo|False
  name:Symbol
  types:Tuple<IOType>

;Represents a definition of a type.
public defstruct IOType :
  info:FileInfo|False
  type
  binder:Symbol
  writer-name:Symbol
  reader-name:Symbol
  constructor:Constructor

;Represents code for reading/writing a type.
public deftype Constructor

;Represents code for reading/writing an atom type.
public defstruct AtomConstructor <: Constructor :
  writer
  reader

;Represents readers/writers for a specification.
public deftype SpecRW

;Read/write using the defined reading/writing functions.
public defstruct NamedSpecRW <: SpecRW :
  writer:Symbol
  reader:Symbol

;Read/write using the defined reading/writing functions
;with an additional cast.
public defstruct CastedSpecRW <: SpecRW :
  writer:Symbol
  reader:Symbol
  type

;Read/write a struct with the given name and fields.
public defstruct StructSpecRW <: SpecRW :
  info:FileInfo|False
  struct:Symbol
  fields:Tuple<FieldRW>

;Represents a field in a struct, and the reader and writer
;to us for writing its value.
public defstruct FieldRW :
  name:Symbol
  writer:Symbol
  reader:Symbol

;Resolved writer special expression.
;- writer: The name of the writer function to use.
public defstruct ResolvedWriteSpec <: SpecialExp :
  info:FileInfo|False
  writer:Symbol
  item

;Resolved reader special expression
;- reader: The name of the reader function to use.
public defstruct ResolvedReadSpec <: SpecialExp :
  info:FileInfo|False
  reader:Symbol

;============================================================
;===================== Code Generation ======================
;============================================================

public defn to-sexp (ir:CodeIR) :
  ;Overall template.
  val template = `(

    ;Define the serializer.
    info{deftype Serializer}

    ;Define the serialization functions.
    types{
      exp
    }
    
    println("Hello world")
  )

  ;Code generation environment
  val env = CodeGenEnv(
    gensym(`buffer)
    `($do throw ($do FastIOSerializationError)))

  ;Compile of the types.
  val compiled-types = for t in types(ir) map :
    [`exp => to-sexp(env, t)]

  fill-template(template, [
    `Serializer => deep(name(ir))
    `serializer => deep(gensym(`serializer))
    `FastIOBuffer => deep(`stz/fastio-buffer/FastIOBuffer)
    `info => wrap-info(info(ir))
    `types => nested(compiled-types)])

;============================================================
;============ Generation of Each Constructor ================
;============================================================

;Convenience launcher that just calls the multi.
defn to-sexp (env:CodeGenEnv, t:IOType) -> Substitute :
  to-sexp(env, t, constructor(t))

;Generate reader/writer for the given type with the given constructor.
defmulti to-sexp (env:CodeGenEnv, t:IOType, c:Constructor) -> Substitute

;Code generation for atoms.
defmethod to-sexp (env:CodeGenEnv, t:IOType, c:AtomConstructor) -> Substitute :
  val template = `(
    ;Write given type to the buffer.
    info{
      defn write-xxx (serializer:Serializer, buffer:FastIOBuffer, binder:Type) -> False :
        writer-exp
    }

    ;Read given type from the buffer.
    info{
      defn read-xxx (serializer:Serializer, buffer:FastIOBuffer) -> Type :
        reader-exp
    })
      
  substitute(template, [
    `info => wrap-info(info(t))
    `buffer => buffer-name(env)
    `binder => binder(t)
    `Type => type(t)
    `write-xxx => writer-name(t)
    `read-xxx => reader-name(t)
    `writer-exp => fill-special-exp(env, writer(c))
    `reader-exp => fill-special-exp(env, reader(c))])

;============================================================
;============== Code Generation Environment =================
;============================================================

;Represents necessary symbols and forms for filling
;special expressions.
defstruct CodeGenEnv :
  buffer-name: Symbol
  throw-error-form: ?

;============================================================
;============== Filling Special Expressions =================
;============================================================

;Fill occurrences of special expressions within the given
;environment.
defn fill-special-exp (env:CodeGenEnv, exp) -> ? :
  defn fill (exp) -> ? :
    match(exp) :
      (exp:Token) :
        sub-token-item?(exp, fill(item(exp)))
      (exp:List) :
        map(fill, exp)
      (exp:ResolvedWriteSpec) :
        val form = qquote($do ~(writer(exp)) ~(buffer-name(env)) ~(item(exp)))
        Token?(form, info(exp))
      (exp:ResolvedReadSpec) :
        val form = qquote($do ~(reader(exp)) ~(buffer-name(env)))
        Token?(form, info(exp))
      (exp:NotifyError) :
        Token?(throw-error-form(env), info(exp))
      (exp:ReifyBuffer) :
        Token?(buffer-name(env), info(exp))
      (exp:SpecialExp) :
        fatal("Unexpected special expression of type %_ during filling." % [
              object-type(exp)])
      (exp) :
        exp  
  fill(exp)

;Create a Token using the given info if one is provided.
defn Token? (x, info:FileInfo|False) -> ? :
  match(info:FileInfo) : Token(x, info)
  else : x

