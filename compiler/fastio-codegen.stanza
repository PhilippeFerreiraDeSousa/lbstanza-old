defpackage stz/fastio-codegen :
  import core
  import collections
  import macro-utils

;============================================================
;======================= Code IR ============================
;============================================================

public defstruct CodeIR :
  info:FileInfo|False
  name:Symbol
  
;;Represents 
;defstruct IOType :
;  info:FileInfo|False
;  type
;  ???
;
;

;Represents readers/writers for a specification.
deftype SpecRW

;Read/write using the defined reading/writing functions.
defstruct NamedSpecRW <: SpecRW :
  writer:Symbol
  reader:Symbol

;Read/write using the defined reading/writing functions
;with an additional cast.
defstruct CastedSpecRW <: SpecRW :
  writer:Symbol
  reader:Symbol
  type

;Read/write a struct with the given name and fields.
defstruct StructSpecRW <: SpecRW :
  info:FileInfo|False
  struct:Symbol
  fields:Tuple<FieldRW>

;Represents a field in a struct, and the reader and writer
;to us for writing its value.
defstruct FieldRW :
  name:Symbol
  writer:Symbol
  reader:Symbol

;============================================================
;===================== Code Generation ======================
;============================================================

public defn to-sexp (ir:CodeIR) :
  `(println("Hello world"))

;defn codegen () :
;  val template = `(
;  
;    deftype Serializer
;
;    entry-points{
;      defmulti read-spec (s:Serializer, buf:FastIOBuffer) -> Type
;      defmulti write-spec (s:Serializer, buf:FastIOBuffer, x:Type) -> False
;    }
;    
;    defn Serializer () -> Serializer :
;    
;      val buffer = FastIOBuffer()
;
;      stanza-exps{
;        exp
;      }
;
;      new Serializer :
;        entry-points{
;          defmethod read-spec (this) -> Type :
;            read-spec(buffer)
;          defmethod write-spec (this, x:Type) -> False :
;            write-spec(buffer, x)
;        }
;  )
;
;val Serializer
;defn read-pkg (asdf)
;defn write-pkg (asdf)
;
;Where do we generate these entry points?
;
;read (asdf, name:Symbol) -> ?
;write (asdf, name:Symbol) -> ?
;
;We have to generate it at the top level.
;