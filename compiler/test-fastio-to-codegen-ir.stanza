defpackage stz/test-fastio-to-codegen-ir :
  import core
  import collections
  import stz/fastio-serializer-lang-parser
  import stz/fastio-code-transforms
  import stz/fastio-to-codegen-ir
  import stz/fastio-codegen

;DEBUGGING
within (package,sig) = set-stack-trace-filter() :
  package != `core
  
defn main () :
  val filename = command-line-arguments()[1]
  val forms = reader/read-file(filename)
  val parsed = parse-syntax[fastio-serializer-lang / #defserializer](forms)
  val transformed = lift-combinators(parsed)
  val code-ir = to-codegen-ir(transformed)
  val form = wrap-sexp-in-defpackage(to-sexp(code-ir))
  spit("build/test-program.stanza", form)
  call-system("stanza", ["stanza", "run", "compiler/stanza.proj", "build/test-program.stanza"])

defn wrap-sexp-in-defpackage (form) :
  qquote(
    defpackage test-program :
      import core
      import collections
      
    ~ form)

set-command-line-arguments(["parse" "testdata/serializer-lang-ir.txt"])
main()