defpackage stz/proj-flattening :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import core/parsed-path

;Flatten all relative paths in the file.
public defn flatten-relative-paths (file:ProjFileS0) -> ProjFileS0 :

  ;Accumulate all flattened statements here.
  val stmt-buffer = Vector<ProjStmt>()

  ;Add the parent-path prefix to all strings in v.
  defn prefix-strings (v:ProjValue, parent-path:ParsedPath) -> ProjValue :
    match(v) :
      (v:AtomValue) :
        match(value(v)) :
          (sym:Symbol) :
            v
          (str:String) :
            AtomValue(info(v), to-string(relative-to-file(parent-path, str)))
      (v) :
        map(prefix-strings{_ as ProjValue, parent-path}, v)

  ;Add the parent-path prefix to all FilePath in v.
  defn prefix-filepaths (v:ProjValue, parent-path:ParsedPath) -> ProjValue :
    match(v:FilePath) :
      FilePath(info(v), prefix-strings(value(v), parent-path))
    else :
      v

  ;Add the parent-path prefix to all paths appearing in s, and
  ;push them to the stmt-buffer.
  defn prefix-parent-path (s:ProjStmt, parent-path:ParsedPath) -> False :
    match(s:IncludedStmtsS0) :
      prefix-paths(s)
    else :
      val stmt* = map(prefix-filepaths{_ as ProjValue, parent-path}, s)
      add(stmt-buffer, stmt*)

  ;Add the path of the included file to all paths within s.
  defn prefix-paths (s:IncludedStmtsS0) -> False :
    val new-parent-path = parse-path(path(s))
    for stmt in stmts(s) do :
      prefix-parent-path(stmt, new-parent-path)

  ;Flatten paths in all included proj files.
  for stmt in stmts(file) do :
    match(stmt:IncludedStmtsS0) : prefix-paths(stmt)
    else : add(stmt-buffer, stmt)

  ;Return file with new statements.
  sub-stmts(file, to-tuple(stmt-buffer))