defpackage stz/proj-field-types :
  import core
  import collections
  import core/parsed-path
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-value-types

;============================================================
;===================== Checker ==============================
;============================================================

;Plug in different instantiations for different algorithms to check.
public deftype Checker

;Check that the given field value has the given type.
public defmulti check (c:Checker, v:ProjValue, t:ValueType) -> False

;Helper: Call check if v is not empty.
defn check (c:Checker, v:Maybe<ProjValue>, t:ValueType) :
  if not empty?(v) :
    check(c, value!(v), t)

;============================================================
;===================== Extractor ============================
;============================================================

;Plug in in different instantiations for different algorithms to extract.
public deftype Extractor

;Extract the value of the given field given its type.
public defmulti extract (e:Extractor, v:ProjValue, t:ValueType) -> ?

;Retrieve the absolute path of the working directory.
public defmulti workdir (e:Extractor) -> ParsedPath

;Helper: Return None() if v is empty and t is single.
;        Return [] if v is empty and t is multiple.
defn extract (e:Extractor, v:Maybe<ProjValue>, t:ValueType) -> ? :
  if single?(t) :
    if empty?(v) : None()
    else : One(extract(e, value!(v), t))
  else :
    if empty?(v) : []
    else : extract(e, value!(v), t)

;============================================================
;=========== Field Types of ForeignPackageParams ============
;============================================================

;Retrieve the expected field type of a foreign package
;manager parameter list.
public defmulti field-type (c:Checker|Extractor,
                            package-manager:Symbol,
                            field-name:Symbol) -> ValueType

;============================================================
;=================== Field Types ============================
;============================================================

public defmulti check-types (s:ProjStmt, checker:Checker) -> False :
  false

public defmulti convert (s:ProjStmt, extractor:Extractor) -> ProjStmt|False :
  false

defmethod check-types (s:DefinedInStmtS0, checker:Checker) :
  check(checker, filename(s), SINGLE-STRING)  
defmethod convert (s:DefinedInStmtS0, extractor:Extractor) :
  DefinedInStmt(
    package(s),
    extract(extractor, filename(s), SINGLE-STRING))

defmethod check-types (s:PackagesDefinedInStmtS0, checker:Checker) :
  check(checker, filename(s), SINGLE-STRING)
defmethod convert (s:PackagesDefinedInStmtS0, extractor:Extractor) :
  val [package-without-star star] = qualifier(packages(s))
  PackagesDefinedInStmt(
    package-without-star,
    extract(extractor, filename(s), SINGLE-STRING))

defmethod check-types (s:RequiresStmtS0, checker:Checker) :
  check(checker, ccfiles(s), MULTIPLE-STRINGS)
  check(checker, ccflags(s), MULTIPLE-STRINGS)
  for fp in foreign-packages(s) do :
    check(checker, files(fp), MULTIPLE-STRINGS)
defmethod convert (s:RequiresStmtS0, extractor:Extractor) :
  val ccfiles = extract(extractor, ccfiles(s), MULTIPLE-STRINGS)
  val ccflags = extract(extractor, ccflags(s), MULTIPLE-STRINGS)
  val fps = for fp in foreign-packages(s) map :
    val files = extract(extractor, files(fp), MULTIPLE-STRINGS)
    ForeignPackageFiles(package-manager(fp), files)
  RequiresStmt(package(s), ccfiles, ccflags, fps)

defmethod check-types (s:ImportWhenStmtS0, checker:Checker) :
  check(checker, dependencies(s), MULTIPLE-SYMBOLS)
defmethod convert (s:ImportWhenStmtS0, extractor:Extractor) :
  ImportWhenStmt(
    package(s),
    extract(extractor, dependencies(s), MULTIPLE-SYMBOLS))

defmethod check-types (s:CompileStmtS0, checker:Checker) :
  check(checker, name(s), SINGLE-STRING)
  check(checker, dependencies(s), MULTIPLE-STRINGS)
  check(checker, commands(s), MULTIPLE-STRINGS)
defmethod convert (s:CompileStmtS0, extractor:Extractor) :
  CompileStmt(
    file?(s)
    extract(extractor, name(s), SINGLE-STRING)
    extract(extractor, dependencies(s), MULTIPLE-STRINGS)
    extract(extractor, commands(s), MULTIPLE-STRINGS))

defmethod check-types (s:BuildStmtS0, checker:Checker) :
  check(checker, inputs(s), MULTIPLE-STANZA-INPUTS)
  check(checker, supported-vm-packages(s), MULTIPLE-STANZA-INPUTS)
  check(checker, pkg(s), SINGLE-STRING)
  check(checker, output(s), SINGLE-STRING)
  check(checker, assembly(s), SINGLE-STRING)
  check(checker, external-dependencies(s), SINGLE-STRING)
  check(checker, ccfiles(s), MULTIPLE-STRINGS)
  check(checker, ccflags(s), MULTIPLE-STRINGS)
  check(checker, flags(s), MULTIPLE-SYMBOLS)
defmethod convert (s:BuildStmtS0, extractor:Extractor) :
  BuildStmt(
    name(s)
    type(s)
    extract(extractor, inputs(s), MULTIPLE-STANZA-INPUTS)
    extract(extractor, supported-vm-packages(s), MULTIPLE-STANZA-INPUTS)
    extract(extractor, pkg(s), SINGLE-STRING)
    extract(extractor, output(s), SINGLE-STRING)
    extract(extractor, assembly(s), SINGLE-STRING)
    extract(extractor, external-dependencies(s), SINGLE-STRING)
    extract(extractor, ccfiles(s), MULTIPLE-STRINGS)
    extract(extractor, ccflags(s), MULTIPLE-STRINGS)
    extract(extractor, flags(s), MULTIPLE-SYMBOLS)
    optimize(s))

defmethod check-types (s:SyntaxPackagesDefinedInStmtS0, checker:Checker) :
  check(checker, filename(s), SINGLE-STRING)
defmethod convert (s:SyntaxPackagesDefinedInStmtS0, extractor:Extractor) :
  SyntaxPackagesDefinedInStmt(
    packages(s)
    extract(extractor, filename(s), SINGLE-STRING))

defmethod check-types (s:ForeignPackageParamsStmtS0, checker:Checker) :
  check(checker, projdir(s), SINGLE-STRING)
  for e in entries(s) do :
    val type = field-type(checker, package-manager(s), key(e))
    check(checker, value(e), type)

defmethod convert (s:ForeignPackageParamsStmtS0, extractor:Extractor) :
  ;To make it easier for the package manager, we resolve any
  ;paths in the parameters to absolute paths using the working directory.    
  val projdir = extract-adding-workdir(extractor, projdir(s), SINGLE-STRING)
  val entries = for e in entries(s) map :
    val type = field-type(extractor, package-manager(s), key(e))
    key(e) => extract-adding-workdir(extractor, value(e), type)
    
  ForeignPackageParamsStmt(
    package-manager(s),
    projdir,
    entries)

;Helper: If the value is a FilePath, additionally add the
;working directory to the initial extraction.
defn extract-adding-workdir (extractor:Extractor,
                             v:ProjValue,
                             type:ValueType) -> ? :
  val result = extract(extractor, v, type)
  if v is FilePath :
    defn add-workdir (v) -> ? :
      match(v) :
        (v:Symbol) :
          v
        (v:String) :
          to-string(relative-to-dir(workdir(extractor), v))          
        (v:Tuple) :
          map(add-workdir,v)
    add-workdir(result)
  else :
    result