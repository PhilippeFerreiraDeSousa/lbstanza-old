defpackage stz/proj-field-types :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0

;============================================================
;===================== Type Specifiers ======================
;============================================================
  
;Represents the type of a field.
;- single?: True if the field must resolve to a single atom.
public defstruct ValueType :
  atom-type:AtomType
  single?:True|False

;The different atomic types that we support.
public defenum AtomType :
  StringType
  SymbolType
  StanzaInputType

;============================================================
;==================== Type Shorthands =======================
;============================================================

public val SINGLE-STRING = ValueType(StringType,true)
public val MULTIPLE-STRINGS = ValueType(StringType,false)
public val SINGLE-SYMBOL = ValueType(SymbolType,true)
public val MULTIPLE-SYMBOLS = ValueType(SymbolType,false)
public val MULTIPLE-STANZA-INPUTS = ValueType(StanzaInputType,false)

;============================================================
;===================== Checker ==============================
;============================================================

;Plug in different instantiations for different algorithms to check.
public deftype Checker

;Check that the given field value has the given type.
public defmulti check (c:Checker, v:ProjValue, t:ValueType) -> False

;Helper: Call check if v is not empty.
defn check (c:Checker, v:Maybe<ProjValue>, t:ValueType) :
  if not empty?(v) :
    check(c, value!(v), t)

;============================================================
;===================== Extractor ============================
;============================================================

;Plug in in different instantiations for different algorithms to extract.
public deftype Extractor

;Extract the value of the given field given its type.
public defmulti extract (e:Extractor, v:ProjValue, t:ValueType) -> ?

;Helper: Return None() if v is empty and t is single.
;        Return [] if v is empty and t is multiple.
defn extract (e:Extractor, v:Maybe<ProjValue>, t:ValueType) -> ? :
  if single?(t) :
    if empty?(v) : None()
    else : One(extract(e, value!(v), t))
  else :
    if empty?(v) : []
    else : extract(e, value!(v), t)

;============================================================
;=================== Field Types ============================
;============================================================

public defmulti check-types (s:ProjStmt, checker:Checker) -> False :
  false

public defmulti convert (s:ProjStmt, extractor:Extractor) -> ProjStmt|False :
  false

defmethod check-types (s:DefinedInStmtS0, checker:Checker) :
  check(checker, filename(s), SINGLE-STRING)  
defmethod convert (s:DefinedInStmtS0, extractor:Extractor) :
  DefinedInStmt(
    package(s),
    extract(extractor, filename(s), SINGLE-STRING))

defmethod check-types (s:PackagesDefinedInStmtS0, checker:Checker) :
  check(checker, filename(s), SINGLE-STRING)
defmethod convert (s:PackagesDefinedInStmtS0, extractor:Extractor) :
  val [package-without-star star] = qualifier(packages(s))
  PackagesDefinedInStmt(
    package-without-star,
    extract(extractor, filename(s), SINGLE-STRING))

defmethod check-types (s:RequiresStmtS0, checker:Checker) :
  check(checker, ccfiles(s), MULTIPLE-STRINGS)
  check(checker, ccflags(s), MULTIPLE-STRINGS)
defmethod convert (s:RequiresStmtS0, extractor:Extractor) :
  RequiresStmt(
    package(s),
    extract(extractor, ccfiles(s), MULTIPLE-STRINGS),
    extract(extractor, ccflags(s), MULTIPLE-STRINGS))

defmethod check-types (s:ImportWhenStmtS0, checker:Checker) :
  check(checker, dependencies(s), MULTIPLE-SYMBOLS)
defmethod convert (s:ImportWhenStmtS0, extractor:Extractor) :
  ImportWhenStmt(
    package(s),
    extract(extractor, dependencies(s), MULTIPLE-SYMBOLS))

defmethod check-types (s:CompileStmtS0, checker:Checker) :
  check(checker, name(s), SINGLE-STRING)
  check(checker, dependencies(s), MULTIPLE-STRINGS)
  check(checker, commands(s), MULTIPLE-STRINGS)
defmethod convert (s:CompileStmtS0, extractor:Extractor) :
  CompileStmt(
    file?(s)
    extract(extractor, name(s), SINGLE-STRING)
    extract(extractor, dependencies(s), MULTIPLE-STRINGS)
    extract(extractor, commands(s), MULTIPLE-STRINGS))

defmethod check-types (s:BuildStmtS0, checker:Checker) :
  check(checker, inputs(s), MULTIPLE-STANZA-INPUTS)
  check(checker, supported-vm-packages(s), MULTIPLE-STANZA-INPUTS)
  check(checker, pkg(s), SINGLE-STRING)
  check(checker, output(s), SINGLE-STRING)
  check(checker, assembly(s), SINGLE-STRING)
  check(checker, external-dependencies(s), SINGLE-STRING)
  check(checker, ccfiles(s), MULTIPLE-STRINGS)
  check(checker, ccflags(s), MULTIPLE-STRINGS)
  check(checker, flags(s), MULTIPLE-SYMBOLS)
defmethod convert (s:BuildStmtS0, extractor:Extractor) :
  BuildStmt(
    name(s)
    type(s)
    extract(extractor, inputs(s), MULTIPLE-STANZA-INPUTS)
    extract(extractor, supported-vm-packages(s), MULTIPLE-STANZA-INPUTS)
    extract(extractor, pkg(s), SINGLE-STRING)
    extract(extractor, output(s), SINGLE-STRING)
    extract(extractor, assembly(s), SINGLE-STRING)
    extract(extractor, external-dependencies(s), SINGLE-STRING)
    extract(extractor, ccfiles(s), MULTIPLE-STRINGS)
    extract(extractor, ccflags(s), MULTIPLE-STRINGS)
    extract(extractor, flags(s), MULTIPLE-SYMBOLS)
    optimize(s))

defmethod check-types (s:SyntaxPackagesDefinedInStmtS0, checker:Checker) :
  check(checker, filename(s), SINGLE-STRING)
defmethod convert (s:SyntaxPackagesDefinedInStmtS0, extractor:Extractor) :
  SyntaxPackagesDefinedInStmt(
    packages(s)
    extract(extractor, filename(s), SINGLE-STRING))