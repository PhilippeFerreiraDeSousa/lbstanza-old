defpackage stz/proj-errors :
  import core
  import collections

;Represents a single ProjFile error.
public defstruct ProjFileError <: Exception :
  info: FileInfo|False
  msg: String
defmethod print (o:OutputStream, e:ProjFileError) :
  val info-str = "" when info(e) is False
            else "%_: " % [info(e)]
  print(o, "%_%_" % [info-str, msg(e)])

;Consolidate all errors from projfiles.
public defstruct ProjFileErrors <: Exception :
  exceptions: Collection<Exception>
defmethod print (o:OutputStream, e:ProjFileErrors) :
  print(o, "%n" % [exceptions(e)])

;Occurs when a .proj file cannot be found at the place where it is claimed to be.
public defn CannotFindIncludeProj (info:FileInfo|False, src-proj:String, load-proj:String) :
  val msg = to-string("The project file %~ cannot load non-existent project file %~." % [src-proj, load-proj])
  ProjFileError(info, msg)

;Occurs when .proj files cyclically include each other.
public defn IncludeCycle (info:FileInfo|False, path:String, parent-paths:List<String>) :
  val msg = to-string("Cyclic include error when attempting to re-include project file %~. Already included through paths: %@." % [
    path, parent-paths])
  ProjFileError(info, msg)

;Occurs when .proj files contain a duplicate statement.
;- stmt-description: A string such as 'include statement for file
;  "myfile.stanza"'. Used to generate the sentence "Duplicate include
;  statement for file "myfile.stanza"".
public defn DuplicateStmt (info:FileInfo|False,
                           stmt-description:String,
                           prev-info:FileInfo|False) :
  val earlier-str = "" when prev-info is False
               else " Earlier statement at %_." % [prev-info]
  val msg = "Duplicate %_.%_" % [
    stmt-description, earlier-str]
  ProjFileError(info, to-string(msg))

;Helper: Throw errors wrapped in ProjFileErrors if it is not empty.
public defn throw-proj-file-errors? (es:Vector<ProjFileError>) -> False :
  if not empty?(es) :
    throw(ProjFileErrors(es))