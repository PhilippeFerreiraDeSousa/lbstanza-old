defpackage stz/proj-ir :
  import core
  import collections
  import stz/printing-utils

public defstruct ProjFile :
  stmts: Tuple<ProjStmt>

public deftype ProjStmt

public defstruct DefinedInStmt <: ProjStmt & Equalable :
  package: Symbol
  filename: String
with:
  printer => true
  equalable => true

public defstruct PackagesDefinedInStmt <: ProjStmt & Equalable :
  packages: Symbol|False
  filename: String
with:
  printer => true
  equalable => true

public defstruct SyntaxPackagesDefinedInStmt <: ProjStmt & Equalable :
  packages: Tuple<Symbol>
  filename: String
with:
  printer => true
  equalable => true

public defstruct RequiresStmt <: ProjStmt & Equalable :
  package: Symbol
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
with:
  equalable => true

public defstruct ImportWhenStmt <: ProjStmt & Equalable :
  package: Symbol
  dependencies: Tuple<Symbol>
with:
  printer => true
  equalable => true

;- dependencies: The names of any files that the compilation commands
;  depend upon. The hashstamp of these files are tracked so that if
;  they are changed, the system knows that the compiled output is stale.
;  The files are listed explicitly, because we do not attempt to
;  automatically analyze the compilation commands to determine them.
public defstruct CompileStmt <: ProjStmt & Equalable :
  file?: True|False
  name: String
  dependencies: Tuple<String>
  commands: Tuple<String>
with:
  equalable => true

public defstruct BuildStmt <: ProjStmt :
  name: Symbol
  type: BuildTargetType
  inputs: Tuple<String|Symbol>
  supported-vm-packages: Tuple<String|Symbol>
  pkg: Maybe<String>
  output: Maybe<String>
  assembly: Maybe<String>
  external-dependencies: Maybe<String>
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
  flags: Tuple<Symbol>
  optimize: True|False
with:
  printer => true

public defenum BuildTargetType :
  StandardTarget
  TestTarget

public defstruct ForeignPackageParamsStmt <: ProjStmt :
  package-manager:Symbol
  projdir: String
  entries: Tuple<KeyValue<Symbol, ?>>

;============================================================
;====================== Printer =============================
;============================================================

defmethod print (o:OutputStream, f:ProjFile) :
  print(o, "ProjFile%_" % [colon-field-list(stmts(f))])

defmethod print (o:OutputStream, s:RequiresStmt) :
  val items = [
    named-emptyable-list-fields("ccfiles", seq(written,ccfiles(s)))
    named-emptyable-list-fields("ccflags", seq(written,ccflags(s)))]
  print(o, "package %~ requires%_" % [package(s), colon-field-list(items)])

defmethod print (o:OutputStream, s:CompileStmt) :
  val type-str = "file" when file?(s) else "flag"
  val dep-str = "" when empty?(dependencies(s))
           else " from (%,)" % [seq(written, dependencies(s))]
  val items = map(written, commands(s))
  print(o, "compile %_ %~%_%_" % [type-str, name(s), dep-str, colon-field-list(items)])

defmethod print (o:OutputStream, s:ForeignPackageParamsStmt) :
  val items = [
    simple-field("projdir", projdir(s))
    inline-fields $ for e in entries(s) map :
      simple-field(to-string(key(e)), value(e))]
  print(o, "foreign-package-params(%_)%_" % [package-manager(s), colon-field-list(items)])