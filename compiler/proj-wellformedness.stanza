defpackage stz/proj-wellformedness :
  import core
  import collections
  import stz/params
  import stz/proj-stage0
  import stz/proj-errors
  import stz/utils

;============================================================
;=========== General Wellformedness Algorithm ===============
;============================================================

public defn ensure-wellformed (f:ProjFileS0, platform:Symbol) -> ProjFileS0 :
  ;Create a vector to hold any detected errors.
  val errors = Vector<ProjFileError>()

  ;Check for wellformedness and duplicates.
  check-wellformed(f, platform, errors)
  check-duplicates(f, errors)

  ;Throw errors if there is any.
  throw-proj-file-errors?(errors)

  ;Return file unchanged.
  f

;============================================================
;=================== Wellformedness =========================
;============================================================

;Checks a single item for wellformedness errors.
;Recursing into subitems are handled by the caller.
defmulti check-item-wellformed (x:ProjItem,
                                platform:Symbol,
                                errors:Vector<ProjFileError>) -> False :
  false

;Included files must end with .proj.
defmethod check-item-wellformed (x:IncludeStmtS0,
                                 platform:Symbol,
                                 errors:Vector<ProjFileError>) :
  if not suffix?(path(x), ".proj") :
    val msg = "Expected a .proj file here, but found %_." % [path(x)]
    add(errors, ProjFileError(info(x), to-string(msg)))

;Check whether the platforms are properly handled.
defmethod check-item-wellformed (x:CondPlatform,
                                 platform:Symbol,
                                 errors:Vector<ProjFileError>) :
  ;Check whether all the platforms are either supported platforms, or
  ;the 'else' keyword.
  val n = length(values(x))
  for (entry in values(x), i in 0 to false) do :
    if key(entry) == `else :
      if i != n - 1 :
        val msg = "The 'else' keyword can only be used as last entry in list."
        add(errors, ProjFileError(info(x), msg))
    else :
      if not supported-platform?(key(entry)) :
        val msg = "'%~' does not refer to a supported platform." % [key(entry)]
        add(errors, ProjFileError(info(x), to-string(msg)))

  ;Check whether the current platform is one of the supported options.
  val current-platform-supported? =
    for entry in values(x) any? :
      key(entry) == `else or
      key(entry) == platform

  ;Issue error if current platform is not supported.
  if not current-platform-supported? :
    val msg = "There is no available option for the current platform '%~'." % [platform]
    add(errors, ProjFileError(info(x), to-string(msg)))

;Check the given item for wellformedness.
defn check-wellformed (f:ProjFileS0,
                       platform:Symbol,
                       errors:Vector<ProjFileError>) -> False :
  defn check-item (x:ProjItem) :
    check-item-wellformed(x, platform, errors)
    do(check-item, x)
  do(check-item, stmts(f))

;============================================================
;================= Check for Duplicates =====================
;============================================================

;Check for duplicate statements in the same file.
defn check-duplicates (f:ProjFileS0, errors:Vector<ProjFileError>) -> False :
  val groups = group-by(duplication-key, stmts(f))
  for group in groups do :
    if key(group) is-not False :
      if length(value(group)) > 1 :
        val stmts = reverse(value(group))
        val stmt0 = head(stmts)
        for stmt in tail(stmts) do :
          add(errors, DuplicateStmt(info(stmt), stmt-description(stmt), info(stmt0)))