#use-added-syntax(fastio-serializer)
defpackage stz/aux-file-serializer :
  import core
  import collections
  import stz/aux-file
  import stz/aux-file-errors
  import stz/fastio-buffer
  import stz/fastio-runtime
  import stz/fastio-errors
  import stz/package-stamps
  import stz/utils
  import stz/proj
  import stz/proj-utils
  import stz/params

;============================================================
;====================== Driver ==============================
;============================================================

;Write the given records out to a file.
public defn write-aux-records (name:String, auxfile:AuxRecords) :
  write-to-file(name, AuxFileIO(), auxfile)

;Read AuxRecords from a file.
public defn read-aux-records (name:String) -> AuxRecords :
  try : read-from-file(name, AuxFileIO())
  catch (e:WrongAuxFileVersion) : throw(sub-filename(e,name))
  catch (e:FastIOError) : throw(CorruptedAuxFile(name))

;For reading/writing AuxRecord objects.
defn AuxFileIO () -> FastObjectIO<AuxRecords> :
  FastObjectIO(AuxFileSerializer(),
               serialize-auxrecords,
               deserialize-auxrecords)

;============================================================
;=================== Serializer Definition ==================
;============================================================

defserializer AuxFileSerializer () :

  ;Start form auxrecords definition.
  entry-points: (auxrecords)

  ;Include the primitives
  include "serializer-primitives.spec"

  deftype auxrecords (AuxRecords) : (stanza-version:stanza-version, records:tuple(auxrecord))

  defunion auxrecord (AuxRecord) :
    PkgRecord: (package:symbol, filestamp:filestamp, source-stamp:filestamp,
                flags:tuple(symbol), optimize?:bool)
    ExternalFileRecord: (filetype:filetype, dependencies:tuple(filestamp), commands:tuple(string))
    BuildRecord: (target:symbol, packages:tuple(pkgstamp), files:tuple(filestamp), settings:build-record-settings, proj-isolate:isolate)

  defunion filetype (ExtFileType) :
    ExternalFile: (filestamp:filestamp)
    ExternalFlag: (flag:string)

  defunion build-record-settings (BuildRecordSettings) :
    BuildRecordSettings: (inputs:tuple(string-or-symbol), vm-packages:tuple(string-or-symbol),
                          platform:opt(symbol), assembly:opt(string), output:opt(string), external-dependencies:opt(string),
                          pkg-dir:opt(string), optimize?:bool, ccfiles:tuple(string), ccflags:tuple(string), flags:tuple(symbol))

  defunion pkgstamp (PackageStamp) :
    PackageStamp: (location:pkglocation, source-hashstamp:opt(bytearray), pkg-hashstamp:opt(bytearray))

  defunion pkglocation (PkgLocation) :
    PkgLocation: (package:symbol, source-file:opt(string), pkg-file:opt(string), read-pkg?:bool)

  defunion filestamp (FileStamp) :
    FileStamp: (filename:string, hashstamp:bytearray)

  defunion isolate (ProjIsolate) :
    ProjIsolate: (packages:tuple(symbol), stmts:tuple(projstmt))

  defunion projstmt (ProjStmt) :
    DefinedInStmt: (package:symbol, filename:string)
    PackagesDefinedInStmt: (packages:opt(symbol), filename:string)
    RequiresStmt: (package:symbol, ccfiles:tuple(string), ccflags:tuple(string))
    ImportWhenStmt: (package:symbol, dependencies:tuple(symbol))
    CompileStmt: (file?:bool, name:string, dependencies:tuple(string), commands:tuple(string))

  defunion string-or-symbol (String|Symbol) :
    String : string
    Symbol : symbol

  ;----------------------------------------------------------
  ;---------------------- Version Check ---------------------
  ;----------------------------------------------------------
  defatom stanza-version (xs:Tuple<Int>) :
    writer :
      #write[tuple(int)](xs)
    reader :
      val xs = #read[tuple(int)]
      if not valid-stanza-version-format?(xs) :
        #error
      if xs != STANZA-VERSION :
        throw(WrongAuxFileVersion(false, xs, STANZA-VERSION))
      xs
    skip :
      #skip[tuple(int)]
