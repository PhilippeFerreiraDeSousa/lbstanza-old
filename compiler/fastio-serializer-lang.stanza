;<doc>=======================================================
;==================== Serialization =========================
;============================================================

### Overall ###

defserializer PKG-SERIALIZER :

  entry-points :
    lit
    dtype

  defatom lit (x:Literal) :
    writer :
      #write[int](id(x))
    reader :
      #read[int]

  defunion dtype (DType) :
    DByte: lit
    DLong|DFloat: literal
    DBot: enum
    DArray: (x:int, y:int)

### Top Level Definitions ###

Including another file:

  include "otherspec.txt"

Normal Stanza Expressions:

  stanza-exp

Defining Atoms:

  defatom lit (x:Literal) :
    writer :
      #write[int](id(x))
    reader :
      #read[int]

Defining Types:

  deftype lit (MyStruct) : (x:int, y:string)

Defining Unions:

  defunion dtype (DType) :
    DByte: lit
    DLong|DFloat: literal
    DBot: enum
    DArray: (x:int, y:int)

Defining Combinators:

  defcombinator optional (item:X) (x:X|False) :
    writer :
      match(x) :
        (x:False) :
          #write[byte](0Y)
        (x:X) :
          #write[byte](1Y)
          #write[item](x)
    reader :
      switch(#read[byte]) :
        0Y : false
        1Y : #read[item]
        else : #error

### Specifications ###

Name of a definition:

  mydef 

Casted spec:

  spec as MyStruct

Combinator spec:

  mycombinator(spec1, spec2)

### Constructors ###

Enum:

  enum

Struct:

  (x:tuple(int), y:dtype)

Existing spec:

  dtype

### Expressions within Reader/Writer ###

Write an item according to the spec:

  #write[spec](item)

Read an item according to the Spec:
  
  #read[spec]

Throw an Error:

  #error

Reify the FastIOBuffer:

  #buffer
      
;============================================================
;=======================================================<doc>

defpackage stz/fastio-serializer-lang :
  import core
  import collections

;============================================================
;=================== Overall ================================
;============================================================

defstruct DefSerializer :
  info:FileInfo|False
  entry-points:Tuple<Symbol>
  exps:Tuple<TopExp>

;============================================================
;================= Top Level Expressions ====================
;============================================================

;Abstract definition type.
deftype TopExp

;Include a different file.
defstruct IncludeFile <: TopExp :
  info:FileInfo
  filename:String

;Include an arbitrary Stanza expression.
defstruct StanzaExp <: TopExp :
  info:FileInfo
  exp

;Atom reader and writer.
defstruct DefAtom <: TopExp :
  info:FileInfo|False
  name:Symbol
  binder:Symbol
  type
  writer
  reader

;Simple type definition.
defstruct DefType <: TopExp :
  info:FileInfo|False
  name:Symbol  
  type
  constructor: Constructor

;Union reader and writer.
defstruct DefUnion <: TopExp :
  info:FileInfo|False
  name:Symbol|Token
  type
  branches: Tuple<UnionBranch>

;Combinator reader and reader.
defstruct DefCombinator <: TopExp :
  info:FileInfo|False
  name:Symbol
  args:Tuple<CombinatorArg>
  binder:Symbol
  type
  writer
  reader

;Represents an argument for the combinator.
defstruct CombinatorArg :
  info:FileInfo|False
  name:Symbol
  type-binder:Symbol

;Most general form of union branch.
defstruct UnionBranch :
  info:FileInfo|False
  type
  constructor: Constructor

;============================================================
;===================== Specifications =======================
;============================================================

;Represents a specification.
deftype IOSpec

;The name of a definition.
defstruct NamedSpec <: IOSpec :
  name:Symbol

;Cast a spec to a specific type.
defstruct CastedSpec <: IOSpec :
  spec:IOSpec
  type

;Call a combinator.
defstruct CombinatorSpec <: IOSpec :
  name:Symbol
  specs:Tuple<IOSpec>

;============================================================
;======================= Constructors =======================
;============================================================

;Represents a construction specification.
;These are richer specifications that can only go
;in specific places (e.g. in a union).
deftype Constructor :
  IOSpec <: Constructor

;Construct an enum object.
defstruct EnumConstructor <: Constructor

;Construct a struct object
defstruct StructConstructor <: Constructor :
  args:Tuple<StructField>

defstruct StructField :
  name:Symbol
  spec:IOSpec

;============================================================
;=================== Special Expressions ====================
;============================================================

;Special expressions are used in bodies by the user.
deftype SpecialExp

;Write an item using the given specification.
defstruct WriteSpec <: SpecialExp :
  info:FileInfo|False
  spec:IOSpec
  item

;Read an item using the given specification.
defstruct ReadSpec <: SpecialExp :
  info:FileInfo|False
  spec:IOSpec

;Notify an error occurred.
defstruct NotifyError <: SpecialExp

;Get a reified buffer.
defstruct ReifyBuffer <: SpecialExp