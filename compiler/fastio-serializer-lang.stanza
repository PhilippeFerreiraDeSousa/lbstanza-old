;<doc>=======================================================
;==================== Serialization =========================
;============================================================

### Overall ###

defserializer PKG-SERIALIZER :

  entry-points :
    lit
    dtype

  defatom lit (x:Literal) :
    writer :
      #write[int](id(x))
    reader :
      #read[int]

  defunion dtype (DType) :
    DByte: lit
    DLong|DFloat: literal
    DBot: enum
    DArray: (x:int, y:int)

### Top Level Definitions ###

Including another file:

  include "otherspec.txt"

Normal Stanza Expressions:

  stanza-exp

Defining Atoms:

  defatom lit (x:Literal) :
    writer :
      #write[int](id(x))
    reader :
      #read[int]

Defining Types:

  deftype lit (MyStruct) : (x:int, y:string)

Defining Unions:

  defunion dtype (DType) :
    DByte: lit
    DLong|DFloat: literal
    DBot: enum
    DArray: (x:int, y:int)

Defining Combinators:

  defcombinator optional (item:X) (x:X|False) :
    writer :
      match(x) :
        (x:False) :
          #write[byte](0Y)
        (x:X) :
          #write[byte](1Y)
          #write[item](x)
    reader :
      switch(#read[byte]) :
        0Y : false
        1Y : #read[item]
        else : #error

### Specifications ###

Name of a definition:

  mydef 

Casted spec:

  spec as MyStruct

Combinator spec:

  mycombinator(spec1, spec2)

### Constructors ###

Enum:

  enum

Struct:

  (x:tuple(int), y:dtype)

Existing spec:

  dtype

### Expressions within Reader/Writer ###

Write an item according to the spec:

  #write[spec](item)

Read an item according to the Spec:
  
  #read[spec]

Throw an Error:

  #error

Reify the FastIOBuffer:

  #buffer

### Datastructure Tree ###

TopExp:
  IncludeFile
  StanzaExp
  DefAtom
  DefType
  DefUnion
  DefCombinator

Constructor:
  EnumConstructor
  StructConstructor
  IOSpec

IOSpec:
  NamedSpec
  CastedSpec
  CombinatorSpec
      
;============================================================
;=======================================================<doc>

defpackage stz/fastio-serializer-lang :
  import core
  import collections
  import line-wrap

;============================================================
;=================== Overall ================================
;============================================================

public defstruct DefSerializer :
  info:FileInfo|False
  name:Symbol
  entry-points:Tuple<Symbol>
  exps:Tuple<TopExp> with: (updater => sub-exps)

;============================================================
;================= Top Level Expressions ====================
;============================================================

;Abstract definition type.
public deftype TopExp

;Include a different file.
;Used during the initial parsing stage, but
;removed by 'process-includes'.
public defstruct IncludeFile <: TopExp :
  info:FileInfo
  filename:String

;Include an arbitrary Stanza expression.
public defstruct StanzaExp <: TopExp :
  info:FileInfo|False
  exp

;Atom reader and writer.
public defstruct DefAtom <: TopExp :
  info:FileInfo|False
  name:Symbol
  binder:Symbol
  type
  writer with: (updater => sub-writer)
  reader with: (updater => sub-reader)

;Simple type definition.
public defstruct DefType <: TopExp :
  info:FileInfo|False
  name:Symbol  
  type
  constructor: Constructor with: (updater => sub-constructor)

;Union reader and writer.
public defstruct DefUnion <: TopExp :
  info:FileInfo|False
  name:Symbol
  type
  branches: Tuple<UnionBranch> with: (updater => sub-branches)

;Combinator reader and reader.
public defstruct DefCombinator <: TopExp :
  info:FileInfo|False
  name:Symbol
  args:Tuple<CombinatorArg>
  binder:Symbol
  type
  writer with: (updater => sub-writer)
  reader with: (updater => sub-reader)

;Represents an argument for the combinator.
public defstruct CombinatorArg :
  info:FileInfo|False
  name:Symbol
  type-binder:Symbol

;Most general form of union branch.
public defstruct UnionBranch :
  info:FileInfo|False
  type
  constructor: Constructor with: (updater => sub-constructor)

;============================================================
;===================== Specifications =======================
;============================================================

;Represents a specification.
public deftype IOSpec <: Hashable & Equalable

;The name of a definition.
public defstruct NamedSpec <: IOSpec :
  name:Symbol
with:
  hashable => true
  equalable => true

;Cast a spec to a specific type.
public defstruct CastedSpec <: IOSpec :
  spec:IOSpec
  type

;Compute the hash disregarding Tokens in the s-exp.
defmethod hash (s:CastedSpec) :
  hash $ [spec(s), unwrap-all(type(s))]

;Compute equality disregarding Tokens in the s-exp.
defmethod equal? (a:CastedSpec, b:CastedSpec) :
  [spec(a), unwrap-all(type(a))] == [spec(b), unwrap-all(type(b))]

;Call a combinator.
public defstruct CombinatorSpec <: IOSpec :
  name:Symbol
  specs:Tuple<IOSpec>
with:
  hashable => true
  equalable => true

;============================================================
;======================= Constructors =======================
;============================================================

;Represents a construction specification.
;These are richer specifications that can only go
;in specific places (e.g. in a union).
public deftype Constructor :
  IOSpec <: Constructor

;Construct an enum object.
public defstruct EnumConstructor <: Constructor

;Construct a struct object
public defstruct StructConstructor <: Constructor :
  args:Tuple<StructField>

public defstruct StructField :
  name:Symbol
  spec:IOSpec

;============================================================
;=================== Special Expressions ====================
;============================================================

;Special expressions are used in bodies by the user.
public deftype SpecialExp

;Write an item using the given specification.
public defstruct WriteSpec <: SpecialExp :
  info:FileInfo|False
  spec:IOSpec with: (updater => sub-spec)
  item

;Read an item using the given specification.
public defstruct ReadSpec <: SpecialExp :
  info:FileInfo|False
  spec:IOSpec with: (updater => sub-spec)

;Notify an error occurred.
public defstruct NotifyError <: SpecialExp :
  info:FileInfo|False

;Retrieve the FastIOBuffer.
public defstruct ReifyBuffer <: SpecialExp :
  info:FileInfo|False

;============================================================
;==================== Printers ==============================
;============================================================

defmethod print (o:OutputStream, s:DefSerializer) :
  val o2 = IndentedStream(o)
  print(o, "defserializer %_ :" % [name(s)])
  lnprint(o2, "entry-points : (%,)" % [entry-points(s)])
  for e in exps(s) do :
    lnprint(o2, e)

defmethod print (o:OutputStream, e:TopExp) :
  match(e) :
    (e:IncludeFile) :
      print(o, "include %~" % [filename(e)])
    (e:StanzaExp) :
      print(o, exp(e))
    (e:DefAtom) :
      val o2 = IndentedStream(o)
      print(o, "defatom %_ (%_:%_) :" % [
        name(e), binder(e), type(e)])
      lnprint(o2, "writer:\n%_" % [Indented(LineWrapped(writer(e)))])
      lnprint(o2, "reader:\n%_" % [Indented(LineWrapped(reader(e)))])
    (e:DefType) :
      print(o, "deftype %_ (%_) : %_" % [name(e), type(e), constructor(e)])
    (e:DefUnion) :
      val o2 = IndentedStream(o)
      print(o, "defunion %_ (%_) :" % [name(e), type(e)])
      do(lnprint{o2, _}, branches(e))
    (e:DefCombinator) :
      val o2 = IndentedStream(o)
      print(o, "defcombinator %_ (%,) (%_:%_) :" % [
        name(e), args(e), binder(e), type(e)])
      lnprint(o2, "writer:\n%_" % [Indented(LineWrapped(writer(e)))])
      lnprint(o2, "reader:\n%_" % [Indented(LineWrapped(reader(e)))])

defmethod print (o:OutputStream, b:UnionBranch) :
  print(o, "%_: %_" % [type(b), constructor(b)])

defmethod print (o:OutputStream, a:CombinatorArg) :
  print(o, "%_:%_" % [name(a), type-binder(a)])

defmethod print (o:OutputStream, s:IOSpec) :
  match(s) :
    (s:NamedSpec) : print(o, name(s))
    (s:CastedSpec) : print(o, "%_ as %_" % [spec(s), type(s)])
    (s:CombinatorSpec) : print(o, "%_(%,)" % [name(s), specs(s)])

defmethod print (o:OutputStream, c:Constructor) :
  match(c) :
    (c:EnumConstructor) : print(o, "enum")
    (c:StructConstructor) : print(o, "(%,)" % [args(c)])
    (c:IOSpec) : fatal("Unreachable")

defmethod print (o:OutputStream, f:StructField) :
  print(o, "%_:%_" % [name(f), spec(f)])

defmethod print (o:OutputStream, e:SpecialExp) :
  match(e) :
    (e:WriteSpec) :
      print(o, "#write[%_](%_)" % [spec(e), item(e)])
    (e:ReadSpec) :
      print(o, "#read[%_]" % [spec(e)])
    (e:NotifyError) :
      print(o, "#error")
    (e:ReifyBuffer) :
      print(o, "#buffer")