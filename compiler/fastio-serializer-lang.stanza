;<doc>=======================================================
;==================== Serialization =========================
;============================================================

Example:

defserializer (buffer:FastIOBuffer) :

  include "otherspec.txt"

  Atoms provide a way to read and write known types.
  
  defatom lit (x:F) :
    writer :
      write(23)
    reader :
      read(buffer)

  Structures are a convenient way to define serializers
  for a defstruct type.

  defstruct mystruct (MyStruct) : (x:int, y:int)

  Unions are a convenient way to select different
  patterns to use based on their input type.

  defunion dtype (DType) :
    DByte: lit
    DLong|DFloat: literal
    DBot: types
    DArray: (x:int, y:int)

  Combinators are a convenient way to use other
  readers/writers to form a new one.

  defcombinator tuple (a:X, b:Y) (x:Either<X,Y>) :
    writer :
      #write[int](a)
      #write[int](b)
    reader :
      #read[int](a)
      #read[int](b)

  Seems slightly complicated, but it will eliminate the need to
  create closures for anything. Just straight code.
  
  defcombinator optional (item:X) (x:X|False) :
    writer :
      match(x) :
        (x:False) :
          #write[byte](0Y)
        (x:X) :
          #write[byte](1Y)
          #write[item](x)
    reader :
      switch(#read[byte]) :
        0Y : false
        1Y : #read[item]
        else : #read-error    
      
;============================================================
;=======================================================<doc>