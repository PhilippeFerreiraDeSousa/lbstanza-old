defpackage stz/macro-plugin :
  import core
  import collections
  import parser/syntax-package-registry
  import stz/core-macros
  import stz/fastio-runtime
  import stz/plugin-interface
  import stz/test-lang
  import stz/fastio-serializer-macros
  import stz/sexp-serializer

;The interface for communicating with the plugin.
val PLUGIN-INTERFACE = PluginInterface(SExpIO())

;The entry-point for performing macro-expansion.
extern defn macroexpand (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(macroexpand-sexp))

;Expand the given sexpression using the Stanza core
;macros.
defn macroexpand-sexp ([sexp, overlays]:[?, List<Symbol>]) -> ? :
  syntax-parse(`core, overlays, List(sexp), `exp, false)

;The entry-point for checking whether a syntax package exists.
extern defn check_syntax_package_exists (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(check-syntax-package-exists))

;Check whether the given syntax package exists.
defn check-syntax-package-exists (name:Symbol) -> True|False :
  syntax-package-exists?(name)