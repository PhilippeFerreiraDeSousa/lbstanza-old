defpackage stz/macro-plugin :
  import core
  import collections
  import parser/syntax-package-registry
  import stz/core-macros
  import stz/fastio-runtime
  import stz/plugin-interface
  import stz/test-lang
  import stz/fastio-serializer-macros
  import stz/sexp-serializer
  import stz/params
  import stz/sexp-checker

;The interface for communicating with the plugin.
val PLUGIN-INTERFACE = PluginInterface(SExpIO())

;============================================================
;============== Macroexpansion Entry Point ==================
;============================================================

;The entry-point for performing macro-expansion.
extern defn macroexpand (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(macroexpand-sexp))

;Expand the given sexpression using the Stanza core
;macros.
defn macroexpand-sexp ([sexp, overlays]:[?, List<Symbol>]) -> ? :
  val result = syntax-parse(`core, overlays, List(sexp), `exp, false)
  check-valid-sexp(result)
  result

;============================================================
;============== List Syntax Packages Entry Point ============
;============================================================

;The entry-point for retrieving the list of all syntax packages.
extern defn list_syntax_packages (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(list-syntax-packages))

;List all supported syntax packages.
defn list-syntax-packages (f:False) -> Tuple<Symbol> :
  syntax-packages()

;============================================================
;============== Add Compiler Flags Entry Point ==============
;============================================================

;The entry-point for adding all of the initial compiler flags.
extern defn add_compiler_flags (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(add-compiler-flags))

;Add all the compiler flags.
defn add-compiler-flags (flags:Tuple<Symbol>) -> False :
  do(add-flag, flags)