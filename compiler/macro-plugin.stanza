defpackage stz/macro-plugin :
  import core
  import collections
  import stz/core-macros
  import stz/fastio-runtime
  import stz/plugin-interface
  import stz/test-lang
  import stz/fastio-serializer-macros
  import stz/sexp-serializer

;The interface for communicating with the plugin.
val PLUGIN-INTERFACE = PluginInterface(SExpIO())

;The entry-point to the macro plugin.
extern defn macroexpand (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(macroexpand-sexp))

;Expand the given sexpression using the Stanza core
;macros.
defn macroexpand-sexp (sexp) -> ? :
  parse-syntax[core / #exp](List(sexp))