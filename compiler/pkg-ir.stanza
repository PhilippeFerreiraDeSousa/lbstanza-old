defpackage stz/pkg-ir :
  import core
  import collections

  ;All included IRs.
  import stz/asm-ir
  import stz/vm-ir
  import stz/el-ir
  import stz/dl-ir

  ;For STANZA-VERSION
  import stz/params

;============================================================
;=================== Structure ==============================
;============================================================

;Includes both unoptimized and optimized Pkg structures.
public deftype Pkg

;Unoptimized Pkg structure.
;- asm?: False if the assembly instructions were not deserialized.
;  This mode is used when using the REPL as the asm instructions
;  are not necessary.
;- datas?: False if the assembly instructions were not deserialized.
;  These datas are created during normalization of the VMPackage
;  for emission to assembly. 
public defstruct StdPkg <: Pkg :
  stanza-version:Tuple<Int> with: (default => STANZA-VERSION)
  vmp: VMPackage
  asm?: Tuple<Ins>|False
  datas?: Tuple<VMData>|False

;Optimized Pkg structure.
public defstruct FastPkg <: Pkg :
  stanza-version:Tuple<Int> with: (default => STANZA-VERSION)
  packageio: PackageIO with: (as-method => true)
  exps: Tuple<ETExp>

;============================================================
;==================== Accessors =============================
;============================================================

;Force access to the assembly instructions.
public defn asm (pkg:StdPkg) -> Tuple<Ins> :
  if asm?(pkg) is False :
    fatal("Assembly instructions not deserialized.")
  asm?(pkg) as Tuple<Ins>

;Force access to accompanying VMData for assembly instructions.
public defn datas (pkg:StdPkg) -> Tuple<VMData> :
  if datas?(pkg) is False :
    fatal("Assembly instructions and associated data not deserialized.")
  datas?(pkg) as Tuple<VMData>

;============================================================
;=================== Convenience ============================
;============================================================

;Retrieve the PackageIO of a Pkg
public defmulti packageio (pkg:Pkg) -> PackageIO

;Retrieve PackageIO of unoptimized Pkg.
defmethod packageio (pkg:StdPkg) -> PackageIO :
  packageio(vmp(pkg))

;Retrieve name of a package.
public defn name (pkg:Pkg) -> Symbol :
  package(packageio(pkg))

;Retrieve file-extension of a Pkg file.
public defn extension (p:Pkg) -> String :
  match(p) :
    (p:StdPkg) : ".pkg"
    (p:FastPkg) : ".fpkg"

;============================================================
;=================== Printers ===============================
;============================================================

defmethod print (o:OutputStream, p:Pkg) :
  match(p) :
    (p:StdPkg) :
      print(o, "Stanza version: %_" % [stanza-version(p)])
      lnprint(o, vmp(p))
      lnprint(o, "Instructions:")
      val o2 = IndentedStream(o)
      do(lnprint{o2, _}, asm(p))
      lnprint(o, "Datas:")
      do(lnprint{o2, _}, datas(p))
    (p:FastPkg) :
      print(o, "Stanza version: %_" % [stanza-version(p)])
      lnprint(o, packageio(p))
      lnprint(o, "Instructions:")
      val o2 = IndentedStream(o)
      do(lnprint{o2, _}, exps(p))