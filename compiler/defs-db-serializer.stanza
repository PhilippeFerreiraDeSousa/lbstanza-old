#use-added-syntax(fastio-serializer)
defpackage stz/defs-db-serializer :
  import core
  import collections
  import stz/defs-db-ir
  import stz/serializer
  import stz/visibility
  import stz/package-stamps
  import stz/fastio-buffer
  import stz/fastio-runtime

;============================================================
;==================== Entry Point ===========================
;============================================================

;Read a definitions database from a file.
public defn read-definitions-database (filename:String) -> DefinitionsDatabase : 
  read-from-file(filename,
                 DefsDbSerializer(),
                 deserialize-definitions-database)

;Write a definitions database to a file.
public defn write-definitions-database (filename:String, db:DefinitionsDatabase) -> False :
  write-to-file(filename,
                DefsDbSerializer(),
                serialize-definitions-database,
                db)

;============================================================
;================== Serializer Definition ===================
;============================================================

defserializer DefsDbSerializer () :
  entry-points: (definitions-database)

  ;Include all the primitive serializers from this file.
  include "serializer-primitives.spec"

  deftype definitions-database (DefinitionsDatabase) :
    reserved-words:tuple(string)
    packages:tuple(package-definitions)
    unresolved-symbols:tuple(unresolved-symbol)

  deftype package-definitions (PackageDefinitions) :
    name:symbol
    stamp:pkgstamp
    source:src-def-src
    imports:tuple(package-import)
    definitions:tuple(definition)

  deftype unresolved-symbol (UnresolvedSymbol) :
    symbol:symbol
    info:opt(info)

  deftype definition (Definition) :
    name:symbol
    file-info:info
    kind:src-def-kind
    visibility:visibility
    annotation?:opt(annotation)
    documentation?:opt(string)

  deftype package-import (PackageImport) : 
    name:symbol
    prefixes:tuple(package-import-prefix)

  deftype package-import-prefix (PackageImportPrefix) : 
    names:opt(tuple(symbol))
    prefix:string

  deftype pkgstamp (PackageStamp) :
    location:pkglocation
    source-hashstamp:opt(bytearray)
    pkg-hashstamp:opt(bytearray)

  deftype pkglocation (PkgLocation) :
    package:symbol
    source-file:opt(string)
    pkg-file:opt(string)
    read-pkg?:bool

  deftype fn-arg-annotation (FnArgAnnotation) : 
    name?:opt(symbol)
    type?:opt(symbol)
  
  defunion annotation (DefinitionAnnotation) : 
    DefnAnnotation : 
      targs:tuple(symbol), 
      args:tuple(fn-arg-annotation)
      return-type?:opt(symbol)

  defunion visibility (Visibility) :
    Private: enum
    Protected: enum
    Public: enum

  defunion src-def-src (SrcDefinitionSource) :
    PkgDefinition: enum
    SrcDefinition: enum

  defunion src-def-kind (SrcDefinitionKind) :
    SrcDefUnknown: enum
    SrcDefMulti : enum
    SrcDefMethod : enum
    SrcDefFunction : enum
    SrcDefVariable: enum
    SrcDefType: enum
    SrcDefPackage: enum  

