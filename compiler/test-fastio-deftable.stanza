defpackage stz/test-fastio-deftable :
  import core
  import collections
  import stz/fastio-serializer-lang-parser
  import stz/fastio-serializer-lang
  import stz/fastio-deftable

defn parse-file (filename:String) :
  val forms = reader/read-file(filename)
  parse-syntax[fastio-serializer-lang / #defserializer](forms)

var table:DefTable

defn main () :
  val filename = command-line-arguments()[1]
  val parsed = parse-file(filename)
  table = DefTable(parsed)

  val lit = NamedSpec(`lit)
  val tuple-lit = CombinatorSpec(`tuple, [lit])
  val optional-lit = CombinatorSpec(`optional, [lit])
  val tuple-optional-lit = CombinatorSpec(`tuple, [optional-lit])

  defn print-type (s:IOSpec) :
    println("Type of %_: %_" % [s, type(table,s)])

  defn print-size (name:Symbol) :
    println("Size of %_: %_" % [name, size(table,name)])
  
  print-type(lit)
  print-type(tuple-lit)
  print-type(optional-lit)
  print-type(tuple-optional-lit)

  print-size(`int)
  print-size(`int2)
  print-size(`int3)
  print-size(`byte)
  print-size(`lit)
  print-size(`myunion)
  print-size(`myunion2)
  print-size(`mystruct)
  print-size(`mystruct3)

set-command-line-arguments(["parse" "testdata/serializer-lang-ir.txt"])
main()