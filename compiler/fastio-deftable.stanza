defpackage stz/fastio-deftable :
  import core
  import collections
  import stz/fastio-serializer-lang with:
    prefix(SizeSpec) => Lang
  import stz/fastio-size

;============================================================
;======================== API ===============================
;============================================================

;Represents a table of definitions.
public deftype DefTable

;Retrieve the type of a specification.
public defmulti type (t:DefTable, s:IOSpec) -> ?

;Retrieve the size of a specification.
public defmulti size (t:DefTable, c:Constructor) -> SizeSpec

;Retrieve the size of a definition.
public defmulti size (t:DefTable, name:Symbol) -> SizeSpec

;Retrieve the definition with the given name.
public defmulti get (t:DefTable, name:Symbol) -> TopExp

;Add a new definition to the DefTable. 
public defmulti add (t:DefTable, e:TopExp) -> False

;============================================================
;=================== Implementation =========================
;============================================================

;Create the DefTable for a serializer.
public defn DefTable (s:DefSerializer) -> DefTable :

  ;Generate table of definitions.
  val table = HashTable<Symbol,TopExp>()

  ;Generate table of size specifications.
  val size-table = HashTable<Symbol,SizeSpec>()

  ;Add the given expression to the table.
  defn add-to-table (e:TopExp) :
    match(e) :
      (e:DefAtom) : table[name(e)] = e
      (e:DefType) : table[name(e)] = e
      (e:DefUnion) : table[name(e)] = e
      (e:DefCombinator) : table[name(e)] = e
      (e) : false

  ;Compute size of a spec.
  defn spec-size (s:Constructor) -> SizeSpec :
    match(s) :
      (c:EnumConstructor) :
        ConstantSize(0)
      (c:StructConstructor) :
        ;Compute the field sizes of structs.
        val field-sizes = map(spec-size{spec(_)}, args(c))
        val result:StructSize = 
          if all?({_ is ConstantSize}, field-sizes) :
            val sizes = seq(size, field-sizes as Tuple<ConstantSize>)
            ConstantSize(sum(sizes))
          else if all?({_ is ConstantSize|ComputableSize|ComputeFromChildren}, field-sizes) :
            ComputeFromChildren()
          else :
            SkipChildren()
        result
      (s:NamedSpec) :
        set?(size-table, name(s),
          fn () :
            spec-size(table[name(s)]))
      (s:CastedSpec) :
        spec-size(spec(s))
      (s:CombinatorSpec) :
        set?(size-table, name(s),
          fn () :
            spec-size(table[name(s)]))

  ;Compute the size of a top-level definition.
  defn spec-size (e:TopExp) -> SizeSpec :
    match(e) :
      (e:DefAtom) :
        ;Compute the result as a AtomSize
        val result:AtomSize = 
          if constant-size?(e) :
            match(int?(skipper(e))) :
              (size:Int) : ConstantSize(size)
              (f:False) : ComputableSize(skipper(e))
          else : SkipExp(skipper(e))
        result
      (e:DefType) :
        spec-size(constructor(e))
      (e:DefUnion) :
        ;Compute the branch sizes.
        val branch-sizes = map(spec-size{constructor(_)}, branches(e))
        val result:UnionSize =
          ;If all the branches have constant size, then there's a shot
          ;we can compute a constant size for the union.
          if all?({_ is ConstantSize}, branch-sizes) :
            val sizes = seq(size, branch-sizes as Tuple<ConstantSize>)
            ;If there are no branches at all, then size is 0.
            if empty?(sizes) :
              ConstantSize(0)              
            else :
              ;If all the sizes are the same, then return that as the size
              ;of the union.
              val size0 = next(sizes)
              if all?({_ == size0}, sizes) :
                ConstantSize(size0)
              ;Otherwise, just skip children.
              else :
                SkipChildren()
          ;Otherwise skip children.
          else :
            SkipChildren()
        result
      (e:DefCombinator) :
        SkipExp(skipper(e))

  ;Lookup the type of a spec
  defn spec-type (s:IOSpec) -> ? :
    match(s) :
      (s:NamedSpec) :
        match(table[name(s)]) :
          (e:DefAtom|DefType|DefUnion) : type(e)
          (e:DefCombinator) : fatal("Direct reference to DefCombinator.")
      (s:CastedSpec) :
        type(s)
      (s:CombinatorSpec) :
        val arg-types = map(spec-type, specs(s))
        val c = table[name(s)] as DefCombinator
        sub-arg-types(type(c), args(c), arg-types)

  ;Helper: Given the concrete types for the arguments,
  ;return the final type of the combinator.
  defn sub-arg-types (type, args:Tuple<CombinatorArg>, arg-types:Tuple) -> ? :
    val type-table = to-hashtable<Symbol,?> $
      for (arg in args, type in arg-types) seq :
        type-binder(arg) => type
    sub-in-form(type, type-table)

  ;Return the structure
  do(add-to-table, exps(s))
  new DefTable :
    defmethod size (this, name:Symbol) :
      spec-size(NamedSpec(name))
    defmethod size (this, c:Constructor) :
      spec-size(c)
    defmethod type (this, s:IOSpec) :
      spec-type(s)
    defmethod get (this, name:Symbol) :
      table[name]
    defmethod add (this, e:TopExp) :
      add-to-table(e)

;Perform substitutions in given form.
defn sub-in-form (x, table:HashTable<Symbol,?>) -> ? :
  defn recur (x) -> ? :
    match(x) :
      (x:Token) : Token(recur(item(x)), info(x))
      (x:List) : map(recur, x)
      (x:Symbol) : get?(table, x, x)
      (x) : x
  recur(x)

;Return the integer represented by a form if it does.
defn int? (form) -> Int|False :
  match(unwrap-token(form)) :
    (x:Int) : x
    (x) : false