defpackage stz/test-framework :
  import core
  import collections
  import arg-parser

;============================================================
;=================== Testing Structure ======================
;============================================================

protected deftype DefTest
protected defmulti name (t:DefTest) -> String
protected defmulti run (t:DefTest) -> ?
protected defmulti tags (t:DefTest) -> List<Symbol>

;============================================================
;====================== Assertion ===========================
;============================================================

protected deftype Assertion
protected defmulti run (a:Assertion) -> True|False
protected defmulti description (a:Assertion) -> String|False
protected defmulti info (a:Assertion) -> FileInfo|False
protected defmulti values (a:Assertion) -> Tuple<AssertionValue>

protected defstruct AssertionValue :
  description: String
  value: ?

;============================================================
;================ Command-line Interface ====================
;============================================================

var TESTING-STATE:TestingState|False = false

defn init-testing-state () :
  ;All flag definitions
  val flags = [
    Flag("tagged", AtLeastOneFlag, OptionalFlag,
      "If given, only the tests with the given tags will be executed.")
    Flag("not-tagged", AtLeastOneFlag, OptionalFlag,
      "If given, the tests with the given tags will not be executed.")
    Flag("log", OneFlag, OptionalFlag,
      "The directory to output the test results to.")]

  val run-msg = "Run the tests using the Stanza testing \
  framework."
  ;Grab the required parameters.
  defn run (cmd-args:CommandArgs) :
    defn to-symbols? (f:False) : f
    defn to-symbols? (xs:Seqable<String>) : to-list(seq(to-symbol,xs))
    val tests = to-list(args(cmd-args)) when not empty?(args(cmd-args))
    val tags = to-symbols?(get?(cmd-args, "tagged", false))
    val not-tags = to-symbols?(get?(cmd-args, "not-tagged", false))
    val logger? = Logger(cmd-args["log"]) when flag?(cmd-args, "log")
    TESTING-STATE = TestingState(logger?, tests, tags, not-tags)

  ;Command definition
  val run-cmd = Command("run",
                        ZeroOrMoreArg, "the names of the tests to run.",
                        flags,
                        run-msg, run)
  simple-command-line-cli(false, [run-cmd], "run", true, false)

defn testing-state () -> TestingState :
  if TESTING-STATE is False :
    init-testing-state()
  TESTING-STATE as TestingState

;============================================================
;======================== Run Test ==========================
;============================================================

defstruct TestingState :
  num-tests: Int with: (init => 0, setter => set-num-tests)
  num-passed: Int with: (init => 0, setter => set-num-passed)
  num-skipped: Int with: (init => 0, setter => set-num-skipped)
  logger: Logger|False
  tests: List<String>|False
  tags: List<Symbol>|False
  not-tags: List<Symbol>|False

deftype RunTestResult
defstruct SkipTest <: RunTestResult
defstruct RunTest <: RunTestResult
defstruct IgnoreTest <: RunTestResult

defn run-test? (t:DefTest) :
  val s = testing-state()

  ;Compute whether the given arguments indicate to include
  ;the test.
  val args-indicate-include = match(tests(s)) :
    (ts:List<String>) : contains?(ts, name(t))
    (f:False) : true
  
  ;Compute whether the given tags indicate to include
  ;the test.
  val tags-indicate-include = match(tags(s)) :
    (ts:List<Symbol>) : for tag in ts any? : contains?(tags(t), tag)
    (f:False) : true

  ;Compute whether the exclude tags indicate to include
  ;the test.
  val not-tags-indicate-include = match(not-tags(s)) :
    (ts:List<Symbol>) : for tag in ts none? : contains?(tags(t), tag)
    (f:False) : true

  ;Combine results
  if args-indicate-include :
    if tags-indicate-include and not-tags-indicate-include : RunTest()
    else : SkipTest()
  else : IgnoreTest()

protected defn run-test (t:DefTest) :
  ;Reporting errors
  val out = STANDARD-OUTPUT-STREAM
  val out2 = IndentedStream(STANDARD-OUTPUT-STREAM)

  match(run-test?(t)) :
    (result:IgnoreTest) :
      false
    (result:SkipTest) :
      val test-num = num-tests(testing-state()) + 1
      set-num-tests(testing-state(), num-tests(testing-state()) + 1)
      set-num-skipped(testing-state(), num-skipped(testing-state()) + 1)
      println(out, "[Test %_] %_ [SKIPPED]\n" % [test-num, name(t)])
    (result:RunTest) :          
      ;Print out test label
      val test-num = num-tests(testing-state()) + 1
      set-num-tests(testing-state(), num-tests(testing-state()) + 1)
      print(out, "[Test %_] %_ " % [test-num, name(t)])     

      ;Print new line if log is not captured.
      defn newline-if-not-logged () :
        if logger(testing-state()) is False :
          print(out, "\n")
          
      ;Save the output log
      defn save-output-log () :
        val logger = logger(testing-state())
        match(logger:Logger) :
          if anything-logged?(logger) :
            val path = save-log(logger, name(t))
            println(out2, "Log saved to %_" % [path])

      ;Redirect output if a logger is present
      defn with-logger? (body:() -> ?, l:Logger|False) :
        match(l:Logger) : with-output-to-buffer(body, l)
        else : body()

      ;Executed upon assertion failure
      defn handle-assertion (a:Assertion) :
        println(out, "[FAIL]")
        println(out2, a)
        save-output-log()
        println(out, "")

      ;Executed upon uncaught exception
      defn handle-exception (e:Exception) :
        println(out, "[FAIL]")
        println(out2, "Uncaught Exception: %_" % [e])
        save-output-log()
        println(out, "")

      ;Executed upon fatal error
      defn handle-error () :
        println(out, "[FAIL]")
        println(out2, "Fatal Error.")
        save-output-log()
        println(out, "")

      ;Executed when test completes successfully
      defn handle-success () :
        println(out, "[PASS]")
        save-output-log()
        set-num-passed(testing-state(), num-passed(testing-state()) + 1)
        println(out, "")

      ;Launch test
      newline-if-not-logged()
      within execute-with-error-handler(handle-error) :
        within with-exception-handler(handle-exception) :
          within with-assertion-handler(handle-assertion) :
            within with-logger?(logger(testing-state())) :
              run(t)
              handle-success()

;============================================================
;================== Assertion Handler =======================
;============================================================

;The default assertion handler runs when not in a deftest.
;This happens normally when working by loading in some test code
;into the REPL, and uncommenting the deftest. 
defn default-assertion-handler (a:Assertion) :
  println(STANDARD-ERROR-STREAM, "[FAIL]")
  println(IndentedStream(STANDARD-ERROR-STREAM), a)
  fatal("Assertion failed outside of deftest.")

var CURRENT-ASSERTION-HANDLER:Assertion -> ? = default-assertion-handler

defn with-assertion-handler (body:() -> ?, handler:Assertion -> ?) :
  label break :
    defn assertion-failed (a:Assertion) :
      handler(a)
      break()
    let-var CURRENT-ASSERTION-HANDLER = assertion-failed :
      body()
    
protected defn assert (a:Assertion) :
  if not run(a) :
    CURRENT-ASSERTION-HANDLER(a)

defmethod print (o:OutputStream, a:Assertion) :
  val info-str = "" when info(a) is False
            else "%_: " % [info(a)]
  val name-str = "" when description(a) is False
            else " \"%_\"" % [description(a)]
  print(o, "%_Assertion%_ failed." % [info-str, name-str])
  val o2 = IndentedStream(o)
  do(lnprint{o2, _}, values(a))

defmethod print (o:OutputStream, v:AssertionValue) :
  print(o, "%_ = %_" % [description(v), value(v)])

;============================================================
;====================== Logger ==============================
;============================================================

deftype Logger <: Resource
defmulti with-output-to-buffer (body:() -> ?, l:Logger) -> False
defmulti save-log (l:Logger, file:String) -> String
defmulti anything-logged? (l:Logger) -> True|False

defn Logger (dir-name:String) :
  ;Track directory name
  var dir-created?:True|False = false
  defn create-dir-if-necessary () :
    if not dir-created? :
      dir-created? = true
      create-dir(dir-name)

  ;Keep buffer file
  var buffer-file-name:String|False = false
  var buffer-file:RandomAccessFile|False = false
  defn create-buffer-file-if-necessary () :
    if buffer-file is False :
      buffer-file-name = to-string("buffer%_.dat" % [current-time-ms()])
      buffer-file = RandomAccessFile(buffer-file-name as String, true)
    buffer-file as RandomAccessFile

  ;Execute body with output to a buffer
  defn with-output-to-buffer (body:() -> ?) :
    val buffer = create-buffer-file-if-necessary()
    set-length(buffer, 0L)
    val out = output-stream(buffer)
    with-output-stream(out, fn () :
      with-error-stream(out, body))
    flush(out)

  ;Save the buffer
  defn save-buffer-as (path:String) :
    ;Get the current name of the buffer
    val old-path = buffer-file-name as String
    ;Close the file
    close(buffer-file as RandomAccessFile)
    buffer-file = false
    buffer-file-name = false
    ;Move the buffer to the given path
    rename-file(old-path, path)    
 
  ;Delete the buffer if one was created
  defn delete-buffer-file-if-necessary () :
    if buffer-file is-not False :
      delete-file(buffer-file-name as String)

  ;Track file name
  val file-count = HashTable<String,Int>(0)
  defn rename (file:String) :
    val index = update(file-count, {_ + 1}, file)
    if index == 1 : file
    else : "%_$%_" % [file, index]

  ;Create Logger
  new Logger :
    defmethod free (this) :
      delete-buffer-file-if-necessary()
    defmethod with-output-to-buffer (body:() -> ?, this) :
      with-output-to-buffer(body)
    defmethod anything-logged? (this) :
      match(buffer-file:RandomAccessFile) :
        position(buffer-file) > 0L
    defmethod save-log (this, file:String) :
      val filename = rename(sanitize-filename(file))
      val path = to-string("%_/%_.log" % [dir-name, filename])
      create-dir-if-necessary()
      save-buffer-as(path)
      path

defn attach-filename-suffix (filename:String, suffix) :
  match(last-index-of-char(filename, '.')) :
    (i:Int) :
      string-join([filename[0 to i], suffix, filename[i to false]])
    (f:False) :
      string-join([filename, suffix])

defn sanitize-filename (s:String) :
  defn acceptable? (c:Char) :
    letter?(c) or digit?(c) or
    (c == '.') or
    (c == '_') or
    (c == '-') or
    (c == '#') or
    (c == '$') or
    (c == '@') or
    (c == '%')

  if all?(acceptable?, s) :
    s
  else :
    String $ for c in s seq :
      c when acceptable?(c) else '-'

;============================================================
;====================== Final Report ========================
;============================================================

protected defn print-test-report (exit-on-fail?:True|False) :
  val s = testing-state()
  val num-failed = num-tests(s) - num-passed(s) - num-skipped(s)
  println(STANDARD-OUTPUT-STREAM, "Tests Finished: %_/%_ tests passed. %_ tests skipped. %_ tests failed." % [
    num-passed(s), num-tests(s), num-skipped(s), num-failed])
  match(logger(s)) :
    (l:Logger) : free(l)
    (f:False) : false
  if exit-on-fail? and num-failed > 0 :
    exit(-1)