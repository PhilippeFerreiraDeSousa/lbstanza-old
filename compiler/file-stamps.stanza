defpackage stz/file-stamps :
   import core
   import collections
   import core/sha256

;Represents the hash information of an existing file.
;Stores its filename, and its SHA256 hash.
public defstruct FileStamp <: Hashable & Equalable :
  filename: String
  hashstamp: ByteArray

;Compute the filestamp of the given file.
;May throw an exception if the file does not exist.
public defn filestamp (filename:String) -> FileStamp :
  val path = resolve-path!(filename)
  val hashstamp = sha256-hash-file(filename)
  FileStamp(path as String, hashstamp)

defmethod equal? (a:FileStamp, b:FileStamp) :
  filename(a) == filename(b) and
  hash-equal?(hashstamp(a), hashstamp(b))

defmethod hash (a:FileStamp) :
  hash $ [filename(a), hash-hash(hashstamp(a))]

defmethod print (o:OutputStream, s:FileStamp) :
  print(o, "%~ (%_)" % [filename(s), hashstamp(s)])

;Implement content-equality of two byte arrays.
public defn hash-equal? (a:ByteArray|False, b:ByteArray|False) -> True|False :
  match(a,b) :
    (a:ByteArray, b:ByteArray) :
      length(a) == length(b) and
      all?(equal?, a, b)
    (a:False, b:False) : true
    (a, b) : false

;Return a hash of the bytearray that is useful
;for checking its contents.
public defn hash-hash (a:ByteArray) -> Int :
  var i = 1
  for b in a do :
    i = (7 * i) + to-int(b)
  i