#use-added-syntax(fastio-serializer)
defpackage stz/sexp-serializer :
  import core
  import collections
  import stz/fastio-buffer
  import stz/fastio-runtime

;============================================================
;==================== Serializer API ========================
;============================================================

;A serializer for S-expressions.
public deftype SExpSerializer

;Serialize an s-expression to a file.
public defmulti serialize-sexp (s:SExpSerializer, filename:String, sexp) -> False

;Deserialize an s-expression from a file.
public defmulti deserialize-sexp (s:SExpSerializer, filename:String) -> ?

;============================================================
;===================== Implementation =======================
;============================================================

public defn SExpSerializer () :

  ;Create the buffer serializer.
  val serializer = SExpBufferSerializer()

  new SExpSerializer :
    defmethod serialize-sexp (this, filename:String, sexp) :
      write-to-file(filename,
                    serializer,
                    serialize-sexp,
                    sexp)

    defmethod deserialize-sexp (this, filename:String) :
      read-from-file(filename,
                     serializer,
                     deserialize-sexp)

;============================================================
;================== Serializer Definition ===================
;============================================================

;Definition of the S-Expression serializer.
defserializer SExpBufferSerializer () :
  ;Start from the sexp definition.
  entry-points: (sexp)

  ;Include the primitives.
  include "serializer-primitives.spec"

  ;Definition of S-expression.
  defunion sexp (?) :
    Char: char
    Byte: byte
    Int: int
    Long: long
    Float: float
    Double: double
    String: string
    GenSymbol: gensymbol
    StringSymbol: symbol as StringSymbol
    True|False: bool
    List: list(sexp)
    Token: (item:sexp, info:info)

  ;Table of previously deserialized GenSymbols.
  val generated-symbols = HashTable<GenSymbolRecord,GenSymbol>()
  
  ;Serializer for generated symbols.
  ;Ensures that symbols are unique once read in, and
  ;that the same symbol on the source side maps to the
  ;same symbol on the destination side.
  defatom gensymbol (s:GenSymbol) :
    writer :
      #write[int](id(s))
      #write[string](name(s))
    reader :
      val id = #read[int]
      val name = #read[string]
      set?(generated-symbols,
           GenSymbolRecord(id, name)
           fn () :
             gensym(name))
    skip :
      #skip[int]
      #skip[string]

;Simple record to represent whether something is the same
;GenSymbol or not.
defstruct GenSymbolRecord <: Equalable & Hashable :
  id:Int
  name:String
with:
  hashable => true
  equalable => true