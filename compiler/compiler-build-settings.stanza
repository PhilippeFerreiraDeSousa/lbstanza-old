defpackage stz/compiler-build-settings :
  import core
  import collections

;============================================================
;============== Datastructure Definition ====================
;============================================================

;Represents the full set of input options for starting
;a Stanza compilation job. 
public defstruct BuildSettings :
  inputs: BuildInputs with: (updater => sub-inputs)
  vm-packages: Tuple<String|Symbol> with: (updater => sub-vm-packages)
  platform: Symbol|False with: (updater => sub-platform)
  assembly: AsmFile|False
  output: String|False with: (updater => sub-output)
  external-dependencies: String|False
  pkg-dir: String|False
  optimize?: True|False
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
  flags: Tuple<Symbol>
  macro-plugins: Tuple<String>
with:
  printer => true

;Abstract type representing the different types of
;build input options.
public deftype BuildInputs

;Case: User explicitly chooses which files/packages to compile.
;- names: Either the stanza input file, or the stanza package name.
;- original-target: If these build packages are computed by looking
;  up the build target in a .proj file, then this holds the original
;  name of the build target.
public defstruct BuildPackages <: BuildInputs :
  names: Tuple<String|Symbol>
  original-target: Symbol|False with: (default => false)
with:
  printer => true

;Case: User indicates to build a specific build target that has
;been specified within a .proj file.
;- target: The name of the file.
public defstruct BuildTarget <: BuildInputs :
  target: Symbol
with:
  printer => true

;Represents the name of the assembly file for holding the
;output of the compilation.
;- auto-generated?: If true, then this assembly file was not
;  explicitly requested by the user, and instead was automatically
;  generated.
public defstruct AsmFile :
  filename: String
  auto-generated?: True|False
with:
  printer => true

;============================================================
;======================= Conditions =========================
;============================================================

;This ensures that the BuildSettings was correctly computed
;and ready to use as input for compilation. 
public defn ensure-ready-for-compilation! (s:BuildSettings) -> False :
  ;Requirements:
  ;1. Build inputs is BuildPackages, not BuildTarget.
  ;2. Build platform is known.
  ;3. If output executable is requested, then assembly settings is known.
  ;4. If external dependencies is requested, then either
  ;    assembly/output executable is requested.

  ;1. Build inputs is BuildPackages, not BuildTarget.
  if inputs(s) is-not BuildPackages :
    fatal("Input is not BuildPackages.")
  ;2. Build platform is known.
  if platform(s) is False :
    fatal("Build platform is unknown.")
  ;3. If output executable is requested, then assembly settings is known.
  if output(s) is-not False :
    if assembly(s) is False :
      fatal("Assembly settings are unknown.")
  ;4. If external dependencies is requested, then either
  ;    assembly/output executable is requested.
  if external-dependencies(s) is-not False :
    if assembly(s) is False and output(s) is False :
      fatal("External dependencies requires either assembly or output executable.")
  