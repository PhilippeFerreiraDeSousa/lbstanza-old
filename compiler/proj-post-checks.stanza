defpackage stz/proj-post-checks :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors

;This pass ensures that all the post-normalized values
;are appropriate in the given file.

public defn post-normalization-checks (f:ProjFileS0) -> ProjFileS0 :
  val errors = Vector<ProjFileError>()
  defn scan (stmt:ProjStmt) :
    match(stmt:IncludedStmtsS0) :
      do(scan, stmts(stmt))
    else :
      check(stmt, errors)
  throw-proj-file-errors?(errors)
  f

;============================================================
;================ Check Individual Statement ================
;============================================================

;Check the given project statement.
;Push any detected errors to the given buffer.
defn check (stmt:ProjStmt, errors:Vector<ProjFileError>) -> False :

  ;==========================================================
  ;================== Checking Helpers ======================
  ;==========================================================
  ;If the value v is not of type t then push a new error
  ;to the errors buffer.

  defn ensure-type (v:ProjValue, t:ValueType) -> False :
    match(v) :
      (v:ProjValues) :
        if single?(t) :
          val msg = "Expected %_ here." % [description(t)]
          add(errors, ProjFileError(info(v), to-string(msg)))
        else :
          for v in values(v) do :
            ensure-type(v, t)
      (v:CommandString) :
        ensure-type(value(v), t)
      (v:FilePath) :
        ensure-type(value(v), t)
      (v:AtomValue) :
        if not typeof?(v, atom-type(t)) :
          val msg = "Expected %_ here." % [description(t)]
          add(errors, ProjFileError(info(v), to-string(msg)))          

  defn ensure-type (v:Maybe<ProjValue>, t:ValueType) -> False :
    if not empty?(v) :
      ensure-type(value!(v), t)

  ;==========================================================
  ;================== Type Shorthands =======================
  ;==========================================================
  val single-string = ValueType(StringType,true)
  val multiple-strings = ValueType(StringType,false)
  val single-symbol = ValueType(SymbolType,true)
  val multiple-symbols = ValueType(SymbolType,false)
  val multiple-stanza-inputs = ValueType(StanzaInputType,false)

  ;==========================================================
  ;=========== Dispatch Based Upon Statement Type ===========
  ;==========================================================
  match(stmt) :
    (stmt:DefinedInStmtS0) :
      ensure-type(filename(stmt), single-string)
    (stmt:PackagesDefinedInStmtS0) :
      ensure-type(filename(stmt), single-string)
    (stmt:RequiresStmtS0) :
      ensure-type(ccfiles(stmt), multiple-strings)
      ensure-type(ccflags(stmt), multiple-strings)
    (stmt:ImportWhenStmtS0) :
      ensure-type(dependencies(stmt), multiple-symbols)
    (stmt:CompileStmtS0) :
      ensure-type(name-value(stmt), single-string)
      ensure-type(dependencies(stmt), multiple-strings)
      ensure-type(commands(stmt), multiple-strings)
    (stmt:BuildStmtS0) :
      ensure-type(inputs(stmt), multiple-stanza-inputs)
      ensure-type(supported-vm-packages(stmt), multiple-stanza-inputs)
      ensure-type(pkg(stmt), single-string)
      ensure-type(output(stmt), single-string)
      ensure-type(assembly(stmt), single-string)
      ensure-type(external-dependencies(stmt), single-string)
      ensure-type(ccfiles(stmt), multiple-strings)
      ensure-type(ccflags(stmt), multiple-strings)
      ensure-type(flags(stmt), multiple-symbols)
    (stmt:SyntaxPackagesDefinedInStmtS0) :
      ensure-type(filename(stmt), single-string)
    (stmt:VarStmtS0) :
      false

;============================================================
;=================== Type Specifiers ========================
;============================================================

;Represents the type of a field.
;- single?: True if the field must resolve to a single atom.
defstruct ValueType :
  atom-type:AtomType
  single?:True|False

;The different atomic types that we support.
defenum AtomType :
  StringType
  SymbolType
  StanzaInputType

;Returns a human-readable description of the type.
;If single? is true, should return something like: "a single string".
;If single? is false, should return something like: "a string".
;Used to generate sentences like: "Expected a single string here."
defn description (t:ValueType) -> String :
  val atom-description = switch(atom-type(t)) :
    StringType: "string"
    SymbolType: "symbol"
    StanzaInputType: "Stanza file or package"
  if single?(t) : to-string("a single %_" % [atom-description])
  else : to-string("a %_" % [atom-description])

;Return true if the given atomic value is an instance
;of the given type.
defn typeof? (v:AtomValue, t:AtomType) -> True|False :
  switch(t) :
    StringType :
      value(v) is String
    SymbolType :
      value(v) is Symbol
    StanzaInputType :
      match(value(v)) :
        (value:String) : any?(suffix?{value, _}, [".stanza" ".pkg" ".fpkg"])
        (value:Symbol) : true