defpackage stz/aux-file :
  import core
  import core/sha256
  import collections
  import stz/params
  import stz/proj-ir
  import stz/proj-utils
  import stz/package-stamps
  import stz/aux-file-errors
  import stz/aux-file-serializer
  import stz/file-stamps

;============================================================
;==================== Aux File Definition ===================
;============================================================

public deftype AuxFile
public defmulti key? (f:AuxFile, r:PkgRecord|ExternalFileRecord) -> True|False
public defmulti target-up-to-date? (f:AuxFile, target:Symbol, settings:BuildRecordSettings, proj:ProjFile) -> True|False
public defmulti add (f:AuxFile, r:AuxRecord) -> False
public defmulti save (f:AuxFile) -> False

public defn AuxFile (path:String) -> AuxFile :
  val records = AuxRecords(STANZA-VERSION, []) when not file-exists?(path)
           else read-aux-records(path)
  val new-records = Vector<AuxRecord>()
  new AuxFile :
    defmethod key? (this, r:PkgRecord|ExternalFileRecord) :
      contains?(filter-by<PkgRecord|ExternalFileRecord>(/records(records)), r)
    defmethod target-up-to-date? (this, target:Symbol, settings:BuildRecordSettings, proj:ProjFile) :
      defn main () :
        val r = matching-record()
        match(r:BuildRecord) :
          matches-settings?(r) and
          record-up-to-date?(r) and
          matching-isolate?(r)
      defn matching-record () :
        for r in filter-by<BuildRecord>(/records(records)) find :
          /target(r) == target
      defn matches-settings? (r:BuildRecord) :
        /settings(r) == settings
      defn record-up-to-date? (r:BuildRecord) :
        all?(up-to-date?, packages(r)) and
        all?(up-to-date?, files(r))
      defn matching-isolate? (r:BuildRecord) :
        val isolate* = isolate-stmts(proj, packages(proj-isolate(r)))
        isomorphic?(proj-isolate(r), isolate*)
      main()
    defmethod add (this, r:AuxRecord) :
      add(new-records, r)
    defmethod save (this) :
      val records* = combine(records, new-records)
      write-aux-records(path, records*)

public defn AuxFile () :
  AuxFile(system-filepath(StanzaAuxFile))

;============================================================
;==================== Utilities =============================
;============================================================

public defn delete-aux-file () :
  val name = system-filepath(StanzaAuxFile)
  delete-file(name) when file-exists?(name)

;============================================================
;=================== Check Up-to-Date =======================
;============================================================

defn hashstamp? (file:String|False) :
  match(file:String) :
    sha256-hash-file(file) when file-exists?(file)

defn up-to-date? (s:FileStamp) :
  hash-equal?(hashstamp?(filename(s)), hashstamp(s))

;============================================================
;===================== Aux File Structure ===================
;============================================================

public defstruct AuxRecords :
  stanza-version:Tuple<Int>
  records: Tuple<AuxRecord>
with:
  printer => true

public deftype AuxRecord

public defstruct PkgRecord <: AuxRecord & Hashable & Equalable :
  package: Symbol
  filestamp: FileStamp
  source-stamp: FileStamp
  flags: Tuple<Symbol>
  optimize?: True|False
with:
  constructor => #PkgRecord
  printer => true

public defstruct BuildRecord <: AuxRecord :
  target: Symbol
  packages: Tuple<PackageStamp>
  files: Tuple<FileStamp>
  settings: BuildRecordSettings
  proj-isolate: ProjIsolate
with:
  printer => true

public defstruct ExternalFileRecord <: AuxRecord & Hashable & Equalable :
  filetype: ExtFileType
  dependencies: Tuple<FileStamp>
  commands: Tuple<String>
with:
  printer => true

public deftype ExtFileType <: Equalable & Hashable
public defstruct ExternalFile <: ExtFileType: (filestamp:FileStamp)
with: (printer => true)
public defstruct ExternalFlag <: ExtFileType: (flag:String)
with: (printer => true)

public defstruct BuildRecordSettings <: Hashable & Equalable :
  inputs: Tuple<String|Symbol>
  vm-packages: Tuple<String|Symbol>
  platform: Symbol|False
  assembly: String|False
  output: String|False
  external-dependencies: String|False
  pkg-dir: String|False
  optimize?: True|False
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
  flags: Tuple<Symbol>
with:
  printer => true

;------------------------------------------------------------
;---------------- Canonical Constructor ---------------------
;------------------------------------------------------------

public defn PkgRecord (package:Symbol,
                       filestamp:FileStamp,
                       source-stamp:FileStamp,
                       flags:Tuple<Symbol>,
                       optimize?:True|False) :
  #PkgRecord(package, filestamp, source-stamp,
             qsort(flags), optimize?)

;------------------------------------------------------------
;------------------ Hashing and Equality --------------------
;------------------------------------------------------------

defn key (r:PkgRecord) :
  [package(r), filestamp(r), source-stamp(r), flags(r), optimize?(r)]
defmethod equal? (a:PkgRecord, b:PkgRecord) : key(a) == key(b)
defmethod hash (r:PkgRecord) : hash $ key(r)

defn key (r:ExternalFileRecord) : [filetype(r), dependencies(r), commands(r)]
defmethod equal? (a:ExternalFileRecord, b:ExternalFileRecord) : key(a) == key(b)
defmethod hash (r:ExternalFileRecord) : hash $ key(r)

defmethod equal? (a:ExternalFile, b:ExternalFile) : filestamp(a) == filestamp(b)
defmethod hash (f:ExternalFile) : hash(filestamp(f))
defmethod equal? (a:ExternalFlag, b:ExternalFlag) : flag(a) == flag(b)
defmethod hash (f:ExternalFlag) : hash(flag(f))

defn key (r:BuildRecordSettings) :
  [inputs(r), vm-packages(r), platform(r), assembly(r), output(r), external-dependencies(r),
   pkg-dir(r), optimize?(r), ccfiles(r), ccflags(r), flags(r)]
defmethod equal? (a:BuildRecordSettings, b:BuildRecordSettings) : key(a) == key(b)
defmethod hash (r:BuildRecordSettings) : hash $ key(r)

;============================================================
;======================== Printer ===========================
;============================================================

defmethod print (o:OutputStream, f:AuxRecords) :
  print(o, "auxrecords :")
  val o2 = IndentedStream(o)
  lnprint(o2, "stanza-version: %_" % [stanza-version(f)])
  do(lnprint{o2, _}, records(f))

;============================================================
;================== Combining Records =======================
;============================================================

defn combine (file:AuxRecords, records:Seqable<AuxRecord>) :
  ;Strip category
  defn strip-key (r:AuxRecord) :
    match(r) :
      (r:PkgRecord) : [`pkg, filename(filestamp(r))]
      (r:BuildRecord) : [`build, target(r)]
      (r:ExternalFileRecord) :
        match(filetype(r)) :
          (f:ExternalFile) : [`external-file, filename(filestamp(f))]
          (f:ExternalFlag) : [`external-flag, flag(f)]

  ;Build table, and override earlier records with later records with same key
  val table = HashTable<?,AuxRecord>()
  for r in cat(/records(file), records) do :
    table[strip-key(r)] = r

  ;Build new AuxRecords
  AuxRecords(STANZA-VERSION, to-tuple(values(table)))
