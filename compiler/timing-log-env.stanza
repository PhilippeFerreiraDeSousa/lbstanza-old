defpackage stz/timing-log-env :
  import core
  import collections
  import stz/timing-log

;============================================================
;================== Environment API =========================
;============================================================

;Represents an environment with an active timing log with
;functions for manipulating the environment.
public deftype TimingLogEnv

;Return true if there is an active timing log.
public defmulti active-log? (env:TimingLogEnv) -> True|False

;Create a timing log with the given filename.
public defmulti create-log (env:TimingLogEnv, filename:String) -> False

;Close the active timing log.
public defmulti close-log (env:TimingLogEnv) -> False

;Create a new label with the given name and parent.
public defmulti id (env:TimingLogEnv, name:String, parent-id:Int|False) -> Int

;Log the given label with the given event type.
public defmulti log (env:TimingLogEnv, id:Int, type:EventType) -> False

;============================================================
;=================== Simple Env =============================
;============================================================

;Create a simple timing log that just directly
;instantiates a TimingLog object.
public deftype SimpleTimingLogEnv <: TimingLogEnv

public defn SimpleTimingLogEnv () -> TimingLogEnv :
  ;Holds the active log.
  var log:TimingLog|False = false

  new SimpleTimingLogEnv :
    defmethod active-log? (this) :
      log is TimingLog
    defmethod create-log (this, filename:String) :
      log = TimingLog(filename)
    defmethod close-log (this) :
      close(log as TimingLog)
      log = false
    defmethod id (this, name:String, parent-id:Int|False) :
      id(log as TimingLog, name, parent-id)
    defmethod log (this, id:Int, type:EventType) :
      /log(log as TimingLog, id, type)