#use-added-syntax(fastio-serializer)
defpackage stz/plugin-result :
  import core
  import core/stack-trace
  import collections
  import stz/fastio-buffer
  import stz/fastio-runtime

;============================================================
;=================== Plugin Result ==========================
;============================================================

;Represent a general plugin result.
public deftype PluginResult

;Indicate that an error occurred in the plugin.
public defstruct PluginError <: PluginResult :
  msg: String
  stack-trace: StackTrace

;Indicate that a value was successfully returned.
public defstruct PluginSuccess <: PluginResult :
  object

;============================================================
;===================== IO ===================================
;============================================================

;Create an object IO for PluginResult.
public defn PluginResultIO (object-io:FastObjectIO) -> FastObjectIO<PluginResult> :
  FastObjectIO(PluginResultSerializer(object-io),
               serialize-plugin-result,
               deserialize-plugin-result)

;============================================================
;==================== Serialization =========================
;============================================================

defserializer PluginResultSerializer (object-io:FastObjectIO) :

  ;Start from the plugin-result definition.
  entry-points: (plugin-result)

  ;Include support for serializing the primitives.
  include "serializer-primitives.spec"

  ;Definition of PluginResult
  defunion plugin-result (PluginResult) :
    PluginError : (msg:string, stack-trace:stack-trace)
    PluginSuccess : (object:object)

  ;Read/write the given stack trace.
  defunion stack-trace (StackTrace) :
    SingleStackTrace: (address:long)
    AppendedStackTrace: (traces:tuple(stack-trace as SingleStackTrace))

  ;Use the provided object writer/reader to
  ;write/read the object.
  defatom object (x:?) :
    writer :
      write(object-io, #buffer, x)
    reader :
      read(object-io, #buffer)
    skip :
      fatal("Skipping not supported.")

;============================================================
;=============== Wrappers for Stack Trace ===================
;============================================================

;Retrieve the address of a SingleStackTrace.
lostanza defn address (s:ref<SingleStackTrace>) -> ref<Long> :
  return new Long{s.data as long}

;Create a SingleStackTrace from an address.
lostanza defn SingleStackTrace (address:ref<Long>) -> ref<SingleStackTrace> :
  return new SingleStackTrace{address.value as ptr<PackedStackTrace>}