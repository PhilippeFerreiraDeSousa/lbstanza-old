defpackage stz/fastio-code-transforms :
  import core
  import collections
  import stz/fastio-buffer
  import stz/fastio-serializer-lang
  import stz/fastio-deftable

;<doc>=======================================================
;==================== Lift Combinators ======================
;============================================================

## Instantiating Combinators ##

Here is the original combinator definition:

  defcombinator optional (item:X) (x:X|False) :
    writer :
      match(x) :
        (x:False) :
          #write[byte](0Y)
        (x:X) :
          #write[byte](1Y)
          #write[item](x)
    reader :
      switch(#read[byte]) :
        0Y : false
        1Y : #read[item]
        else : #error

For instantiation, we need the following inputs:

  The argument definitions, and their types:
  
    item = dtype as DLong
    X = DLong

  The name of the instantiated definition:

    optional$dtype

Given this we:

  1) Substitute all occurrences of X with DLong
     in the specification.
     
  2) Substitute all occurrences of 'item' with
     'dtype as DLong' in the specification.

And get output:

  defatom optional$dtype (x:DLong|False) :
    writer :
      match(x) :
        (x:False) :
          #write[byte](0Y)
        (x:DLong) :
          #write[byte](1Y)
          #write[dtype as DLong](x)
    reader :
      switch(#read[byte]) :
        0Y : false
        1Y : #read[dtype as DLong]
        else : #error

;============================================================
;=======================================================<doc>

;Lift all references to combinator specifications. 
public defn lift-combinators (s:DefSerializer) -> DefSerializer :
  ;Accumulate all the combinators in the serializer.
  ;The combinators keys are guaranteed not to contain
  ;combinators themselves.
  val combinators = HashTable<CombinatorSpec,NamedSpec>()

  ;Accumulate all the new expressions with their
  ;IOSpecs lifted.
  val new-exps = Vector<TopExp>()

  ;Create the definition table for us to look up definitions.
  val deftable = DefTable(s)

  ;Lift the given combinator.
  defn lift-combinator (spec:CombinatorSpec) -> NamedSpec :
    set?(combinators, spec,
      fn () :
        val new-name = gensym(name(spec))
        val arg-types = map(type{deftable, _}, specs(spec))
        val combinator = deftable[name(spec)] as DefCombinator
        val atom = instantiate(combinator, new-name, specs(spec), arg-types)
        val lifted-atom = map-specs(lift-combinators,atom)
        add(deftable, lifted-atom)
        add(new-exps, lifted-atom)
        NamedSpec(new-name))

  ;Scan the given spec and return a new one
  ;that does not contain any combinators.
  defn lift-combinators (s:IOSpec) -> IOSpec :
    match(s) :
      (s:NamedSpec) :
        s
      (s:CastedSpec) :
        val new-spec = lift-combinators(spec(s))
        CastedSpec(new-spec, type(s))
      (s:CombinatorSpec) :        
        val new-specs = map(lift-combinators, specs(s))
        lift-combinator(CombinatorSpec(name(s), new-specs))

  ;Launch by lifting combinators in all non-combinator
  ;expressions.
  for e in exps(s) do :
    if e is-not DefCombinator :
      add(new-exps, map-specs(lift-combinators, e))

  ;Return the new DefSerializer.
  sub-exps(s, to-tuple(new-exps))

;------------------------------------------------------------
;---------------- Substitutions in Body ---------------------
;------------------------------------------------------------

;Represents the substitutions to apply to the body of a DefCombinator.
defstruct DefSubs :
  type-table: HashTable<Symbol,?>
  spec-table: HashTable<Symbol,IOSpec>

;Instantiate the given combinator with the given specs for its arguments.
;Assumes that the arity is all correct.
defn instantiate (def:DefCombinator,
                  new-name:Symbol,
                  arg-specs:Tuple<IOSpec>,
                  arg-types:Tuple) -> DefAtom :
                  
  ;Create the sub table.
  val defsubs = DefSubs(type-table, spec-table) where :
    val type-table = HashTable<Symbol,?>()
    val spec-table = HashTable<Symbol,IOSpec>()
    for (arg in args(def), spec in arg-specs, arg-type in arg-types) do :
      spec-table[name(arg)] = spec
      type-table[type-binder(arg)] = arg-type      

  ;Perform substitutions in the combinator.
  val new-type = sub-in-form(type(def), defsubs)
  val new-writer = sub-in-form(writer(def), defsubs)
  val new-reader = sub-in-form(reader(def), defsubs)
  val new-skipper = sub-in-form(skipper(def), defsubs)

  ;Return the atom with the substituted entries.
  DefAtom(info(def),
          new-name,
          binder(def)
          new-type
          false
          new-writer
          new-reader
          new-skipper)

;Perform the following substitutions in the given form.
defn sub-in-form (x, subs:DefSubs) -> ? :

  defn sub-in-spec (s:IOSpec) -> IOSpec :
    match(s) :
      (s:NamedSpec) : get?(spec-table(subs), name(s), s)
      (s:CastedSpec) : CastedSpec(sub-in-spec(spec(s)), sub-in-form(type(s)))
      (s:CombinatorSpec) : CombinatorSpec(name(s), map(sub-in-spec,specs(s)))
      
  defn sub-in-form (x) -> ? :
    match(x) :
      (x:Token) : Token(sub-in-form(item(x)), info(x))
      (x:List) : map(sub-in-form, x)
      (x:Symbol) : get?(type-table(subs), x, x)
      (x:WriteSpec) : WriteSpec(info(x), sub-in-spec(spec(x)), sub-in-form(item(x)))
      (x:ReadSpec) : ReadSpec(info(x), sub-in-spec(spec(x)))
      (x:SizeSpec) : SizeSpec(info(x), sub-in-spec(spec(x)))
      (x:SkipSpec) : SkipSpec(info(x), sub-in-spec(spec(x)))
      (x) : x

  sub-in-form(x)

;============================================================
;================= Mapper Utilities =========================
;============================================================
  
;Call 'f' on every IOSpec in the given TopExp.
defn map-specs (f:IOSpec -> IOSpec, e:TopExp) -> TopExp :
  match(e) :
    (e:StanzaExp) :
      e
    (e:DefAtom) :
      val new-writer = map-specs-in-form(f, writer(e))
      val new-reader = map-specs-in-form(f, reader(e))
      val new-skipper = map-specs-in-form(f, skipper(e))
      e $> sub-writer{_, new-writer}
        $> sub-reader{_, new-reader}
        $> sub-skipper{_, new-skipper}
    (e:DefType) :
      sub-constructor(e, map-specs(f, constructor(e)))
    (e:DefUnion) :
      val new-branches = for b in branches(e) map :
        sub-constructor(b, map-specs(f, constructor(b)))
      sub-branches(e, new-branches)
    (e:DefCombinator) :
      val new-writer = map-specs-in-form(f, writer(e))
      val new-reader = map-specs-in-form(f, reader(e))
      val new-skipper = map-specs-in-form(f, skipper(e))
      e $> sub-writer{_, new-writer}
        $> sub-reader{_, new-reader}
        $> sub-skipper{_, new-skipper}

;Call 'f' on every IOSpec in the given constructor.
defn map-specs (f:IOSpec -> IOSpec, c:Constructor) -> Constructor :
  match(c) :
    (c:EnumConstructor) :
      c
    (c:StructConstructor) :
      val new-args = for arg in args(c) map :
        StructField(name(arg), f(spec(arg)))
      StructConstructor(new-args)
    (c:IOSpec) :
      f(c)

;Call 'f' on every IOSpec in the given special expression.
defn map-specs (f:IOSpec -> IOSpec, e:SpecialExp) -> SpecialExp :
  match(e) :
    (e:WriteSpec) : sub-spec(e, f(spec(e)))
    (e:ReadSpec) : sub-spec(e, f(spec(e)))
    (e:SkipSpec) : sub-spec(e, f(spec(e)))
    (e:SizeSpec) : sub-spec(e, f(spec(e)))
    (e:NotifyError) : e
    (e:ReifyBuffer) : e

;Call 'f' on every IOSpec in the given form.
defn map-specs-in-form (f:IOSpec -> IOSpec, form) -> ? :
  defn recur (form) -> ? :
    match(form) :
      (form:Token) :
        Token(recur(item(form)), info(form))
      (form:List) :
        map(recur, form)
      (form:SpecialExp) :
        map-specs(f, form)
      (form) :
        form
  recur(form)