#use-added-syntax(tests)
defpackage test-bitset-intrinsics :
  import core
  import collections

lostanza var BITSET: long
lostanza defn test-test-bit () -> ref<False> :
  val bitset-base = addr(BITSET)
  for (BITSET = 1L, BITSET != 0L, BITSET = BITSET << 1L) :
    for (var i:long = 0L, i < 64L, i = i + 1L) :
      val mark = (BITSET >> i) & 1L
      val bit = call-prim test-bit(i, bitset-base)
      if mark != bit : 
        call-c clib/printf("Mismatch at bit index: %ld (mark = %p, bit = %p)\n", i, mark bit)
        fatal("Incorrect test-bit behaviour.")
  return false

deftest test-test-bit :
  test-test-bit()

lostanza defn test-other-bit-operations () -> ref<False> :
  val base:ptr<long> = call-c clib/malloc(sizeof(long) * 10)
  base[2] = 0
  
  val bit0 = call-prim test-and-set-bit(135L, base)
  if bit0 != 0 : fatal("bit0 is incorrect. Expected to be 0.")

  val bit1 = call-prim test-and-set-bit(135L, base)
  if bit1 != 1 : fatal("bit0 is incorrect. Expected to be 1.")

  if base[2] != 128 : fatal("base[2] is incorrect. Expected to be 128.")

  val bit2 = call-prim test-and-clear-bit(135L, base)
  if bit2 != 1 : fatal("bit2 is incorrect. Expected to be 1.")

  val bit3 = call-prim test-and-clear-bit(135L, base)
  if bit3 != 0 : fatal("bit3 is incorrect. Expected to be 0.")

  call-prim set-bit(135L, base)
  if base[2] != 128 : fatal("base[2] is incorrect. Expected to be 128.")
  
  call-prim clear-bit(135L, base)
  if base[2] != 0 : fatal("base[2] is incorrect. Expected to be 128.")

  call-c clib/free(base)
  return false

deftest test-other-bit-operations :
  test-other-bit-operations()