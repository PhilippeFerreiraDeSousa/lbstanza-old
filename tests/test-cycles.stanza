#use-added-syntax(tests)
defpackage stz/test-cycles :
  import core
  import collections
  import stz/utils
  import stz/cycles
  import stz/test-utils

defn solution-to-string (cycles:Vector<Tuple<Edge>>) -> String :
  val buffer = StringBuffer()
  for cycle in cycles do :
    println(buffer, "Cycle:")
    println(buffer, Indented("%n" % [cycle]))
  to-string(buffer)

defn check-soln (cycles:Vector<Tuple<Edge>>, soln:String) :
  val str = solution-to-string(cycles)
  println(str)
  #ASSERT(lines-equal?(str, soln))

deftest test-cycles-1 :
  val cycles = detect-cycles(
    [0 1 2 3],
    [Edge(0, 0, 1)
     Edge(1, 1, 3)
     Edge(2, 3, 2)
     Edge(3, 2, 0)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 0, src = 0, dst = 1)
      Edge(id = 1, src = 1, dst = 3)
      Edge(id = 2, src = 3, dst = 2)
      Edge(id = 3, src = 2, dst = 0)      
    <Solution>)

deftest test-cycles-2 :
  val cycles = detect-cycles(
    [0 1 2 3],
    [Edge(0, 0, 0)
     Edge(1, 1, 3)
     Edge(2, 3, 2)
     Edge(3, 2, 0)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 0, src = 0, dst = 0)
    <Solution>)

deftest test-cycles-3 :
  val cycles = detect-cycles(
    [0 1 2 3 4],
    [Edge(0, 0, 1)
     Edge(1, 1, 2)
     Edge(2, 2, 3)
     Edge(3, 3, 4)
     Edge(4, 4, 2)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 2, src = 2, dst = 3)
      Edge(id = 3, src = 3, dst = 4)
      Edge(id = 4, src = 4, dst = 2)
    <Solution>)

deftest test-cycles-4 :
  val cycles = detect-cycles(
    [0 1 2 3 4 5],
    [Edge(0, 0, 1)
     Edge(1, 1, 2)
     Edge(2, 2, 3)
     Edge(3, 3, 4)
     Edge(4, 4, 5)
     Edge(5, 5, 3)
     Edge(6, 5, 1)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 1, src = 1, dst = 2)
      Edge(id = 2, src = 2, dst = 3)
      Edge(id = 3, src = 3, dst = 4)
      Edge(id = 4, src = 4, dst = 5)
      Edge(id = 6, src = 5, dst = 1)
    Cycle:
      Edge(id = 3, src = 3, dst = 4)
      Edge(id = 4, src = 4, dst = 5)
      Edge(id = 5, src = 5, dst = 3)
    <Solution>)

deftest test-cycles-5 :
  val cycles = detect-cycles(
    [0 1 2 3 4 5],
    [Edge(1, 1, 2)
     Edge(6, 5, 1)
     Edge(0, 0, 1)
     Edge(3, 3, 4)
     Edge(2, 2, 3)
     Edge(4, 4, 5)
     Edge(5, 5, 3)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 3, src = 3, dst = 4)
      Edge(id = 4, src = 4, dst = 5)
      Edge(id = 5, src = 5, dst = 3)
    Cycle:
      Edge(id = 1, src = 1, dst = 2)
      Edge(id = 2, src = 2, dst = 3)
      Edge(id = 3, src = 3, dst = 4)
      Edge(id = 4, src = 4, dst = 5)
      Edge(id = 6, src = 5, dst = 1)
    <Solution>)

deftest test-cycles-6 :
  val cycles = detect-cycles(
    [0 5 1 3 2 4],
    [Edge(0, 0, 1)
     Edge(1, 1, 2)
     Edge(2, 2, 0)
     Edge(3, 3, 4)
     Edge(4, 4, 5)
     Edge(5, 5, 3)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 0, src = 0, dst = 1)
      Edge(id = 1, src = 1, dst = 2)
      Edge(id = 2, src = 2, dst = 0)
    Cycle:
      Edge(id = 5, src = 5, dst = 3)
      Edge(id = 3, src = 3, dst = 4)
      Edge(id = 4, src = 4, dst = 5)
    <Solution>)

deftest test-cycles-7 :
  val cycles = detect-cycles(
    [0 1 2 3 4],
    [Edge(0, 0, 1)
     Edge(1, 1, 2)
     Edge(2, 2, 3)
     Edge(3, 3, 4)
     Edge(4, 4, 2)
     Edge(5, 0, 4)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 4, src = 4, dst = 2)
      Edge(id = 2, src = 2, dst = 3)
      Edge(id = 3, src = 3, dst = 4)
    <Solution>)

deftest test-cycles-8 :
  val cycles = detect-cycles(
    [0 1 2 3 4 5 6],
    [Edge(0, 0, 1)
     Edge(1, 1, 2)
     Edge(2, 2, 3)
     Edge(3, 3, 4)
     Edge(4, 3, 5)
     Edge(5, 5, 6)
     Edge(6, 6, 2)])
  check-soln(
    cycles,
    \<Solution>
    Cycle:
      Edge(id = 2, src = 2, dst = 3)
      Edge(id = 4, src = 3, dst = 5)
      Edge(id = 5, src = 5, dst = 6)
      Edge(id = 6, src = 6, dst = 2)
    <Solution>)

deftest test-cycles-9 :
  val cycles = detect-cycles(
    [0 1 2 3 4],
    [Edge(0, 0, 1)
     Edge(1, 1, 2)
     Edge(2, 0, 3)
     Edge(3, 3, 4)
     Edge(4, 0, 2)
     Edge(5, 2, 4)])
  check-soln(
    cycles,
    \<Solution>
    <Solution>)