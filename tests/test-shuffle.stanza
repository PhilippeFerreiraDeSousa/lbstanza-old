#use-added-syntax(tests)
defpackage stz/test-shuffle :
  import core
  import collections
  import stz/utils
  import stz/shuffle
  import stz/test-utils

;============================================================
;================== Easy Test Syntax ========================
;============================================================

var MOV-ID-COUNTER = to-seq(0 to false)
defsyntax test-shuffle :
  public defproduction shuffle-problem:ShuffleProblem
  defrule shuffle-problem = (shuffle :
                               regs: (?rs:#reg ...)
                               ?moves:#mov ...) :
    ShuffleProblem(to-tuple(rs), to-tuple(moves))
  
  defproduction mov:Move
  defrule mov = (mov ?a:#loc ?b:#loc) : Move(next(MOV-ID-COUNTER), a, b)
  
  defproduction loc:Loc
  defrule loc = (?r:#reg) : r
  defrule loc = (M) : Mem()

  defproduction reg:Reg
  defrule reg = (?x:#int) : Reg(x)

  defproduction int:Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

defn parse-shuffle (form) -> ShuffleProblem :
  let-var MOV-ID-COUNTER = to-seq(0 to false) :
    parse-syntax[test-shuffle / #shuffle-problem](form)

;============================================================
;================== Solve ===================================
;============================================================

defn solution-to-string (ins:Vector<Ins>) -> String :
  val buffer = StringBuffer()
  println(buffer, "Solution:")
  for i in ins do :
    println(buffer, "  %_" % [i])
  to-string(buffer)

defn solve (form, expected:String) :
  val prob = parse-shuffle(form)
  println(prob)
  val soln = solution-to-string(shuffle(prob))
  println(soln)
  #ASSERT(lines-equal?(soln, expected))

deftest shuffle1 :
  val forms = `(
    shuffle :
      regs: (0 1 2)
      mov 0 1
      mov 1 2
  )
  val soln = \<S>
    Solution:
      mov R1 to R2 (1)
      mov R0 to R1 (0)  
  <S>
  solve(forms, soln)

deftest shuffle2 :
  val forms = `(
    shuffle :
      regs: (0 1 2)
      mov 0 1
      mov 1 2
      mov 2 0
  )
  val soln = \<S>
    Solution:
      save R0 to swap
      mov R2 to R0 (2)
      mov R1 to R2 (1)
      restore swap to R1
      mov R1 to R1 (0)
  <S>
  solve(forms, soln)

deftest shuffle3 :
  val forms = `(
    shuffle :
      regs: (0 1 2 3 4 5)
      mov 0 1
      mov 1 2
      mov 2 0
      mov 3 4
      mov 4 5
      mov 5 3
  )
  val soln = \<S>
    Solution:
      save R0 to swap
      mov R3 to R0
      mov R5 to R3 (5)
      mov R4 to R5 (4)
      mov R0 to R4 (3)
      mov R2 to R0 (2)
      mov R1 to R2 (1)
      restore swap to R1
      mov R1 to R1 (0)
  <S>
  solve(forms, soln)

deftest shuffle4 :
  val forms = `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov 0 3
      mov 3 2
      mov 2 5
      mov 4 6
      mov 6 1
      mov 1 4
  )
  val soln = \<S>
    Solution:
      mov R1 to R5
      mov R6 to R1 (4)
      mov R4 to R6 (3)
      mov R5 to R4 (5)
      mov R2 to R5 (2)
      mov R3 to R2 (1)
      mov R0 to R3 (0)
  <S>
  solve(forms, soln)

deftest shuffle5 :
  val forms = `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov M 0
      mov 0 3
      mov 3 2
      mov 2 5
      mov 2 M
      mov 5 M
      mov 4 6
      mov 6 1
      mov M M
      mov M M
      mov 6 M
      mov 1 4
  )
  val soln = \<S>
    Solution:
      mov R2 to M (4)
      mov R5 to M (5)
      mov R6 to M (10)
      mov using swap R5 (8)
      mov using swap R5 (9)
      mov R1 to R5
      mov R6 to R1 (7)
      mov R4 to R6 (6)
      mov R5 to R4 (11)
      mov R2 to R5 (3)
      mov R3 to R2 (2)
      mov R0 to R3 (1)
      mov M to R0 (0)
  <S>
  solve(forms, soln)

deftest shuffle6 :
  val forms = `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov M 0
      mov 0 5
      mov 0 3
      mov 3 2
      mov 2 5
      mov 2 M
      mov 5 M
      mov 4 6
      mov 6 1
      mov M M
      mov M M
      mov 6 M
      mov 1 4
  )
  val soln = \<S>
    Solution:
      mov R2 to M (5)
      mov R5 to M (6)
      mov R6 to M (11)
      mov using swap R5 (9)
      mov using swap R5 (10)
      mov R1 to R5
      mov R6 to R1 (8)
      mov R4 to R6 (7)
      mov R5 to R4 (12)
      mov R2 to R5 (4)
      mov R3 to R2 (3)
      mov R0 to R3 (2)
      mov R0 to R5 (1)
      mov M to R0 (0)
  <S>
  solve(forms, soln)

deftest shuffle7 :
  val forms = `(
    shuffle :
      regs: (0 1 2 3 4 5 6)
      mov 0 3
      mov 3 2
      mov 2 5
      mov 5 0
      mov 4 6
      mov 6 1
      mov 1 4
  )
  val soln = \<S>
    Solution:
      save R0 to swap
      mov R1 to R0
      mov R6 to R1 (5)
      mov R4 to R6 (4)
      mov R0 to R4 (6)
      mov R5 to R0 (3)
      mov R2 to R5 (2)
      mov R3 to R2 (1)
      restore swap to R3
      mov R3 to R3 (0)
  <S>
  solve(forms, soln)

deftest shuffle8 :
  val forms = `(
    shuffle :
      regs: (0 1 2 3)
      mov 0 1
      mov 1 0
      mov 0 3
      mov 0 2
  )
  val soln = \<S>
    Solution:
      mov R0 to R2
      mov R1 to R0 (1)
      mov R2 to R1 (0)
      mov R1 to R2 (3)
      mov R1 to R3 (2)
  <S>
  solve(forms, soln)
