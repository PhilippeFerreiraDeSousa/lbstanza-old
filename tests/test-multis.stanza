#use-added-syntax(tests)
defpackage stz/test-multis :
  import core
  import collections
  import stz/test-utils

deftype A
deftype B <: A
deftype C <: A
deftype D <: B&C

defn A () : new A
defn B () : new B
defn C () : new C
defn D () : new D

defmulti f (x:A, y:A) -> False

defmethod f (a:A, b:A) : println("f A A")
defmethod f (a:A, b:C) : println("f A C")
defmethod f (a:C, b:A) : println("f C A")
defmethod f (a:D, b:D) : println("f D D")

defn A2 () :
  new A :
    defmethod f (this, b:B) :
      println("f A2 B")
    defmethod f (this, b:C) :
      println("f A2 C")

val MULTI-PRINTOUT = \<S>
f A A
f A C
f C A
f D D
f C A
f A C
f A A
f A2 B
f A2 C
Execution Halted
<S>

deftest multi-instance-method :
  within assert-printout(MULTI-PRINTOUT) :
    within execute-with-safe-halt() : f(A(), A())
    within execute-with-safe-halt() : f(A(), C())
    within execute-with-safe-halt() : f(C(), A())
    within execute-with-safe-halt() : f(D(), D())
    within execute-with-safe-halt() : f(D(), A())
    within execute-with-safe-halt() : f(A(), D())
    within execute-with-safe-halt() : f(A2(), A())
    within execute-with-safe-halt() : f(A2(), B())
    within execute-with-safe-halt() : f(A2(), C())
    within execute-with-safe-halt() : f(A2(), D())
