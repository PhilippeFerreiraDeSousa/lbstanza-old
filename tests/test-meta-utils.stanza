#use-added-syntax(tests)
defpackage stz/test-meta-utils :
  import core
  import collections
  import core/meta-utils

defstruct MyStruct <: Equalable & Hashable :
  a:Int
  b:String
with:
  printer => true
  equalable => true
  hashable => true
  meta-utils => true
  
defstruct MyStruct2 :
  b:String
with:
  printer => true
  meta-utils => true

deftest meta-utils-equalable :
  val x = MyStruct(3, "Hello")
  val y = MyStruct(3, "Hello")
  #ASSERT(x == y)

deftest meta-utils-hashable :
  val x = MyStruct(3, "Hello")
  println("hash(x) = %_" % [hash(x)])

deftest meta-utils-field-values :
  val x = MyStruct(3, "Hello")
  #ASSERT(field-values(x) == [3, "Hello"])

deftest meta-utils-field-names :
  val x = MyStruct(3, "Hello")
  #ASSERT(field-names(x) == [`a, `b])

deftest meta-utils-field-entries :
  val x = MyStruct(3, "Hello")
  #ASSERT(field-entries(x) == [`a => 3, `b => "Hello"])

deftest meta-utils-field-entries-2 :
  val x = MyStruct2("World")
  #ASSERT(field-entries(x) == [`b => "World"])

deftest meta-utils-field-accessors :
  val x = MyStruct(3, "Hello")
  val accessors = field-accessors(x)
  val values = [3, "Hello"]
  for (access in accessors, v in values) do :
    #ASSERT(access(x) == v)
  

