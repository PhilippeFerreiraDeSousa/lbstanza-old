#use-added-syntax(tests)
defpackage stz/test-paths :
  import core
  import collections
  import core/parsed-path
  import stz/test-utils

defn test-parse-path (path:String, platform:Platform) :
  println("Parse path: %_" % [path])
  try :
    val parsed-path = parse-path(path, platform)
    println("Entries:")
    for e in entries(parsed-path) do :
      println("  %_" % [e])
    println("Absolute? %_" % [absolute?(parsed-path)])
    println("Formatted: %_" % [format(parsed-path, platform)])
  catch (e:PathParsingError) :
    println(e)  

val OSX-PRINTOUT = \<S>
Parse path: /mydir1/mydir2/mydir3/myfile.txt
Entries:
  RootPath
  NamedPath("mydir1")
  NamedPath("mydir2")
  NamedPath("mydir3")
  NamedPath("myfile.txt")
Absolute? true
Formatted: /mydir1/mydir2/mydir3/myfile.txt
Parse path: mydir1
Entries:
  NamedPath("mydir1")
Absolute? false
Formatted: mydir1
Parse path: /mydir1/../mydir2/myfile.txt
Entries:
  RootPath
  NamedPath("mydir2")
  NamedPath("myfile.txt")
Absolute? true
Formatted: /mydir2/myfile.txt
Parse path: /mydir1/././mydir2
Entries:
  RootPath
  NamedPath("mydir1")
  NamedPath("mydir2")
Absolute? true
Formatted: /mydir1/mydir2
Parse path: ../mydir2
Entries:
  UpPath
  NamedPath("mydir2")
Absolute? false
Formatted: ../mydir2
Parse path: ./mydir2/myfile.txt
Entries:
  NamedPath("mydir2")
  NamedPath("myfile.txt")
Absolute? false
Formatted: mydir2/myfile.txt
Parse path: /../myfile.txt
Path '/../myfile.txt' uses '..' entries to traverse past the root directory.
Parse path: a/b///d
Entries:
  NamedPath("a")
  NamedPath("b")
  NamedPath("d")
Absolute? false
Formatted: a/b/d
Parse path: /shared folder/escaped\\slash/myfile.txt
Entries:
  RootPath
  NamedPath("shared folder")
  NamedPath("escaped\\slash")
  NamedPath("myfile.txt")
Absolute? true
Formatted: /shared folder/escaped\\slash/myfile.txt
<S>

deftest test-os-x-path-parsing :
  val paths = [
    "/mydir1/mydir2/mydir3/myfile.txt"
    "mydir1"
    "/mydir1/../mydir2/myfile.txt"
    "/mydir1/././mydir2"
    "../mydir2"
    "./mydir2/myfile.txt"
    "/../myfile.txt"
    "a/b///d"
    "/shared folder/escaped\\\\slash/myfile.txt"]
  within assert-printout(OSX-PRINTOUT) :
    do(test-parse-path{_, OS-X}, paths)

val WIN-PRINTOUT = \<S>
Parse path: C:\mydir1/mydir2/mydir3/myfile.txt
Entries:
  DrivePath('C')
  NamedPath("mydir1")
  NamedPath("mydir2")
  NamedPath("mydir3")
  NamedPath("myfile.txt")
Absolute? true
Formatted: C:\mydir1\mydir2\mydir3\myfile.txt
Parse path: C:\
Entries:
  DrivePath('C')
Absolute? true
Formatted: C:\
Parse path: :\mydir1/../mydir2\myfile.txt
Path ':\mydir1/../mydir2\myfile.txt' contains illegal character ':'.
Parse path: C:mydir1/mydir2
Path 'C:mydir1/mydir2' starts with an illegal drive specifier.
<S>

deftest test-windows-path-parsing :
  val paths = [
    "C:\\mydir1/mydir2/mydir3/myfile.txt"
    "C:\\"
    ":\\mydir1/../mydir2\\myfile.txt"
    "C:mydir1/mydir2"]
  within assert-printout(WIN-PRINTOUT) :
    do(test-parse-path{_, Windows}, paths)