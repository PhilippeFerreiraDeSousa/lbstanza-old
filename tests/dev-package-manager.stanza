defpackage stz-test-suite/dev-package-manager :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-env
  import stz/external-dependencies
  import stz/foreign-package-manager
  import stz/conan-package-manager
  import stz/printing-utils

;============================================================
;===================== Verbose System =======================
;============================================================

;Simple System implementation that just echoes the input
;arguments.
;Pass true to have System actually execute the commands.
defn VerboseSystem (actually-execute?:True|False) -> System :
  new System :
    defmethod read-file (this, filename:String) :
      println("SYSTEM: read-file(%~)" % [filename])
      if actually-execute?: slurp(filename)
      else : "Dummy contents"

    defmethod write-file (this, filename:String, contents) :
      println("SYSTEM: write-file?(%~)" % [filename])
      if actually-execute?: spit(filename, contents)

    defmethod file-exists? (this, filename:String) :
      println("SYSTEM: file-exists?(%~)" % [filename])
      if actually-execute?: file-exists?(filename)
      else : true

    defmethod call-system (this,
                           prog:String,
                           args:Tuple<String>,
                           workdir:String|False,
                           env-vars:Tuple<KeyValue<String,String>>|False) :
      val items = [
        simple-field("prog", written(prog))
        named-list-fields("args", seq(written, args))
        falseable-field("workdir", workdir)
        falseable-list-fields("env-vars", env-vars)]
      println("SYSTEM: call-system(%~)%_" % [prog, colon-field-list(items)])
      if actually-execute? : call-system(prog, args)
      else : 0

    defmethod call-system-and-get-output (this,
                                          prog:String,
                                          args:Tuple<String>,
                                          workdir:String|False,
                                          env-vars:Tuple<KeyValue<String,String>>|False) :
      val items = [
        simple-field("prog", written(prog))
        named-list-fields("args", seq(written, args))
        falseable-field("workdir", workdir)
        falseable-list-fields("env-vars", env-vars)]
      println("SYSTEM: call-system-and-get-output(%~)%_" % [prog, colon-field-list(items)])
      if actually-execute? : call-system-and-get-output(prog, args)
      else : ""

;============================================================
;================== Test a Package Manager ==================
;============================================================

defn test-package-manager (pm:ForeignPackageManager) -> False :
  println("Begin test of package manager.")

  println("Retrieve the configuration parameters.")
  val params = configuration-params(pm)
  
  println("Retrieved params:")
  do(println{Indented(_)}, params)

  ;As an example, suppose that the following params were computed
  ;from the user's .proj file.
  ; TODO: support env var expansion or relative paths so we don't need to maintain full paths in the proj file
  val example-params = PackageManagerParams(
    "/Applications/myproject/src"
    `linux
    [`project-root => "mytempdrive/build/mydir/myproject"
     `email => "patrick@jitx.com"])

  println("Retrieve the .proj variables that the package manager \
           supplies.")
  val proj-vars = proj-variables(pm, example-params, `linux)

  println("The package manager provides these variables:")
  within indented() :
    for entry in proj-vars do :
      println("%_: %~" % [key(entry), value(entry)])

  println("Based upon the params retrieve the additional dependencies \
           from the package manager:")
  val deps = system-dependencies(pm, example-params)
  println("The package manager introduces dependencies:")
  println("  ccfiles: %~" % [ccfiles(deps)])
  println("  ccflags: %~" % [ccflags(deps)])

  println("Suppose that dependencies have now been calculated.")
  println("Request the package manager to satisfy the following dependencies.")
  val packages = ["gzip/11.2.3" "simlib/v2" "jitx/0.0.13-rc1"]
  println("  packages = %_" % [packages])
  satisfy-dependencies(pm,
                       packages,
                       example-params,
                       VerboseSystem(false))

  false

;============================================================
;============== Test the ConanPackageManager ================
;============================================================

test-package-manager(ConanPackageManager())