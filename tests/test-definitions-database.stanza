#use-added-syntax(tests)
defpackage stz/test-definitions-database : 
  import core
  import collections
  import stz/defs-db
  import stz/defs-db-serializer
  import stz/il-ir
  import stz/visibility

; Helper function to compile a test file into IL-IR
defn input-ir () : 
  stz/defs-db/compile-input $
    DefsDbInput(proj-files, platform, flags, optimize?) where : 
      val proj-files = ["tests/indexing-data/stanza.proj"]
      val platform   = `linux
      val flags      = []
      val optimize?  = false

; Helper fucntion to create a FileInfo for the test source file.
defn test-info (line:Int, column:Int) : 
  FileInfo("tests/indexing-data/test-package.stanza", line, column)

; Here, we test to make sure the indexing algorithm works as expected 
; on the test input data. 
deftest test-indexing-of-iexps : 
  val [namemap, packages] = input-ir()
  val ipackages = filter-by<IPackage>(packages)
  val test-package = 
    for pkg in ipackages find! : 
      name(pkg) == `test-package
  
  val indexed = to-tuple $ stz/defs-db/index-expressions(exps(test-package), namemap)
  defn lookup? (name:Symbol) : 
    find({stz/defs-db/name(_) == name}, indexed)
  
  #EXPECT(lookup?(`public-fn)     == stz/defs-db/Indexed(SrcDefFunction, Public,    `public-fn,     test-info(5, 12),  DefnAnnotation([], `Int)))
  #EXPECT(lookup?(`protected-fn)  == stz/defs-db/Indexed(SrcDefFunction, Protected, `protected-fn,  test-info(6, 15),  DefnAnnotation([], `Int)))
  #EXPECT(lookup?(`private-fn)    == stz/defs-db/Indexed(SrcDefFunction, Private,   `private-fn,    test-info(7, 5),   DefnAnnotation([], `Int)))
  #EXPECT(lookup?(`PublicType)    == stz/defs-db/Indexed(SrcDefType,     Public,    `PublicType,    test-info(9, 15),  false))
  #EXPECT(lookup?(`ProtectedType) == stz/defs-db/Indexed(SrcDefType,     Protected, `ProtectedType, test-info(10, 18), false))
  #EXPECT(lookup?(`PrivateType)   == stz/defs-db/Indexed(SrcDefType,     Private,   `PrivateType,   test-info(11, 8),  false))

; Here, we test that the indexing algorithm correctly associates definitions with their source package.
deftest test-indexing-to-definitions : 
  val [namemap, packages] = input-ir()
  val ipackages = filter-by<IPackage>(packages)
  val test-package = 
    for pkg in ipackages find! : 
      name(pkg) == `test-package
  
  val definitions = to-tuple $ stz/defs-db/index-definitions(test-package, namemap)
  defn test (name:Symbol) : 
    val def = find({/name(_) == name}, definitions)
    match(def:Definition) :
      #EXPECT(source(def)  == SrcDefinition)
      #EXPECT(pkg-name(def) == /name(test-package))
    else : 
      println("Could not lookup %_ in indexed definitions." % [name])
      #EXPECT(false)
  
  val symbols = [
    `public-fn
    `protected-fn
    `private-fn
    `PublicType
    `ProtectedType
    `PrivateType
  ]

  do(test, symbols)

; A test to check if the serializer and deserializer for the DefinitionsDatabase
; object runs correctly and returns a table of definitions which match the 
; definitions we provide.
deftest test-serde-of-definitions-database : 
  val [namemap, packages] = input-ir()
  val ipackages = filter-by<IPackage>(packages)
  val test-package = 
    for pkg in ipackages find! : 
      name(pkg) == `test-package
  
  val definitions = to-tuple $ stz/defs-db/index-definitions(test-package, namemap)
  val database = stz/defs-db/create-defs-db(namemap, [test-package])

  let : 
    val file = FileOutputStream("test-ddb.dat")
    serialize(file, database)
    close(file)
  
  let : 
    val file = FileInputStream("test-ddb.dat")
    val deserialized = read-definitions-database(file)
    for kv in /definitions(deserialized) do : 
      val matching = find!({key(kv) == name(_)}, definitions)
      #EXPECT(matching == head $ value(kv))
      
    close(file)
  
  if file-exists?("test-ddb.dat") : 
    delete-file("test-ddb.dat")

; This tests a non-trivial annotation lookup, a function
; with type parameters, a captured type argument, unnamed argument, 
; function as an argument, and return type.
deftest test-lookup-of-annotations :
  val [namemap, packages] = input-ir()
  val database = stz/defs-db/create-defs-db(namemap, packages)
  
  val all-defs = seq-cat({_}, values(definitions(database)))
  val takes-fn-as-arg = find!({name(_) == `takes-fn-as-arg}, all-defs)

  val annotation = annotation?(takes-fn-as-arg) as DefnAnnotation
  defn has-arg? (def:Definition, arg:FnArgAnnotation) -> True|False : 
    val found? = 
      for annotation in args(annotation) find : 
        name(annotation) == name(arg) and 
        type?(annotation) == type?(arg)
      found? is-not False

  #EXPECT(has-arg?(takes-fn-as-arg, FnArgAnnotation(`body, `\|(False) -> ?T|)))
  #EXPECT(has-arg?(takes-fn-as-arg, FnArgAnnotation(`not-named, false)))
  #EXPECT(return-type?(annotation) == `T)

; A larger test on a large stanza codebase to check that the indexing 
; algorithms and serializers do not crash.
deftest index-stanza-repository : 
  val input = DefsDbInput(proj-files, platform, flags, optimize?) where : 
    val proj-files = ["tests/stanza.proj", "core/stanza.proj", "compiler/stanza.proj"]
    val platform   = `linux
    val flags      = []
    val optimize?  = false
  defs-db(input, "stanza.defs.dat")
