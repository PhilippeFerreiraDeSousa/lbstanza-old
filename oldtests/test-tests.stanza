defpackage test-tests :
  import core
  import collections

defn myfunction (x:Int, y:Int) :
  println("x = %_" % [x])
  throw(Exception("Bad X")) when x < 0
  println("y = %_" % [y])
  println("x + y = %_" % [x + y])
  x + y

deftest mytest :
  val arg1 = myfunction(10, 20)
  #ASSERT(arg1)
  #ASSERT(arg1 == arg2)
  #ASSERT(arg1 <= arg2)
  #ASSERT(func(arg1, arg2))
  #ASSERT(Vector<String>())
  #ASSERT(func(arg1, arg2) == 3)
  
  stz/test-framework/assert $ new stz/test-framework/Assertion :
    defmethod stz/test-framework/run (this) :
      arg1 == 3
    defmethod stz/test-framework/description (this) :
      "myfunction(10, 20) == 3"
    defmethod stz/test-framework/info (this) :
      FileInfo("myfile.stanza", 10, 11)
    defmethod stz/test-framework/values (this) :
      [stz/test-framework/AssertionValue("myfunction(10, 20)", arg1)]

deftest mytest2 :
  val arg1 = myfunction(-10, 20)
  stz/test-framework/assert $ new stz/test-framework/Assertion :
    defmethod stz/test-framework/run (this) :
      arg1 == 3
    defmethod stz/test-framework/description (this) :
      "myfunction(10, 20) == 3"
    defmethod stz/test-framework/info (this) :
      FileInfo("myfile.stanza", 10, 11)
    defmethod stz/test-framework/values (this) :
      [stz/test-framework/AssertionValue("myfunction(10, 20)", arg1)]

deftest mytest3 :
  val arg1 = myfunction(10, 20)
  val items = Vector<String>()
  stz/test-framework/assert $ new stz/test-framework/Assertion :
    defmethod stz/test-framework/run (this) :
      arg1 == 30
    defmethod stz/test-framework/description (this) :
      "myfunction(10, 20) == 30"
    defmethod stz/test-framework/info (this) :
      FileInfo("myfile.stanza", 10, 11)
    defmethod stz/test-framework/values (this) :
      [stz/test-framework/AssertionValue("myfunction(10, 20)", arg1)]    

stz/test-framework/print-test-report()