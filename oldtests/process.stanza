defpackage dup :
  import core
  import collections

protected extern launch_process: (ptr<byte>, ptr<ptr<byte>>, int, int, int, ptr<?>) -> int
protected extern retrieve_process_state: (long, ptr<?>) -> int
protected extern initialize_launcher_process: () -> int

defpackage process :
  import core
  import collections

;TODO
lostanza val null:ptr<?> = 0L as ptr<?>
  
public lostanza deftype Process :
  pid: long
  input: ptr<?>
  output: ptr<?>
  error: ptr<?>

public defmulti input-stream (p:Process) -> OutputStream
public defmulti output-stream (p:Process) -> InputStream
public defmulti error-stream (p:Process) -> InputStream

public deftype ProcessState
public defstruct ProcessRunning <: ProcessState
public defstruct ProcessDone <: ProcessState : (value:Int)
public defstruct ProcessTerminated <: ProcessState : (signal:Int)
public defstruct ProcessStopped <: ProcessState : (signal:Int)

defmethod print (o:OutputStream, s:ProcessState) :
  print{o, _} $ match(s) :
      (s:ProcessRunning) : "Running"
      (s:ProcessDone) : "Done(exit value = %_)" % [value(s)]
      (s:ProcessTerminated) : "Terminated(signal = %_)" % [signal(s)]
      (s:ProcessStopped) : "Stopped(signal = %_)" % [signal(s)]

public defstruct StreamSpecifier <: Equalable : (value:Int)
public val STANDARD-IN = StreamSpecifier(0)
public val STANDARD-OUT = StreamSpecifier(1)
public val PROCESS-IN = StreamSpecifier(2)
public val PROCESS-OUT = StreamSpecifier(3)
public val STANDARD-ERR = StreamSpecifier(4)
public val PROCESS-ERR = StreamSpecifier(5)

defmethod equal? (a:StreamSpecifier, b:StreamSpecifier) :
  value(a) == value(b)

defmethod print (o:OutputStream, s:StreamSpecifier) :
  print{o, _} $ switch(value(s)) :
    0 : "STANDARD-IN"
    1 : "STANDARD-OUT"
    2 : "PROCESS-IN"
    3 : "PROCESS-OUT"
    4 : "STANDARD-ERR"
    5 : "PROCESS-ERR"

public lostanza defn Process (filename:ref<String>,
                              args0:ref<Seqable<String>>,
                              input:ref<StreamSpecifier>,
                              output:ref<StreamSpecifier>,
                              error:ref<StreamSpecifier>) -> ref<Process> :
  ensure-valid-stream-specifiers(input, output, error)
  val args = to-tuple(args0)
  val proc = new Process{0, null, null, null}
  val input_v = value(input).value
  val output_v = value(output).value
  val error_v = value(error).value
  val nargs = args.length
  val argvs:ptr<ptr<byte>> = call-c clib/malloc((nargs + 1) * sizeof(ptr<?>))
  argvs[nargs] = null
  for (var i:long = 0, i < nargs, i = i + 1) :
    argvs[i] = addr!(args.items[i].chars)
  call-c dup/launch_process(addr!(filename.chars), argvs, input_v, output_v, error_v, addr!([proc]))
  return proc
public defn Process (filename:String, args:Seqable<String>) :
  Process(filename, args, STANDARD-IN, STANDARD-OUT, STANDARD-ERR)

defn ensure-valid-stream-specifiers (input:StreamSpecifier, output:StreamSpecifier, error:StreamSpecifier) :
  if not contains?([STANDARD-IN, PROCESS-IN], input) :
    fatal("%_ is not a valid input stream specifier." % [input])
  if not contains?([STANDARD-OUT, PROCESS-OUT, PROCESS-ERR], output) :
    fatal("%_ is not a valid output stream specifier." % [output])
  if not contains?([STANDARD-ERR, PROCESS-OUT, PROCESS-ERR], error) :
    fatal("%_ is not a valid error stream specifier." % [error])

public lostanza defmethod input-stream (p:ref<Process>) -> ref<OutputStream> :
  if p.input == null : fatal(String("Process has no input stream."))
  return new FileOutputStream{p.input, 0}
public lostanza defmethod output-stream (p:ref<Process>) -> ref<InputStream> :
  if p.output == null : fatal(String("Process has no output stream."))
  return new FileInputStream{p.output, 0}
public lostanza defmethod error-stream (p:ref<Process>) -> ref<InputStream> :
  if p.error == null : fatal(String("Process has no error stream."))
  return new FileInputStream{p.error, 0}

public lostanza defn initialize-process-launcher () -> ref<False> :
  call-c dup/initialize_launcher_process()
  return false  

lostanza deftype StateStruct :
  state: int
  code: int
public lostanza defn state (p:ref<Process>) -> ref<ProcessState> :
  val s = new StateStruct{0, 0}
  call-c dup/retrieve_process_state(p.pid, addr!([s]))
  
  ;State Codes
  val RUNNING = 0
  val DONE = 1
  val TERMINATED = 2
  val STOPPED = 3

  ;Translation
  if s.state == RUNNING :
    return ProcessRunning()
  else if s.state == DONE :
    return ProcessDone(new Int{s.code})
  else if s.state == TERMINATED :
    return ProcessTerminated(new Int{s.code})
  else if s.state == STOPPED :
    return ProcessStopped(new Int{s.code})
  else :
    return fatal(String("Unreachable"))

;============================================================
;================= System Calls =============================
;============================================================

public defn call-system-2 (file:String, args:Seqable<String>) -> Int :
  val p = Process(file, args)
  let loop () :
    match(state(p)) :
      (s:ProcessRunning) : loop()
      (s:ProcessDone) : value(s)
      (s) : throw(ProcessAbortedError(s))

public defstruct ProcessAbortedError <: Exception :
  state: ProcessState
defmethod print (o:OutputStream, e:ProcessAbortedError) :
  match(state(e)) :
    (s:ProcessTerminated) : print(o, "Process prematurely terminated with signal %_." % [signal(s)])
    (s:ProcessStopped) : print(o, "Process prematurely stopped with signal %_." % [signal(s)])     
  

;TESTING
extern sleep: int -> int
lostanza defn sleeps (t:ref<Int>) -> ref<False> :
  call-c sleep(t.value)
  return false
  
let :
  println(call-system-2("./child", ["./child"]))
  println("FINISHED PROGRAM")


  ;initialize-process-launcher()
  ;val p = Process("./child", ["./child"], STANDARD-IN, STANDARD-OUT, STANDARD-ERR)
  ;;val o = output-stream(p)
  ;;let loop () :
  ;;  val c = get-char(o)
  ;;  match(c:Char) :
  ;;    print(c)
  ;;    loop()
  
