defpackage freelist :
  import core
  import collections
  import stz/algorithms

defn test (example:Int, es:Tuple<KeyValue<Int,Int>>) :
  val N = maximum(cat(seq(key,es), seq(value,es))) + 1
  test(example, N, es)

defn test (example:Int, N:Int, es:Tuple<KeyValue<Int,Int>>) :
  println("==== Example %_ ====" % [example])
  ;Compute children
  val children = Array<List<Int>>(N,List())
  for entry in es do :
    val [src, dst] = [key(entry), value(entry)]
    children[src] = cons(dst, children[src])
  ;Transitive closure
  val all-children = transitive-closure(seq(KeyValue, 0 to N, children))
  defn child? (c:Int, n:Int) :
    contains?(lookup(all-children,n), c)
  ;Compute ordering
  do(println, ambiguity-ordering(N, child?))
  println("\n\n\n")

defn main () :
  test(1, 2, [])

  test(2,
   [0 => 1
    0 => 2])

  test(3,
   [0 => 1])

  test(4,
   [0 => 1
    0 => 2
    1 => 3
    2 => 3])

  test(5,
   [0 => 2
    1 => 2])

  test(6,
   [0 => 1
    0 => 2
    1 => 4
    2 => 3])

  test(7,
   [0 => 2
    1 => 2
    1 => 3
    2 => 4])

  test(8,
   [0 => 1
    0 => 2
    1 => 3
    2 => 3
    2 => 4
    3 => 5
    4 => 5])

main()