defpackage buffered-input-stream :
    import core
    import collections

val test-string = "This is a test of Stanza's new BufferedInputStream."

defn assert-equal (a:Equalable, b:Equalable) :
    if a != b :
        fatal("Assertion failed. Expected %_, but got %_" % [b, a])

; Checks that iterating through a BufferedInputStream works for different buffer sizes
defn test-basic () :
    for buffer-size in 1 to 55 do :
        val buffered-stream = BufferedInputStream(StringInputStream(test-string), buffer-size)
        val read-chars = Vector<Char>()
        while peek?(buffered-stream) is Char :
            add(read-chars, get-char(buffered-stream) as Char)
        assert-equal(string-join(read-chars), test-string)

; Checks that iterating and peeking at different locations in a BufferedInputStream works for different buffer sizes
defn test-peek? (buffer-size:Int) :
   println("Buffer Size = %_" % [buffer-size])
   val buffered-stream = BufferedInputStream(StringInputStream(test-string), buffer-size)
   for start in 0 to length(test-string) do :
      for i in 0 to min(buffer-size, length(test-string) - start) do :
         assert-equal(peek?(buffered-stream, i), test-string[start + i])
      get-char(buffered-stream)   

defn test-peek? () :
   do(test-peek?, 1 to 55)

; Checks that filling a BufferedInputStream works for different ranges and buffer sizes
defn test-fill () :
    for buffer-size in 1 to length(test-string) do :
        for i in 1 to length(test-string) do :
            for j in (i + 1) to length(test-string) do :
                val buffered-stream = BufferedInputStream(StringInputStream(test-string), buffer-size)
                val array = CharArray(length(test-string))
                fill(array, i to j, buffered-stream)
                for k in i to j do :
                    assert-equal(array[k], test-string[k - i])

; Checks that peek-filling a BufferedInputStream works for different ranges and buffer sizes
defn test-peek-fill () :
    for buffer-size in 1 to length(test-string) do :
        val buffered-stream = BufferedInputStream(StringInputStream(test-string), buffer-size)
        for i in 0 to buffer-size do :
            for j in (i + 1) to buffer-size do :
                val xs = CharArray(buffer-size)
                peek-fill(xs, i to j, buffered-stream)
                for k in i to j do :
                    assert-equal(xs[k], test-string[k - i])

; Cannot make a BufferedInputStream with buffer size <= 0
defn test-buffer-size-is-positive () :
    BufferedInputStream(StringInputStream(test-string), 0)

; Cannot peek? backwards into a BufferedInputStream
defn test-peek-error () :
    val stream = BufferedInputStream(StringInputStream(test-string), -1)
    peek?(stream, -1)

; Cannot peek? into a BufferedInputStream farther than its buffer size
defn test-peek-error2 () :
    val stream = BufferedInputStream(StringInputStream(test-string), 5)
    peek?(stream, 10)

; Cannot peek-fill more character from a BufferedInputStream than its buffer size
defn test-peek-fill-error () :
    val stream = BufferedInputStream(StringInputStream(test-string), 5)
    peek-fill(CharArray(10), 0 to 10, stream)

test-basic()
test-peek?()
test-fill()
test-peek-fill()

