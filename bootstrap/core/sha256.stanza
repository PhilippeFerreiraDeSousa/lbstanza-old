defpackage core/sha256 :
  import core
  import collections

;============================================================
;======================== Driver ============================
;============================================================

public lostanza defn sha256-hash (bytes:ref<ByteArray>) -> ref<ByteArray> :
  val out = ByteArray(new Int{32})
  call-c calc_sha_256(addr!(out.data), addr!(bytes.data), bytes.length)
  return out

public defn sha256-hash-file (filename:String) -> ByteArray :
  sha256-hash(read-bytes(filename))

;============================================================
;=================== External Function ======================
;============================================================
extern calc_sha_256: (ptr<byte>, ptr<byte>, long) -> int

defn read-bytes (filename:String) :
  val file = RandomAccessFile(filename, false)
  try :
    val len = truncate-filesize(length(file))  
    val bytes = ByteArray(len)
    fill(bytes, file)
    bytes
  finally :
    close(file)
  
defn truncate-filesize (x:Long) :
  val max = to-long(INT-MAX)
  fatal("File is too big for current implementation.") when x > max
  to-int(x)