defpackage collections :
   import core
   

defpackage core :
   import collections

;============================================================
;================== Core Types ==============================
;============================================================

public :
   lostanza deftype Byte :
      value: byte

   lostanza deftype Char :
      value: byte

   lostanza deftype Int :
      value: int

   lostanza deftype Long :
      value: long

   lostanza deftype Float :
      value: float

   lostanza deftype Double :
      value: double

   lostanza deftype String :
      length: long
      hash: int
      chars: byte ...

   deftype Symbol

   deftype List<T>

   lostanza deftype True
   lostanza deftype False

   lostanza deftype Tuple<T> :
      length: long
      items: ref<T> ...

   deftype Array<T>

   lostanza deftype CharArray <: Array<Char> :
      length: long
      chars: byte ...

   lostanza deftype ByteArray <: Array<Byte> :
      length: long
      data: byte ...

   deftype Token

lostanza deftype Fn :
   length: long
   code: ptr<?>
   free: ref<?> ...
lostanza deftype Box :
   item: ref<?>
lostanza deftype Type :
   length: long
   code: ptr<?>
   free: ref<?> ...
lostanza deftype Stack :
   position: int
   mark: int
   parent: ref<False|Stack>
   sp: ptr<?>
   frames: StackFrame ...
lostanza deftype StackFrame :
   ret: ptr<?>
   map: ptr<RefMap>
   items: long ...
lostanza deftype RefMap :
   length: long
   bits: long ...
lostanza deftype FileInfoTable :
   length: long
   entries: FileInfoEntry ...
lostanza deftype FileInfoEntry :
   lbl: ptr<?>
   file: ptr<byte>
   line: int
   column: int

lostanza defn fatal (msg:ptr<byte>) -> ref<Void> :
   return null as ref<Void>

lostanza defn cast-error () -> ref<Void> :
   return fatal("Cannot cast value to type.")

lostanza defn arity-error () -> ref<Void> :
   return fatal("Wrong number of arguments.")

lostanza defn no-branch-error () -> ref<Void> :
   return fatal("No matching branch.")

lostanza defn amb-branch-error () -> ref<Void> :
   return fatal("Ambiguous branch.")

lostanza defn variable-uninitialized-error () -> ref<Void> :
   return fatal("Variable is uninitialized.")

lostanza defn tuple-length-error () -> ref<Void> :
   return fatal("Tuple has wrong arity for detupling.")

lostanza val null:ptr<?> = 0L as ptr<?>

;Called when attempting to allocate beyond the heap limit.
lostanza defn extend-heap (sz:long) -> int :
   return 0

;Called when the number of free stacks is 2 or less.
;Running extend-stack uses two stacks (1 for GC, 1 for handling extend-stack during GC).
lostanza defn extend-stack () -> int :
   return 0

lostanza defn void-tuple (n:long) -> ref<Tuple> :
   val x = new Tuple{n}
   return x   


public defn println (x) :
   false