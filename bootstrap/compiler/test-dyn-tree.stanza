defpackage test-dyn-tree :
  import core
  import collections
  import stz/dyn-tree

defn main () :
  val t = DynTree()
  
  add{t, _} $ new TreeListener :
    defmethod node-changed (this, n:Int) :
      println("Node %_ changed:" % [n])
      println("  Leaves  = %_" % [all-leaves(t,n)])
      println("  Children = %_" % [all-children(t,n)])

  defn print-state (name) :
    println(name)
    println(t)
    for i in 1 through 7 do :
      println("All children of %_ = %," % [i, all-children(t,i)])
      println("All leaves of %_ = %," % [i, all-leaves(t,i)])

  add(t, [
    NodeState(1, [], [2, 3, 4], false)
    NodeState(2, [], [], true)
    NodeState(3, [], [5,6], false)
    NodeState(4, [], [], false)
    NodeState(5, [], [], false)
    NodeState(6, [], [], false)
    NodeState(7, [5,6], [], true)
  ])
  print-state("Initial Tree")

  add(t, [
    NodeState(7, [4,5], [], true)
    NodeState(1, [], [3,4], false)
    NodeState(2, [3], [], true)
  ])
  print-state("After Moving")

  add(t, [
    NodeState(2, [4], [], true)
  ])
  print-state("Done")

main()