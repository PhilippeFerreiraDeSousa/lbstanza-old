defpackage test-dispatch-dag :
  import core
  import collections
  import stz/dispatch-dag

defn sexp-to-table (bs:Seqable) :
  val branches = to-tuple $ for b in bs seq :
    Branch $ to-tuple $
      for a in b seq :
        match(a):
          (a:Symbol): Top()
          (a:List): Nums(to-tuple(a))
  BranchTable(branches, IntSet())

defn test () :
  ;Create table for test
  val table3 = sexp-to-table $ `(
    ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))         ;Example branch 0
    ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))
    ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2))
    (TOP TOP TOP TOP TOP TOP TOP TOP TOP TOP)
    ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3))
    ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4))
    ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5))    
  )
  val table2 = sexp-to-table $ `(
    ((0) (0) (0))         ;Example branch 0
    (TOP TOP TOP)
    ((1) (1) (1)))
  val table = sexp-to-table $ `(
    ((0) (1 2 3) (3) (4 5 6))         ;Example branch 0
    ((1) (2 3) (4) (5 6))             ;Example branch 1
    ((2) (4 5) (3) (1 2 3 4 5 6))     ;Example branch 2
    ((1 2) (4 5) (3) (1 2 3 4 5 6))   ;Example branch 3
    ((0 1) (2 3) (4 5) (5 6))         ;Example branch 4
    ((0 1) (2 3) (4 5) (6 7 8))       ;Example branch 5
    ((0) (0) (0) (1 2 3))             ;Example branch 6
    ((0) (0) (0) (2 3 4))             ;Example branch 7
    ((0) (0) (0) (2))                 ;Example branch 8
    ((0) (0) (0) (3))                 ;Example branch 9
    (TOP (0) (0) (2 4))               ;Example branch 10
    (TOP (0) (0) TOP)                 ;Example branch 11
    (TOP TOP TOP TOP)                 ;Example branch 12
  )  


  println("Check using table:\n%_\n" % [table])

  ;Compute dag
  val dag = compute-dispatch-dag(table, true)
  println(dag)

  ;Compute all reachable solutions
  ;do(println, all-solns(dag, [Top(), Top(), Top(), Nums([4])], true))

test()