defpackage test-dyn-graph :
  import core
  import collections
  import stz/dynamic-graph

defn parse-edge-sets (forms) :
  match-syntax(forms) :
    ((edgeset ?ids:_ : ((?srcs => ?dsts) @...)) @...) :
      to-tuple $ for (id in ids, src in srcs, dst in dsts) seq :
        val edges = to-tuple(seq(Edge, src, dst))
        EdgeSet(id as Int, edges)

defn main () :
  val g = DynamicGraph()
  defn test (edges, nodes:Tuple<Int>) :
    defn make-node (n:Int) :
      new Node :
        defmethod id (this) : n
        defmethod compute-value (this, v0:Maybe) :
          println("Compute value of node %_ from inputs %," % [n, inputs(g,n)])
          false
    val update = update(g, GraphChange(map(make-node,nodes), parse-edge-sets(edges)))
    println(g)

  test(
    `(edgeset 1 :
        2 => 1
        3 => 1
        4 => 1
      edgeset 2 : ()
      edgeset 3 :
        5 => 3
        6 => 3
      edgeset 4 : ()
      edgeset 5 : ()
      edgeset 6 : ()
      edgeset 7 :
        7 => 5
        7 => 6)
    [1,2,3,4,5,6,7])

  test(
    `(edgeset 7 :
        7 => 4
        7 => 5
      edgeset 1 :
        3 => 1
        4 => 1
      edgeset 2 :
        2 => 3)
    [])



main()