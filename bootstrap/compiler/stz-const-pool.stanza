defpackage stz/const-pool :
  import core
  import collections
  import stz/vm-ir

;============================================================
;=================== Constant Pool ==========================
;============================================================

public deftype ConstantPool
public defmulti intern (p:ConstantPool, v:VMValue) -> VMInternedConst
public defmulti consts (p:ConstantPool) -> Vector<VMValue>

public defn ConstantPool () :
  val consts = Vector<VMValue>()
  val const-table = HashTable<VMValue,Int>()
  defn intern-const (v:VMValue) -> VMInternedConst :
    if key?(const-table,v) :
      val id = const-table[v]
      VMInternedConst(ConstId(id))
    else :
      val v* = match(v) :
        (v:List) : map(intern-const, v)
        (v) : v
      val id = length(consts)
      add(consts, v*)
      const-table[v*] = id
      VMInternedConst(ConstId(id))
  new ConstantPool :
    defmethod intern (this, v:VMValue) :
      intern-const(v)
    defmethod consts (this) :
      consts

;============================================================
;=================== Const Compilation ======================
;============================================================

val BYTE-CONST-TAG = 0
val CHAR-CONST-TAG = 1
val INT-CONST-TAG = 2
val LONG-CONST-TAG = 3
val FLOAT-CONST-TAG = 4
val DOUBLE-CONST-TAG = 5
val TRUE-CONST-TAG = 6
val FALSE-CONST-TAG = 7
val LIST-CONST-TAG = 8
val STRING-CONST-TAG = 9
val SYMBOL-CONST-TAG = 10
val TYPE-CONST-TAG = 11
val FN-CONST-TAG = 12
val INTERNED-CONST-TAG = 13

public deftype ConstWriter
public defmulti write (w:ConstWriter, b:Byte) -> False
public defmulti write (w:ConstWriter, i:Int) -> False
public defmulti write (w:ConstWriter, l:Long) -> False
public defmulti write (w:ConstWriter, id:CodeId) -> False

public defn write-const (writer:ConstWriter, v:VMValue) :
  let emit (v:VMValue = v) :
    match(v) :
      (v:Char) :
        write(writer, CHAR-CONST-TAG)
        write(writer, to-byte(v))
      (v:Byte) :
        write(writer, BYTE-CONST-TAG)
        write(writer, v)
      (v:Int) :
        write(writer, INT-CONST-TAG)
        write(writer, v)
      (v:Long) :
        write(writer, LONG-CONST-TAG)
        write(writer, v)
      (v:Float) :
        write(writer, FLOAT-CONST-TAG)
        write(writer, bits(v))
      (v:Double) :
        write(writer, DOUBLE-CONST-TAG)
        write(writer, bits(v))
      (v:String) :
        write(writer, STRING-CONST-TAG)
        emit-chars(writer, v)
      (v:Symbol) :
        write(writer, SYMBOL-CONST-TAG)
        emit-chars(writer, to-string(v))
      (v:List) :
        write(writer, LIST-CONST-TAG)
        write(writer, length(v))
        do(emit, v)
      (v:True) :
        write(writer, TRUE-CONST-TAG)
      (v:False) :
        write(writer, FALSE-CONST-TAG)
      (v:VMTypeObject) :
        write(writer, TYPE-CONST-TAG)
        write(writer, id(v))
      (v:VMClosure) :
        write(writer, FN-CONST-TAG)
        write(writer, id(v))
      (v:VMInternedConst) :
        write(writer, INTERNED-CONST-TAG)
        write(writer, id(id(v)))
      (v) :
        fatal("Unrecognized constant: %~" % [v])

defn emit-chars (writer:ConstWriter, s:String) :
  val n = length(s)
  write(writer, n)
  for c in s do :
    write(writer, to-byte(c))
  val endn = (n + 3) & -4
  for i in n to endn do :
    write(writer, 0Y)
